/* eslint-disable */
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const md = $root.md = (() => {

    /**
     * Namespace md.
     * @exports md
     * @namespace
     */
    const md = {};

    md.maib = (function() {

        /**
         * Namespace maib.
         * @memberof md
         * @namespace
         */
        const maib = {};

        maib.app = (function() {

            /**
             * Namespace app.
             * @memberof md.maib
             * @namespace
             */
            const app = {};

            app.login = (function() {

                /**
                 * Namespace login.
                 * @memberof md.maib.app
                 * @namespace
                 */
                const login = {};

                login.LoginInitRequest = (function() {

                    /**
                     * Properties of a LoginInitRequest.
                     * @memberof md.maib.app.login
                     * @interface ILoginInitRequest
                     * @property {string|null} [pan] LoginInitRequest pan
                     * @property {string|null} [pin5] LoginInitRequest pin5
                     * @property {boolean|null} [sendToEmail] LoginInitRequest sendToEmail
                     */

                    /**
                     * Constructs a new LoginInitRequest.
                     * @memberof md.maib.app.login
                     * @classdesc Represents a LoginInitRequest.
                     * @implements ILoginInitRequest
                     * @constructor
                     * @param {md.maib.app.login.ILoginInitRequest=} [properties] Properties to set
                     */
                    function LoginInitRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * LoginInitRequest pan.
                     * @member {string} pan
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @instance
                     */
                    LoginInitRequest.prototype.pan = "";

                    /**
                     * LoginInitRequest pin5.
                     * @member {string} pin5
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @instance
                     */
                    LoginInitRequest.prototype.pin5 = "";

                    /**
                     * LoginInitRequest sendToEmail.
                     * @member {boolean} sendToEmail
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @instance
                     */
                    LoginInitRequest.prototype.sendToEmail = false;

                    /**
                     * Creates a new LoginInitRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @static
                     * @param {md.maib.app.login.ILoginInitRequest=} [properties] Properties to set
                     * @returns {md.maib.app.login.LoginInitRequest} LoginInitRequest instance
                     */
                    LoginInitRequest.create = function create(properties) {
                        return new LoginInitRequest(properties);
                    };

                    /**
                     * Encodes the specified LoginInitRequest message. Does not implicitly {@link md.maib.app.login.LoginInitRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @static
                     * @param {md.maib.app.login.ILoginInitRequest} message LoginInitRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoginInitRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pan != null && Object.hasOwnProperty.call(message, "pan"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.pan);
                        if (message.pin5 != null && Object.hasOwnProperty.call(message, "pin5"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pin5);
                        if (message.sendToEmail != null && Object.hasOwnProperty.call(message, "sendToEmail"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.sendToEmail);
                        return writer;
                    };

                    /**
                     * Encodes the specified LoginInitRequest message, length delimited. Does not implicitly {@link md.maib.app.login.LoginInitRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @static
                     * @param {md.maib.app.login.ILoginInitRequest} message LoginInitRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoginInitRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a LoginInitRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.login.LoginInitRequest} LoginInitRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoginInitRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.login.LoginInitRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pan = reader.string();
                                break;
                            case 2:
                                message.pin5 = reader.string();
                                break;
                            case 3:
                                message.sendToEmail = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a LoginInitRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.login.LoginInitRequest} LoginInitRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoginInitRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a LoginInitRequest message.
                     * @function verify
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LoginInitRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pan != null && message.hasOwnProperty("pan"))
                            if (!$util.isString(message.pan))
                                return "pan: string expected";
                        if (message.pin5 != null && message.hasOwnProperty("pin5"))
                            if (!$util.isString(message.pin5))
                                return "pin5: string expected";
                        if (message.sendToEmail != null && message.hasOwnProperty("sendToEmail"))
                            if (typeof message.sendToEmail !== "boolean")
                                return "sendToEmail: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a LoginInitRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.login.LoginInitRequest} LoginInitRequest
                     */
                    LoginInitRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.login.LoginInitRequest)
                            return object;
                        let message = new $root.md.maib.app.login.LoginInitRequest();
                        if (object.pan != null)
                            message.pan = String(object.pan);
                        if (object.pin5 != null)
                            message.pin5 = String(object.pin5);
                        if (object.sendToEmail != null)
                            message.sendToEmail = Boolean(object.sendToEmail);
                        return message;
                    };

                    /**
                     * Creates a plain object from a LoginInitRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @static
                     * @param {md.maib.app.login.LoginInitRequest} message LoginInitRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LoginInitRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.pan = "";
                            object.pin5 = "";
                            object.sendToEmail = false;
                        }
                        if (message.pan != null && message.hasOwnProperty("pan"))
                            object.pan = message.pan;
                        if (message.pin5 != null && message.hasOwnProperty("pin5"))
                            object.pin5 = message.pin5;
                        if (message.sendToEmail != null && message.hasOwnProperty("sendToEmail"))
                            object.sendToEmail = message.sendToEmail;
                        return object;
                    };

                    /**
                     * Converts this LoginInitRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.login.LoginInitRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LoginInitRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return LoginInitRequest;
                })();

                login.LoginInitResponse = (function() {

                    /**
                     * Properties of a LoginInitResponse.
                     * @memberof md.maib.app.login
                     * @interface ILoginInitResponse
                     * @property {md.maib.app.login.LoginInitResponse.Result|null} [result] LoginInitResponse result
                     * @property {string|null} [maskedPhone] LoginInitResponse maskedPhone
                     * @property {boolean|null} [canSendOtpToEmail] LoginInitResponse canSendOtpToEmail
                     * @property {string|null} [maskedEmail] LoginInitResponse maskedEmail
                     */

                    /**
                     * Constructs a new LoginInitResponse.
                     * @memberof md.maib.app.login
                     * @classdesc Represents a LoginInitResponse.
                     * @implements ILoginInitResponse
                     * @constructor
                     * @param {md.maib.app.login.ILoginInitResponse=} [properties] Properties to set
                     */
                    function LoginInitResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * LoginInitResponse result.
                     * @member {md.maib.app.login.LoginInitResponse.Result} result
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @instance
                     */
                    LoginInitResponse.prototype.result = 0;

                    /**
                     * LoginInitResponse maskedPhone.
                     * @member {string} maskedPhone
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @instance
                     */
                    LoginInitResponse.prototype.maskedPhone = "";

                    /**
                     * LoginInitResponse canSendOtpToEmail.
                     * @member {boolean} canSendOtpToEmail
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @instance
                     */
                    LoginInitResponse.prototype.canSendOtpToEmail = false;

                    /**
                     * LoginInitResponse maskedEmail.
                     * @member {string} maskedEmail
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @instance
                     */
                    LoginInitResponse.prototype.maskedEmail = "";

                    /**
                     * Creates a new LoginInitResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @static
                     * @param {md.maib.app.login.ILoginInitResponse=} [properties] Properties to set
                     * @returns {md.maib.app.login.LoginInitResponse} LoginInitResponse instance
                     */
                    LoginInitResponse.create = function create(properties) {
                        return new LoginInitResponse(properties);
                    };

                    /**
                     * Encodes the specified LoginInitResponse message. Does not implicitly {@link md.maib.app.login.LoginInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @static
                     * @param {md.maib.app.login.ILoginInitResponse} message LoginInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoginInitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                        if (message.maskedPhone != null && Object.hasOwnProperty.call(message, "maskedPhone"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.maskedPhone);
                        if (message.canSendOtpToEmail != null && Object.hasOwnProperty.call(message, "canSendOtpToEmail"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.canSendOtpToEmail);
                        if (message.maskedEmail != null && Object.hasOwnProperty.call(message, "maskedEmail"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.maskedEmail);
                        return writer;
                    };

                    /**
                     * Encodes the specified LoginInitResponse message, length delimited. Does not implicitly {@link md.maib.app.login.LoginInitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @static
                     * @param {md.maib.app.login.ILoginInitResponse} message LoginInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoginInitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a LoginInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.login.LoginInitResponse} LoginInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoginInitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.login.LoginInitResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.result = reader.int32();
                                break;
                            case 2:
                                message.maskedPhone = reader.string();
                                break;
                            case 3:
                                message.canSendOtpToEmail = reader.bool();
                                break;
                            case 4:
                                message.maskedEmail = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a LoginInitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.login.LoginInitResponse} LoginInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoginInitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a LoginInitResponse message.
                     * @function verify
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LoginInitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 10:
                                break;
                            }
                        if (message.maskedPhone != null && message.hasOwnProperty("maskedPhone"))
                            if (!$util.isString(message.maskedPhone))
                                return "maskedPhone: string expected";
                        if (message.canSendOtpToEmail != null && message.hasOwnProperty("canSendOtpToEmail"))
                            if (typeof message.canSendOtpToEmail !== "boolean")
                                return "canSendOtpToEmail: boolean expected";
                        if (message.maskedEmail != null && message.hasOwnProperty("maskedEmail"))
                            if (!$util.isString(message.maskedEmail))
                                return "maskedEmail: string expected";
                        return null;
                    };

                    /**
                     * Creates a LoginInitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.login.LoginInitResponse} LoginInitResponse
                     */
                    LoginInitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.login.LoginInitResponse)
                            return object;
                        let message = new $root.md.maib.app.login.LoginInitResponse();
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "WRONG_INPUT":
                        case 2:
                            message.result = 2;
                            break;
                        case "EXCEEDED_OTP_LIMIT":
                        case 3:
                            message.result = 3;
                            break;
                        case "PHONE_NOT_FOUND":
                        case 4:
                            message.result = 4;
                            break;
                        case "SERVER_ERROR":
                        case 5:
                            message.result = 5;
                            break;
                        case "INVALID_PROFILE_STATE":
                        case 6:
                            message.result = 6;
                            break;
                        case "PROFILE_BLOCKED":
                        case 7:
                            message.result = 7;
                            break;
                        case "CARD_BLOCKED":
                        case 8:
                            message.result = 8;
                            break;
                        case "EXCEEDED_PIN_LIMIT":
                        case 9:
                            message.result = 9;
                            break;
                        case "CARD_NOT_ACTIVE":
                        case 10:
                            message.result = 10;
                            break;
                        }
                        if (object.maskedPhone != null)
                            message.maskedPhone = String(object.maskedPhone);
                        if (object.canSendOtpToEmail != null)
                            message.canSendOtpToEmail = Boolean(object.canSendOtpToEmail);
                        if (object.maskedEmail != null)
                            message.maskedEmail = String(object.maskedEmail);
                        return message;
                    };

                    /**
                     * Creates a plain object from a LoginInitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @static
                     * @param {md.maib.app.login.LoginInitResponse} message LoginInitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LoginInitResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                            object.maskedPhone = "";
                            object.canSendOtpToEmail = false;
                            object.maskedEmail = "";
                        }
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.login.LoginInitResponse.Result[message.result] : message.result;
                        if (message.maskedPhone != null && message.hasOwnProperty("maskedPhone"))
                            object.maskedPhone = message.maskedPhone;
                        if (message.canSendOtpToEmail != null && message.hasOwnProperty("canSendOtpToEmail"))
                            object.canSendOtpToEmail = message.canSendOtpToEmail;
                        if (message.maskedEmail != null && message.hasOwnProperty("maskedEmail"))
                            object.maskedEmail = message.maskedEmail;
                        return object;
                    };

                    /**
                     * Converts this LoginInitResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.login.LoginInitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LoginInitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.login.LoginInitResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} WRONG_INPUT=2 WRONG_INPUT value
                     * @property {number} EXCEEDED_OTP_LIMIT=3 EXCEEDED_OTP_LIMIT value
                     * @property {number} PHONE_NOT_FOUND=4 PHONE_NOT_FOUND value
                     * @property {number} SERVER_ERROR=5 SERVER_ERROR value
                     * @property {number} INVALID_PROFILE_STATE=6 INVALID_PROFILE_STATE value
                     * @property {number} PROFILE_BLOCKED=7 PROFILE_BLOCKED value
                     * @property {number} CARD_BLOCKED=8 CARD_BLOCKED value
                     * @property {number} EXCEEDED_PIN_LIMIT=9 EXCEEDED_PIN_LIMIT value
                     * @property {number} CARD_NOT_ACTIVE=10 CARD_NOT_ACTIVE value
                     */
                    LoginInitResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "WRONG_INPUT"] = 2;
                        values[valuesById[3] = "EXCEEDED_OTP_LIMIT"] = 3;
                        values[valuesById[4] = "PHONE_NOT_FOUND"] = 4;
                        values[valuesById[5] = "SERVER_ERROR"] = 5;
                        values[valuesById[6] = "INVALID_PROFILE_STATE"] = 6;
                        values[valuesById[7] = "PROFILE_BLOCKED"] = 7;
                        values[valuesById[8] = "CARD_BLOCKED"] = 8;
                        values[valuesById[9] = "EXCEEDED_PIN_LIMIT"] = 9;
                        values[valuesById[10] = "CARD_NOT_ACTIVE"] = 10;
                        return values;
                    })();

                    return LoginInitResponse;
                })();

                login.LoginConfirmRequest = (function() {

                    /**
                     * Properties of a LoginConfirmRequest.
                     * @memberof md.maib.app.login
                     * @interface ILoginConfirmRequest
                     * @property {string|null} [pan] LoginConfirmRequest pan
                     * @property {string|null} [pin5] LoginConfirmRequest pin5
                     * @property {string|null} [otp] LoginConfirmRequest otp
                     * @property {md.maib.app.util.OtpType|null} [otpType] LoginConfirmRequest otpType
                     */

                    /**
                     * Constructs a new LoginConfirmRequest.
                     * @memberof md.maib.app.login
                     * @classdesc Represents a LoginConfirmRequest.
                     * @implements ILoginConfirmRequest
                     * @constructor
                     * @param {md.maib.app.login.ILoginConfirmRequest=} [properties] Properties to set
                     */
                    function LoginConfirmRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * LoginConfirmRequest pan.
                     * @member {string} pan
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @instance
                     */
                    LoginConfirmRequest.prototype.pan = "";

                    /**
                     * LoginConfirmRequest pin5.
                     * @member {string} pin5
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @instance
                     */
                    LoginConfirmRequest.prototype.pin5 = "";

                    /**
                     * LoginConfirmRequest otp.
                     * @member {string} otp
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @instance
                     */
                    LoginConfirmRequest.prototype.otp = "";

                    /**
                     * LoginConfirmRequest otpType.
                     * @member {md.maib.app.util.OtpType} otpType
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @instance
                     */
                    LoginConfirmRequest.prototype.otpType = 0;

                    /**
                     * Creates a new LoginConfirmRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @static
                     * @param {md.maib.app.login.ILoginConfirmRequest=} [properties] Properties to set
                     * @returns {md.maib.app.login.LoginConfirmRequest} LoginConfirmRequest instance
                     */
                    LoginConfirmRequest.create = function create(properties) {
                        return new LoginConfirmRequest(properties);
                    };

                    /**
                     * Encodes the specified LoginConfirmRequest message. Does not implicitly {@link md.maib.app.login.LoginConfirmRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @static
                     * @param {md.maib.app.login.ILoginConfirmRequest} message LoginConfirmRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoginConfirmRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pan != null && Object.hasOwnProperty.call(message, "pan"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.pan);
                        if (message.pin5 != null && Object.hasOwnProperty.call(message, "pin5"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pin5);
                        if (message.otp != null && Object.hasOwnProperty.call(message, "otp"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.otp);
                        if (message.otpType != null && Object.hasOwnProperty.call(message, "otpType"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.otpType);
                        return writer;
                    };

                    /**
                     * Encodes the specified LoginConfirmRequest message, length delimited. Does not implicitly {@link md.maib.app.login.LoginConfirmRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @static
                     * @param {md.maib.app.login.ILoginConfirmRequest} message LoginConfirmRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoginConfirmRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a LoginConfirmRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.login.LoginConfirmRequest} LoginConfirmRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoginConfirmRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.login.LoginConfirmRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pan = reader.string();
                                break;
                            case 2:
                                message.pin5 = reader.string();
                                break;
                            case 3:
                                message.otp = reader.string();
                                break;
                            case 4:
                                message.otpType = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a LoginConfirmRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.login.LoginConfirmRequest} LoginConfirmRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoginConfirmRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a LoginConfirmRequest message.
                     * @function verify
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LoginConfirmRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pan != null && message.hasOwnProperty("pan"))
                            if (!$util.isString(message.pan))
                                return "pan: string expected";
                        if (message.pin5 != null && message.hasOwnProperty("pin5"))
                            if (!$util.isString(message.pin5))
                                return "pin5: string expected";
                        if (message.otp != null && message.hasOwnProperty("otp"))
                            if (!$util.isString(message.otp))
                                return "otp: string expected";
                        if (message.otpType != null && message.hasOwnProperty("otpType"))
                            switch (message.otpType) {
                            default:
                                return "otpType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a LoginConfirmRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.login.LoginConfirmRequest} LoginConfirmRequest
                     */
                    LoginConfirmRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.login.LoginConfirmRequest)
                            return object;
                        let message = new $root.md.maib.app.login.LoginConfirmRequest();
                        if (object.pan != null)
                            message.pan = String(object.pan);
                        if (object.pin5 != null)
                            message.pin5 = String(object.pin5);
                        if (object.otp != null)
                            message.otp = String(object.otp);
                        switch (object.otpType) {
                        case "UNKNOWN":
                        case 0:
                            message.otpType = 0;
                            break;
                        case "AUTOMATIC":
                        case 1:
                            message.otpType = 1;
                            break;
                        case "MANUAL":
                        case 2:
                            message.otpType = 2;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a LoginConfirmRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @static
                     * @param {md.maib.app.login.LoginConfirmRequest} message LoginConfirmRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LoginConfirmRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.pan = "";
                            object.pin5 = "";
                            object.otp = "";
                            object.otpType = options.enums === String ? "UNKNOWN" : 0;
                        }
                        if (message.pan != null && message.hasOwnProperty("pan"))
                            object.pan = message.pan;
                        if (message.pin5 != null && message.hasOwnProperty("pin5"))
                            object.pin5 = message.pin5;
                        if (message.otp != null && message.hasOwnProperty("otp"))
                            object.otp = message.otp;
                        if (message.otpType != null && message.hasOwnProperty("otpType"))
                            object.otpType = options.enums === String ? $root.md.maib.app.util.OtpType[message.otpType] : message.otpType;
                        return object;
                    };

                    /**
                     * Converts this LoginConfirmRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.login.LoginConfirmRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LoginConfirmRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return LoginConfirmRequest;
                })();

                login.LoginConfirmResponse = (function() {

                    /**
                     * Properties of a LoginConfirmResponse.
                     * @memberof md.maib.app.login
                     * @interface ILoginConfirmResponse
                     * @property {string|null} [token] LoginConfirmResponse token
                     * @property {md.maib.app.login.LoginConfirmResponse.Result|null} [result] LoginConfirmResponse result
                     * @property {md.maib.app.util.OptionalBool|null} [isOnboarded] LoginConfirmResponse isOnboarded
                     * @property {md.maib.app.util.OptionalBool|null} [loginLimited] LoginConfirmResponse loginLimited
                     */

                    /**
                     * Constructs a new LoginConfirmResponse.
                     * @memberof md.maib.app.login
                     * @classdesc Represents a LoginConfirmResponse.
                     * @implements ILoginConfirmResponse
                     * @constructor
                     * @param {md.maib.app.login.ILoginConfirmResponse=} [properties] Properties to set
                     */
                    function LoginConfirmResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * LoginConfirmResponse token.
                     * @member {string} token
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @instance
                     */
                    LoginConfirmResponse.prototype.token = "";

                    /**
                     * LoginConfirmResponse result.
                     * @member {md.maib.app.login.LoginConfirmResponse.Result} result
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @instance
                     */
                    LoginConfirmResponse.prototype.result = 0;

                    /**
                     * LoginConfirmResponse isOnboarded.
                     * @member {md.maib.app.util.OptionalBool} isOnboarded
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @instance
                     */
                    LoginConfirmResponse.prototype.isOnboarded = 0;

                    /**
                     * LoginConfirmResponse loginLimited.
                     * @member {md.maib.app.util.OptionalBool} loginLimited
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @instance
                     */
                    LoginConfirmResponse.prototype.loginLimited = 0;

                    /**
                     * Creates a new LoginConfirmResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @static
                     * @param {md.maib.app.login.ILoginConfirmResponse=} [properties] Properties to set
                     * @returns {md.maib.app.login.LoginConfirmResponse} LoginConfirmResponse instance
                     */
                    LoginConfirmResponse.create = function create(properties) {
                        return new LoginConfirmResponse(properties);
                    };

                    /**
                     * Encodes the specified LoginConfirmResponse message. Does not implicitly {@link md.maib.app.login.LoginConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @static
                     * @param {md.maib.app.login.ILoginConfirmResponse} message LoginConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoginConfirmResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
                        if (message.isOnboarded != null && Object.hasOwnProperty.call(message, "isOnboarded"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.isOnboarded);
                        if (message.loginLimited != null && Object.hasOwnProperty.call(message, "loginLimited"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.loginLimited);
                        return writer;
                    };

                    /**
                     * Encodes the specified LoginConfirmResponse message, length delimited. Does not implicitly {@link md.maib.app.login.LoginConfirmResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @static
                     * @param {md.maib.app.login.ILoginConfirmResponse} message LoginConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoginConfirmResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a LoginConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.login.LoginConfirmResponse} LoginConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoginConfirmResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.login.LoginConfirmResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.token = reader.string();
                                break;
                            case 2:
                                message.result = reader.int32();
                                break;
                            case 3:
                                message.isOnboarded = reader.int32();
                                break;
                            case 4:
                                message.loginLimited = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a LoginConfirmResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.login.LoginConfirmResponse} LoginConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoginConfirmResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a LoginConfirmResponse message.
                     * @function verify
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LoginConfirmResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.token != null && message.hasOwnProperty("token"))
                            if (!$util.isString(message.token))
                                return "token: string expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        if (message.isOnboarded != null && message.hasOwnProperty("isOnboarded"))
                            switch (message.isOnboarded) {
                            default:
                                return "isOnboarded: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.loginLimited != null && message.hasOwnProperty("loginLimited"))
                            switch (message.loginLimited) {
                            default:
                                return "loginLimited: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a LoginConfirmResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.login.LoginConfirmResponse} LoginConfirmResponse
                     */
                    LoginConfirmResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.login.LoginConfirmResponse)
                            return object;
                        let message = new $root.md.maib.app.login.LoginConfirmResponse();
                        if (object.token != null)
                            message.token = String(object.token);
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "WRONG_INPUT":
                        case 2:
                            message.result = 2;
                            break;
                        case "WRONG_OTP":
                        case 3:
                            message.result = 3;
                            break;
                        case "OTP_INVALIDATED":
                        case 4:
                            message.result = 4;
                            break;
                        case "SERVER_ERROR":
                        case 5:
                            message.result = 5;
                            break;
                        }
                        switch (object.isOnboarded) {
                        case "UNSPECIFIED":
                        case 0:
                            message.isOnboarded = 0;
                            break;
                        case "TRUE":
                        case 1:
                            message.isOnboarded = 1;
                            break;
                        case "FALSE":
                        case 2:
                            message.isOnboarded = 2;
                            break;
                        }
                        switch (object.loginLimited) {
                        case "UNSPECIFIED":
                        case 0:
                            message.loginLimited = 0;
                            break;
                        case "TRUE":
                        case 1:
                            message.loginLimited = 1;
                            break;
                        case "FALSE":
                        case 2:
                            message.loginLimited = 2;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a LoginConfirmResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @static
                     * @param {md.maib.app.login.LoginConfirmResponse} message LoginConfirmResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LoginConfirmResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.token = "";
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                            object.isOnboarded = options.enums === String ? "UNSPECIFIED" : 0;
                            object.loginLimited = options.enums === String ? "UNSPECIFIED" : 0;
                        }
                        if (message.token != null && message.hasOwnProperty("token"))
                            object.token = message.token;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.login.LoginConfirmResponse.Result[message.result] : message.result;
                        if (message.isOnboarded != null && message.hasOwnProperty("isOnboarded"))
                            object.isOnboarded = options.enums === String ? $root.md.maib.app.util.OptionalBool[message.isOnboarded] : message.isOnboarded;
                        if (message.loginLimited != null && message.hasOwnProperty("loginLimited"))
                            object.loginLimited = options.enums === String ? $root.md.maib.app.util.OptionalBool[message.loginLimited] : message.loginLimited;
                        return object;
                    };

                    /**
                     * Converts this LoginConfirmResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.login.LoginConfirmResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LoginConfirmResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.login.LoginConfirmResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} WRONG_INPUT=2 WRONG_INPUT value
                     * @property {number} WRONG_OTP=3 WRONG_OTP value
                     * @property {number} OTP_INVALIDATED=4 OTP_INVALIDATED value
                     * @property {number} SERVER_ERROR=5 SERVER_ERROR value
                     */
                    LoginConfirmResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "WRONG_INPUT"] = 2;
                        values[valuesById[3] = "WRONG_OTP"] = 3;
                        values[valuesById[4] = "OTP_INVALIDATED"] = 4;
                        values[valuesById[5] = "SERVER_ERROR"] = 5;
                        return values;
                    })();

                    return LoginConfirmResponse;
                })();

                return login;
            })();

            app.util = (function() {

                /**
                 * Namespace util.
                 * @memberof md.maib.app
                 * @namespace
                 */
                const util = {};

                util.OptionalLong = (function() {

                    /**
                     * Properties of an OptionalLong.
                     * @memberof md.maib.app.util
                     * @interface IOptionalLong
                     * @property {boolean|null} [isPresent] OptionalLong isPresent
                     * @property {number|Long|null} [value] OptionalLong value
                     */

                    /**
                     * Constructs a new OptionalLong.
                     * @memberof md.maib.app.util
                     * @classdesc Represents an OptionalLong.
                     * @implements IOptionalLong
                     * @constructor
                     * @param {md.maib.app.util.IOptionalLong=} [properties] Properties to set
                     */
                    function OptionalLong(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * OptionalLong isPresent.
                     * @member {boolean} isPresent
                     * @memberof md.maib.app.util.OptionalLong
                     * @instance
                     */
                    OptionalLong.prototype.isPresent = false;

                    /**
                     * OptionalLong value.
                     * @member {number|Long} value
                     * @memberof md.maib.app.util.OptionalLong
                     * @instance
                     */
                    OptionalLong.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * Creates a new OptionalLong instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.util.OptionalLong
                     * @static
                     * @param {md.maib.app.util.IOptionalLong=} [properties] Properties to set
                     * @returns {md.maib.app.util.OptionalLong} OptionalLong instance
                     */
                    OptionalLong.create = function create(properties) {
                        return new OptionalLong(properties);
                    };

                    /**
                     * Encodes the specified OptionalLong message. Does not implicitly {@link md.maib.app.util.OptionalLong.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.util.OptionalLong
                     * @static
                     * @param {md.maib.app.util.IOptionalLong} message OptionalLong message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OptionalLong.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.isPresent != null && Object.hasOwnProperty.call(message, "isPresent"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isPresent);
                        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.value);
                        return writer;
                    };

                    /**
                     * Encodes the specified OptionalLong message, length delimited. Does not implicitly {@link md.maib.app.util.OptionalLong.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.util.OptionalLong
                     * @static
                     * @param {md.maib.app.util.IOptionalLong} message OptionalLong message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OptionalLong.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an OptionalLong message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.util.OptionalLong
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.util.OptionalLong} OptionalLong
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OptionalLong.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.util.OptionalLong();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.isPresent = reader.bool();
                                break;
                            case 2:
                                message.value = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an OptionalLong message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.util.OptionalLong
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.util.OptionalLong} OptionalLong
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OptionalLong.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an OptionalLong message.
                     * @function verify
                     * @memberof md.maib.app.util.OptionalLong
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OptionalLong.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.isPresent != null && message.hasOwnProperty("isPresent"))
                            if (typeof message.isPresent !== "boolean")
                                return "isPresent: boolean expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                                return "value: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates an OptionalLong message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.util.OptionalLong
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.util.OptionalLong} OptionalLong
                     */
                    OptionalLong.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.util.OptionalLong)
                            return object;
                        let message = new $root.md.maib.app.util.OptionalLong();
                        if (object.isPresent != null)
                            message.isPresent = Boolean(object.isPresent);
                        if (object.value != null)
                            if ($util.Long)
                                (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                            else if (typeof object.value === "string")
                                message.value = parseInt(object.value, 10);
                            else if (typeof object.value === "number")
                                message.value = object.value;
                            else if (typeof object.value === "object")
                                message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
                        return message;
                    };

                    /**
                     * Creates a plain object from an OptionalLong message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.util.OptionalLong
                     * @static
                     * @param {md.maib.app.util.OptionalLong} message OptionalLong
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OptionalLong.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.isPresent = false;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.value = options.longs === String ? "0" : 0;
                        }
                        if (message.isPresent != null && message.hasOwnProperty("isPresent"))
                            object.isPresent = message.isPresent;
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (typeof message.value === "number")
                                object.value = options.longs === String ? String(message.value) : message.value;
                            else
                                object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
                        return object;
                    };

                    /**
                     * Converts this OptionalLong to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.util.OptionalLong
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OptionalLong.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return OptionalLong;
                })();

                util.GeoLocation = (function() {

                    /**
                     * Properties of a GeoLocation.
                     * @memberof md.maib.app.util
                     * @interface IGeoLocation
                     * @property {number|null} [longitude] GeoLocation longitude
                     * @property {number|null} [latitude] GeoLocation latitude
                     */

                    /**
                     * Constructs a new GeoLocation.
                     * @memberof md.maib.app.util
                     * @classdesc Represents a GeoLocation.
                     * @implements IGeoLocation
                     * @constructor
                     * @param {md.maib.app.util.IGeoLocation=} [properties] Properties to set
                     */
                    function GeoLocation(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GeoLocation longitude.
                     * @member {number} longitude
                     * @memberof md.maib.app.util.GeoLocation
                     * @instance
                     */
                    GeoLocation.prototype.longitude = 0;

                    /**
                     * GeoLocation latitude.
                     * @member {number} latitude
                     * @memberof md.maib.app.util.GeoLocation
                     * @instance
                     */
                    GeoLocation.prototype.latitude = 0;

                    /**
                     * Creates a new GeoLocation instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.util.GeoLocation
                     * @static
                     * @param {md.maib.app.util.IGeoLocation=} [properties] Properties to set
                     * @returns {md.maib.app.util.GeoLocation} GeoLocation instance
                     */
                    GeoLocation.create = function create(properties) {
                        return new GeoLocation(properties);
                    };

                    /**
                     * Encodes the specified GeoLocation message. Does not implicitly {@link md.maib.app.util.GeoLocation.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.util.GeoLocation
                     * @static
                     * @param {md.maib.app.util.IGeoLocation} message GeoLocation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GeoLocation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.longitude != null && Object.hasOwnProperty.call(message, "longitude"))
                            writer.uint32(/* id 1, wireType 1 =*/9).double(message.longitude);
                        if (message.latitude != null && Object.hasOwnProperty.call(message, "latitude"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.latitude);
                        return writer;
                    };

                    /**
                     * Encodes the specified GeoLocation message, length delimited. Does not implicitly {@link md.maib.app.util.GeoLocation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.util.GeoLocation
                     * @static
                     * @param {md.maib.app.util.IGeoLocation} message GeoLocation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GeoLocation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GeoLocation message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.util.GeoLocation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.util.GeoLocation} GeoLocation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GeoLocation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.util.GeoLocation();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.longitude = reader.double();
                                break;
                            case 2:
                                message.latitude = reader.double();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GeoLocation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.util.GeoLocation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.util.GeoLocation} GeoLocation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GeoLocation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GeoLocation message.
                     * @function verify
                     * @memberof md.maib.app.util.GeoLocation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GeoLocation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.longitude != null && message.hasOwnProperty("longitude"))
                            if (typeof message.longitude !== "number")
                                return "longitude: number expected";
                        if (message.latitude != null && message.hasOwnProperty("latitude"))
                            if (typeof message.latitude !== "number")
                                return "latitude: number expected";
                        return null;
                    };

                    /**
                     * Creates a GeoLocation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.util.GeoLocation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.util.GeoLocation} GeoLocation
                     */
                    GeoLocation.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.util.GeoLocation)
                            return object;
                        let message = new $root.md.maib.app.util.GeoLocation();
                        if (object.longitude != null)
                            message.longitude = Number(object.longitude);
                        if (object.latitude != null)
                            message.latitude = Number(object.latitude);
                        return message;
                    };

                    /**
                     * Creates a plain object from a GeoLocation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.util.GeoLocation
                     * @static
                     * @param {md.maib.app.util.GeoLocation} message GeoLocation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GeoLocation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.longitude = 0;
                            object.latitude = 0;
                        }
                        if (message.longitude != null && message.hasOwnProperty("longitude"))
                            object.longitude = options.json && !isFinite(message.longitude) ? String(message.longitude) : message.longitude;
                        if (message.latitude != null && message.hasOwnProperty("latitude"))
                            object.latitude = options.json && !isFinite(message.latitude) ? String(message.latitude) : message.latitude;
                        return object;
                    };

                    /**
                     * Converts this GeoLocation to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.util.GeoLocation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GeoLocation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GeoLocation;
                })();

                /**
                 * OptionalBool enum.
                 * @name md.maib.app.util.OptionalBool
                 * @enum {number}
                 * @property {number} UNSPECIFIED=0 UNSPECIFIED value
                 * @property {number} TRUE=1 TRUE value
                 * @property {number} FALSE=2 FALSE value
                 */
                util.OptionalBool = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNSPECIFIED"] = 0;
                    values[valuesById[1] = "TRUE"] = 1;
                    values[valuesById[2] = "FALSE"] = 2;
                    return values;
                })();

                /**
                 * OtpType enum.
                 * @name md.maib.app.util.OtpType
                 * @enum {number}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} AUTOMATIC=1 AUTOMATIC value
                 * @property {number} MANUAL=2 MANUAL value
                 */
                util.OtpType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN"] = 0;
                    values[valuesById[1] = "AUTOMATIC"] = 1;
                    values[valuesById[2] = "MANUAL"] = 2;
                    return values;
                })();

                /**
                 * RemoteControlState enum.
                 * @name md.maib.app.util.RemoteControlState
                 * @enum {number}
                 * @property {number} UNKNOWN_CONTROL=0 UNKNOWN_CONTROL value
                 * @property {number} CLEAN=1 CLEAN value
                 * @property {number} INSTALLED=2 INSTALLED value
                 * @property {number} RUNNING=3 RUNNING value
                 */
                util.RemoteControlState = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN_CONTROL"] = 0;
                    values[valuesById[1] = "CLEAN"] = 1;
                    values[valuesById[2] = "INSTALLED"] = 2;
                    values[valuesById[3] = "RUNNING"] = 3;
                    return values;
                })();

                return util;
            })();

            app.lockscreen = (function() {

                /**
                 * Namespace lockscreen.
                 * @memberof md.maib.app
                 * @namespace
                 */
                const lockscreen = {};

                lockscreen.LockscreenUnlockAttemptsRequest = (function() {

                    /**
                     * Properties of a LockscreenUnlockAttemptsRequest.
                     * @memberof md.maib.app.lockscreen
                     * @interface ILockscreenUnlockAttemptsRequest
                     * @property {Array.<md.maib.app.lockscreen.IUnlockAttempt>|null} [unlockAttempts] LockscreenUnlockAttemptsRequest unlockAttempts
                     */

                    /**
                     * Constructs a new LockscreenUnlockAttemptsRequest.
                     * @memberof md.maib.app.lockscreen
                     * @classdesc Represents a LockscreenUnlockAttemptsRequest.
                     * @implements ILockscreenUnlockAttemptsRequest
                     * @constructor
                     * @param {md.maib.app.lockscreen.ILockscreenUnlockAttemptsRequest=} [properties] Properties to set
                     */
                    function LockscreenUnlockAttemptsRequest(properties) {
                        this.unlockAttempts = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * LockscreenUnlockAttemptsRequest unlockAttempts.
                     * @member {Array.<md.maib.app.lockscreen.IUnlockAttempt>} unlockAttempts
                     * @memberof md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest
                     * @instance
                     */
                    LockscreenUnlockAttemptsRequest.prototype.unlockAttempts = $util.emptyArray;

                    /**
                     * Creates a new LockscreenUnlockAttemptsRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest
                     * @static
                     * @param {md.maib.app.lockscreen.ILockscreenUnlockAttemptsRequest=} [properties] Properties to set
                     * @returns {md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest} LockscreenUnlockAttemptsRequest instance
                     */
                    LockscreenUnlockAttemptsRequest.create = function create(properties) {
                        return new LockscreenUnlockAttemptsRequest(properties);
                    };

                    /**
                     * Encodes the specified LockscreenUnlockAttemptsRequest message. Does not implicitly {@link md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest
                     * @static
                     * @param {md.maib.app.lockscreen.ILockscreenUnlockAttemptsRequest} message LockscreenUnlockAttemptsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LockscreenUnlockAttemptsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.unlockAttempts != null && message.unlockAttempts.length)
                            for (let i = 0; i < message.unlockAttempts.length; ++i)
                                $root.md.maib.app.lockscreen.UnlockAttempt.encode(message.unlockAttempts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified LockscreenUnlockAttemptsRequest message, length delimited. Does not implicitly {@link md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest
                     * @static
                     * @param {md.maib.app.lockscreen.ILockscreenUnlockAttemptsRequest} message LockscreenUnlockAttemptsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LockscreenUnlockAttemptsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a LockscreenUnlockAttemptsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest} LockscreenUnlockAttemptsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LockscreenUnlockAttemptsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.unlockAttempts && message.unlockAttempts.length))
                                    message.unlockAttempts = [];
                                message.unlockAttempts.push($root.md.maib.app.lockscreen.UnlockAttempt.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a LockscreenUnlockAttemptsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest} LockscreenUnlockAttemptsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LockscreenUnlockAttemptsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a LockscreenUnlockAttemptsRequest message.
                     * @function verify
                     * @memberof md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LockscreenUnlockAttemptsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.unlockAttempts != null && message.hasOwnProperty("unlockAttempts")) {
                            if (!Array.isArray(message.unlockAttempts))
                                return "unlockAttempts: array expected";
                            for (let i = 0; i < message.unlockAttempts.length; ++i) {
                                let error = $root.md.maib.app.lockscreen.UnlockAttempt.verify(message.unlockAttempts[i]);
                                if (error)
                                    return "unlockAttempts." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a LockscreenUnlockAttemptsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest} LockscreenUnlockAttemptsRequest
                     */
                    LockscreenUnlockAttemptsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest)
                            return object;
                        let message = new $root.md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest();
                        if (object.unlockAttempts) {
                            if (!Array.isArray(object.unlockAttempts))
                                throw TypeError(".md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest.unlockAttempts: array expected");
                            message.unlockAttempts = [];
                            for (let i = 0; i < object.unlockAttempts.length; ++i) {
                                if (typeof object.unlockAttempts[i] !== "object")
                                    throw TypeError(".md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest.unlockAttempts: object expected");
                                message.unlockAttempts[i] = $root.md.maib.app.lockscreen.UnlockAttempt.fromObject(object.unlockAttempts[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a LockscreenUnlockAttemptsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest
                     * @static
                     * @param {md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest} message LockscreenUnlockAttemptsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LockscreenUnlockAttemptsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.unlockAttempts = [];
                        if (message.unlockAttempts && message.unlockAttempts.length) {
                            object.unlockAttempts = [];
                            for (let j = 0; j < message.unlockAttempts.length; ++j)
                                object.unlockAttempts[j] = $root.md.maib.app.lockscreen.UnlockAttempt.toObject(message.unlockAttempts[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this LockscreenUnlockAttemptsRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.lockscreen.LockscreenUnlockAttemptsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LockscreenUnlockAttemptsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return LockscreenUnlockAttemptsRequest;
                })();

                lockscreen.UnlockAttempt = (function() {

                    /**
                     * Properties of an UnlockAttempt.
                     * @memberof md.maib.app.lockscreen
                     * @interface IUnlockAttempt
                     * @property {number|Long|null} [date] UnlockAttempt date
                     * @property {boolean|null} [successful] UnlockAttempt successful
                     * @property {md.maib.app.lockscreen.LockscreenType|null} [lockscreenType] UnlockAttempt lockscreenType
                     */

                    /**
                     * Constructs a new UnlockAttempt.
                     * @memberof md.maib.app.lockscreen
                     * @classdesc Represents an UnlockAttempt.
                     * @implements IUnlockAttempt
                     * @constructor
                     * @param {md.maib.app.lockscreen.IUnlockAttempt=} [properties] Properties to set
                     */
                    function UnlockAttempt(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * UnlockAttempt date.
                     * @member {number|Long} date
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @instance
                     */
                    UnlockAttempt.prototype.date = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * UnlockAttempt successful.
                     * @member {boolean} successful
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @instance
                     */
                    UnlockAttempt.prototype.successful = false;

                    /**
                     * UnlockAttempt lockscreenType.
                     * @member {md.maib.app.lockscreen.LockscreenType} lockscreenType
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @instance
                     */
                    UnlockAttempt.prototype.lockscreenType = 0;

                    /**
                     * Creates a new UnlockAttempt instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @static
                     * @param {md.maib.app.lockscreen.IUnlockAttempt=} [properties] Properties to set
                     * @returns {md.maib.app.lockscreen.UnlockAttempt} UnlockAttempt instance
                     */
                    UnlockAttempt.create = function create(properties) {
                        return new UnlockAttempt(properties);
                    };

                    /**
                     * Encodes the specified UnlockAttempt message. Does not implicitly {@link md.maib.app.lockscreen.UnlockAttempt.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @static
                     * @param {md.maib.app.lockscreen.IUnlockAttempt} message UnlockAttempt message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UnlockAttempt.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.date != null && Object.hasOwnProperty.call(message, "date"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.date);
                        if (message.successful != null && Object.hasOwnProperty.call(message, "successful"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.successful);
                        if (message.lockscreenType != null && Object.hasOwnProperty.call(message, "lockscreenType"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.lockscreenType);
                        return writer;
                    };

                    /**
                     * Encodes the specified UnlockAttempt message, length delimited. Does not implicitly {@link md.maib.app.lockscreen.UnlockAttempt.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @static
                     * @param {md.maib.app.lockscreen.IUnlockAttempt} message UnlockAttempt message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UnlockAttempt.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an UnlockAttempt message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.lockscreen.UnlockAttempt} UnlockAttempt
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UnlockAttempt.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.lockscreen.UnlockAttempt();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.date = reader.int64();
                                break;
                            case 2:
                                message.successful = reader.bool();
                                break;
                            case 3:
                                message.lockscreenType = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an UnlockAttempt message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.lockscreen.UnlockAttempt} UnlockAttempt
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UnlockAttempt.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an UnlockAttempt message.
                     * @function verify
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UnlockAttempt.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.date != null && message.hasOwnProperty("date"))
                            if (!$util.isInteger(message.date) && !(message.date && $util.isInteger(message.date.low) && $util.isInteger(message.date.high)))
                                return "date: integer|Long expected";
                        if (message.successful != null && message.hasOwnProperty("successful"))
                            if (typeof message.successful !== "boolean")
                                return "successful: boolean expected";
                        if (message.lockscreenType != null && message.hasOwnProperty("lockscreenType"))
                            switch (message.lockscreenType) {
                            default:
                                return "lockscreenType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates an UnlockAttempt message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.lockscreen.UnlockAttempt} UnlockAttempt
                     */
                    UnlockAttempt.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.lockscreen.UnlockAttempt)
                            return object;
                        let message = new $root.md.maib.app.lockscreen.UnlockAttempt();
                        if (object.date != null)
                            if ($util.Long)
                                (message.date = $util.Long.fromValue(object.date)).unsigned = false;
                            else if (typeof object.date === "string")
                                message.date = parseInt(object.date, 10);
                            else if (typeof object.date === "number")
                                message.date = object.date;
                            else if (typeof object.date === "object")
                                message.date = new $util.LongBits(object.date.low >>> 0, object.date.high >>> 0).toNumber();
                        if (object.successful != null)
                            message.successful = Boolean(object.successful);
                        switch (object.lockscreenType) {
                        case "UNKNOWN":
                        case 0:
                            message.lockscreenType = 0;
                            break;
                        case "BIOMETRIC":
                        case 1:
                            message.lockscreenType = 1;
                            break;
                        case "PIN5":
                        case 2:
                            message.lockscreenType = 2;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an UnlockAttempt message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @static
                     * @param {md.maib.app.lockscreen.UnlockAttempt} message UnlockAttempt
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UnlockAttempt.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.date = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.date = options.longs === String ? "0" : 0;
                            object.successful = false;
                            object.lockscreenType = options.enums === String ? "UNKNOWN" : 0;
                        }
                        if (message.date != null && message.hasOwnProperty("date"))
                            if (typeof message.date === "number")
                                object.date = options.longs === String ? String(message.date) : message.date;
                            else
                                object.date = options.longs === String ? $util.Long.prototype.toString.call(message.date) : options.longs === Number ? new $util.LongBits(message.date.low >>> 0, message.date.high >>> 0).toNumber() : message.date;
                        if (message.successful != null && message.hasOwnProperty("successful"))
                            object.successful = message.successful;
                        if (message.lockscreenType != null && message.hasOwnProperty("lockscreenType"))
                            object.lockscreenType = options.enums === String ? $root.md.maib.app.lockscreen.LockscreenType[message.lockscreenType] : message.lockscreenType;
                        return object;
                    };

                    /**
                     * Converts this UnlockAttempt to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.lockscreen.UnlockAttempt
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UnlockAttempt.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return UnlockAttempt;
                })();

                /**
                 * LockscreenType enum.
                 * @name md.maib.app.lockscreen.LockscreenType
                 * @enum {number}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} BIOMETRIC=1 BIOMETRIC value
                 * @property {number} PIN5=2 PIN5 value
                 */
                lockscreen.LockscreenType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN"] = 0;
                    values[valuesById[1] = "BIOMETRIC"] = 1;
                    values[valuesById[2] = "PIN5"] = 2;
                    return values;
                })();

                return lockscreen;
            })();

            app.profile = (function() {

                /**
                 * Namespace profile.
                 * @memberof md.maib.app
                 * @namespace
                 */
                const profile = {};

                profile.Profile = (function() {

                    /**
                     * Properties of a Profile.
                     * @memberof md.maib.app.profile
                     * @interface IProfile
                     * @property {Array.<md.maib.app.profile.ICard>|null} [card] Profile card
                     * @property {md.maib.app.profile.IProfileSettings|null} [settings] Profile settings
                     * @property {md.maib.app.profile.IPersonalInfo|null} [personalInfo] Profile personalInfo
                     * @property {Array.<md.maib.app.profile.IAccount>|null} [account] Profile account
                     * @property {Array.<md.maib.app.profile.IDepositAccount>|null} [depositAccount] Profile depositAccount
                     * @property {Array.<md.maib.app.profile.ICreditAccount>|null} [creditAccount] Profile creditAccount
                     * @property {Array.<md.maib.app.profile.ICardCreditAccount>|null} [cardCreditAccount] Profile cardCreditAccount
                     * @property {Array.<md.maib.app.profile.ICard>|null} [creditCard] Profile creditCard
                     * @property {md.maib.app.profile.IAccountsFetchInfo|null} [fetchInfo] Profile fetchInfo
                     * @property {md.maib.app.profile.ICreditInfo|null} [offerCredit] Profile offerCredit
                     * @property {md.maib.app.profile.ICashbackInfo|null} [cashbackInfo] Profile cashbackInfo
                     * @property {md.maib.app.profile.ICreditInfo|null} [offerCreditLimit] Profile offerCreditLimit
                     */

                    /**
                     * Constructs a new Profile.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a Profile.
                     * @implements IProfile
                     * @constructor
                     * @param {md.maib.app.profile.IProfile=} [properties] Properties to set
                     */
                    function Profile(properties) {
                        this.card = [];
                        this.account = [];
                        this.depositAccount = [];
                        this.creditAccount = [];
                        this.cardCreditAccount = [];
                        this.creditCard = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Profile card.
                     * @member {Array.<md.maib.app.profile.ICard>} card
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.card = $util.emptyArray;

                    /**
                     * Profile settings.
                     * @member {md.maib.app.profile.IProfileSettings|null|undefined} settings
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.settings = null;

                    /**
                     * Profile personalInfo.
                     * @member {md.maib.app.profile.IPersonalInfo|null|undefined} personalInfo
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.personalInfo = null;

                    /**
                     * Profile account.
                     * @member {Array.<md.maib.app.profile.IAccount>} account
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.account = $util.emptyArray;

                    /**
                     * Profile depositAccount.
                     * @member {Array.<md.maib.app.profile.IDepositAccount>} depositAccount
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.depositAccount = $util.emptyArray;

                    /**
                     * Profile creditAccount.
                     * @member {Array.<md.maib.app.profile.ICreditAccount>} creditAccount
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.creditAccount = $util.emptyArray;

                    /**
                     * Profile cardCreditAccount.
                     * @member {Array.<md.maib.app.profile.ICardCreditAccount>} cardCreditAccount
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.cardCreditAccount = $util.emptyArray;

                    /**
                     * Profile creditCard.
                     * @member {Array.<md.maib.app.profile.ICard>} creditCard
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.creditCard = $util.emptyArray;

                    /**
                     * Profile fetchInfo.
                     * @member {md.maib.app.profile.IAccountsFetchInfo|null|undefined} fetchInfo
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.fetchInfo = null;

                    /**
                     * Profile offerCredit.
                     * @member {md.maib.app.profile.ICreditInfo|null|undefined} offerCredit
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.offerCredit = null;

                    /**
                     * Profile cashbackInfo.
                     * @member {md.maib.app.profile.ICashbackInfo|null|undefined} cashbackInfo
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.cashbackInfo = null;

                    /**
                     * Profile offerCreditLimit.
                     * @member {md.maib.app.profile.ICreditInfo|null|undefined} offerCreditLimit
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     */
                    Profile.prototype.offerCreditLimit = null;

                    /**
                     * Creates a new Profile instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.Profile
                     * @static
                     * @param {md.maib.app.profile.IProfile=} [properties] Properties to set
                     * @returns {md.maib.app.profile.Profile} Profile instance
                     */
                    Profile.create = function create(properties) {
                        return new Profile(properties);
                    };

                    /**
                     * Encodes the specified Profile message. Does not implicitly {@link md.maib.app.profile.Profile.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.Profile
                     * @static
                     * @param {md.maib.app.profile.IProfile} message Profile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Profile.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.card != null && message.card.length)
                            for (let i = 0; i < message.card.length; ++i)
                                $root.md.maib.app.profile.Card.encode(message.card[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.settings != null && Object.hasOwnProperty.call(message, "settings"))
                            $root.md.maib.app.profile.ProfileSettings.encode(message.settings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.personalInfo != null && Object.hasOwnProperty.call(message, "personalInfo"))
                            $root.md.maib.app.profile.PersonalInfo.encode(message.personalInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.account != null && message.account.length)
                            for (let i = 0; i < message.account.length; ++i)
                                $root.md.maib.app.profile.Account.encode(message.account[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.depositAccount != null && message.depositAccount.length)
                            for (let i = 0; i < message.depositAccount.length; ++i)
                                $root.md.maib.app.profile.DepositAccount.encode(message.depositAccount[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.creditAccount != null && message.creditAccount.length)
                            for (let i = 0; i < message.creditAccount.length; ++i)
                                $root.md.maib.app.profile.CreditAccount.encode(message.creditAccount[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.cardCreditAccount != null && message.cardCreditAccount.length)
                            for (let i = 0; i < message.cardCreditAccount.length; ++i)
                                $root.md.maib.app.profile.CardCreditAccount.encode(message.cardCreditAccount[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.creditCard != null && message.creditCard.length)
                            for (let i = 0; i < message.creditCard.length; ++i)
                                $root.md.maib.app.profile.Card.encode(message.creditCard[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.fetchInfo != null && Object.hasOwnProperty.call(message, "fetchInfo"))
                            $root.md.maib.app.profile.AccountsFetchInfo.encode(message.fetchInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.offerCredit != null && Object.hasOwnProperty.call(message, "offerCredit"))
                            $root.md.maib.app.profile.CreditInfo.encode(message.offerCredit, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.cashbackInfo != null && Object.hasOwnProperty.call(message, "cashbackInfo"))
                            $root.md.maib.app.profile.CashbackInfo.encode(message.cashbackInfo, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.offerCreditLimit != null && Object.hasOwnProperty.call(message, "offerCreditLimit"))
                            $root.md.maib.app.profile.CreditInfo.encode(message.offerCreditLimit, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Profile message, length delimited. Does not implicitly {@link md.maib.app.profile.Profile.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.Profile
                     * @static
                     * @param {md.maib.app.profile.IProfile} message Profile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Profile.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Profile message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.Profile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.Profile} Profile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Profile.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.Profile();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.card && message.card.length))
                                    message.card = [];
                                message.card.push($root.md.maib.app.profile.Card.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.settings = $root.md.maib.app.profile.ProfileSettings.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.personalInfo = $root.md.maib.app.profile.PersonalInfo.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.account && message.account.length))
                                    message.account = [];
                                message.account.push($root.md.maib.app.profile.Account.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                if (!(message.depositAccount && message.depositAccount.length))
                                    message.depositAccount = [];
                                message.depositAccount.push($root.md.maib.app.profile.DepositAccount.decode(reader, reader.uint32()));
                                break;
                            case 6:
                                if (!(message.creditAccount && message.creditAccount.length))
                                    message.creditAccount = [];
                                message.creditAccount.push($root.md.maib.app.profile.CreditAccount.decode(reader, reader.uint32()));
                                break;
                            case 7:
                                if (!(message.cardCreditAccount && message.cardCreditAccount.length))
                                    message.cardCreditAccount = [];
                                message.cardCreditAccount.push($root.md.maib.app.profile.CardCreditAccount.decode(reader, reader.uint32()));
                                break;
                            case 8:
                                if (!(message.creditCard && message.creditCard.length))
                                    message.creditCard = [];
                                message.creditCard.push($root.md.maib.app.profile.Card.decode(reader, reader.uint32()));
                                break;
                            case 9:
                                message.fetchInfo = $root.md.maib.app.profile.AccountsFetchInfo.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.offerCredit = $root.md.maib.app.profile.CreditInfo.decode(reader, reader.uint32());
                                break;
                            case 11:
                                message.cashbackInfo = $root.md.maib.app.profile.CashbackInfo.decode(reader, reader.uint32());
                                break;
                            case 12:
                                message.offerCreditLimit = $root.md.maib.app.profile.CreditInfo.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Profile message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.Profile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.Profile} Profile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Profile.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Profile message.
                     * @function verify
                     * @memberof md.maib.app.profile.Profile
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Profile.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.card != null && message.hasOwnProperty("card")) {
                            if (!Array.isArray(message.card))
                                return "card: array expected";
                            for (let i = 0; i < message.card.length; ++i) {
                                let error = $root.md.maib.app.profile.Card.verify(message.card[i]);
                                if (error)
                                    return "card." + error;
                            }
                        }
                        if (message.settings != null && message.hasOwnProperty("settings")) {
                            let error = $root.md.maib.app.profile.ProfileSettings.verify(message.settings);
                            if (error)
                                return "settings." + error;
                        }
                        if (message.personalInfo != null && message.hasOwnProperty("personalInfo")) {
                            let error = $root.md.maib.app.profile.PersonalInfo.verify(message.personalInfo);
                            if (error)
                                return "personalInfo." + error;
                        }
                        if (message.account != null && message.hasOwnProperty("account")) {
                            if (!Array.isArray(message.account))
                                return "account: array expected";
                            for (let i = 0; i < message.account.length; ++i) {
                                let error = $root.md.maib.app.profile.Account.verify(message.account[i]);
                                if (error)
                                    return "account." + error;
                            }
                        }
                        if (message.depositAccount != null && message.hasOwnProperty("depositAccount")) {
                            if (!Array.isArray(message.depositAccount))
                                return "depositAccount: array expected";
                            for (let i = 0; i < message.depositAccount.length; ++i) {
                                let error = $root.md.maib.app.profile.DepositAccount.verify(message.depositAccount[i]);
                                if (error)
                                    return "depositAccount." + error;
                            }
                        }
                        if (message.creditAccount != null && message.hasOwnProperty("creditAccount")) {
                            if (!Array.isArray(message.creditAccount))
                                return "creditAccount: array expected";
                            for (let i = 0; i < message.creditAccount.length; ++i) {
                                let error = $root.md.maib.app.profile.CreditAccount.verify(message.creditAccount[i]);
                                if (error)
                                    return "creditAccount." + error;
                            }
                        }
                        if (message.cardCreditAccount != null && message.hasOwnProperty("cardCreditAccount")) {
                            if (!Array.isArray(message.cardCreditAccount))
                                return "cardCreditAccount: array expected";
                            for (let i = 0; i < message.cardCreditAccount.length; ++i) {
                                let error = $root.md.maib.app.profile.CardCreditAccount.verify(message.cardCreditAccount[i]);
                                if (error)
                                    return "cardCreditAccount." + error;
                            }
                        }
                        if (message.creditCard != null && message.hasOwnProperty("creditCard")) {
                            if (!Array.isArray(message.creditCard))
                                return "creditCard: array expected";
                            for (let i = 0; i < message.creditCard.length; ++i) {
                                let error = $root.md.maib.app.profile.Card.verify(message.creditCard[i]);
                                if (error)
                                    return "creditCard." + error;
                            }
                        }
                        if (message.fetchInfo != null && message.hasOwnProperty("fetchInfo")) {
                            let error = $root.md.maib.app.profile.AccountsFetchInfo.verify(message.fetchInfo);
                            if (error)
                                return "fetchInfo." + error;
                        }
                        if (message.offerCredit != null && message.hasOwnProperty("offerCredit")) {
                            let error = $root.md.maib.app.profile.CreditInfo.verify(message.offerCredit);
                            if (error)
                                return "offerCredit." + error;
                        }
                        if (message.cashbackInfo != null && message.hasOwnProperty("cashbackInfo")) {
                            let error = $root.md.maib.app.profile.CashbackInfo.verify(message.cashbackInfo);
                            if (error)
                                return "cashbackInfo." + error;
                        }
                        if (message.offerCreditLimit != null && message.hasOwnProperty("offerCreditLimit")) {
                            let error = $root.md.maib.app.profile.CreditInfo.verify(message.offerCreditLimit);
                            if (error)
                                return "offerCreditLimit." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Profile message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.Profile
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.Profile} Profile
                     */
                    Profile.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.Profile)
                            return object;
                        let message = new $root.md.maib.app.profile.Profile();
                        if (object.card) {
                            if (!Array.isArray(object.card))
                                throw TypeError(".md.maib.app.profile.Profile.card: array expected");
                            message.card = [];
                            for (let i = 0; i < object.card.length; ++i) {
                                if (typeof object.card[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.Profile.card: object expected");
                                message.card[i] = $root.md.maib.app.profile.Card.fromObject(object.card[i]);
                            }
                        }
                        if (object.settings != null) {
                            if (typeof object.settings !== "object")
                                throw TypeError(".md.maib.app.profile.Profile.settings: object expected");
                            message.settings = $root.md.maib.app.profile.ProfileSettings.fromObject(object.settings);
                        }
                        if (object.personalInfo != null) {
                            if (typeof object.personalInfo !== "object")
                                throw TypeError(".md.maib.app.profile.Profile.personalInfo: object expected");
                            message.personalInfo = $root.md.maib.app.profile.PersonalInfo.fromObject(object.personalInfo);
                        }
                        if (object.account) {
                            if (!Array.isArray(object.account))
                                throw TypeError(".md.maib.app.profile.Profile.account: array expected");
                            message.account = [];
                            for (let i = 0; i < object.account.length; ++i) {
                                if (typeof object.account[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.Profile.account: object expected");
                                message.account[i] = $root.md.maib.app.profile.Account.fromObject(object.account[i]);
                            }
                        }
                        if (object.depositAccount) {
                            if (!Array.isArray(object.depositAccount))
                                throw TypeError(".md.maib.app.profile.Profile.depositAccount: array expected");
                            message.depositAccount = [];
                            for (let i = 0; i < object.depositAccount.length; ++i) {
                                if (typeof object.depositAccount[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.Profile.depositAccount: object expected");
                                message.depositAccount[i] = $root.md.maib.app.profile.DepositAccount.fromObject(object.depositAccount[i]);
                            }
                        }
                        if (object.creditAccount) {
                            if (!Array.isArray(object.creditAccount))
                                throw TypeError(".md.maib.app.profile.Profile.creditAccount: array expected");
                            message.creditAccount = [];
                            for (let i = 0; i < object.creditAccount.length; ++i) {
                                if (typeof object.creditAccount[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.Profile.creditAccount: object expected");
                                message.creditAccount[i] = $root.md.maib.app.profile.CreditAccount.fromObject(object.creditAccount[i]);
                            }
                        }
                        if (object.cardCreditAccount) {
                            if (!Array.isArray(object.cardCreditAccount))
                                throw TypeError(".md.maib.app.profile.Profile.cardCreditAccount: array expected");
                            message.cardCreditAccount = [];
                            for (let i = 0; i < object.cardCreditAccount.length; ++i) {
                                if (typeof object.cardCreditAccount[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.Profile.cardCreditAccount: object expected");
                                message.cardCreditAccount[i] = $root.md.maib.app.profile.CardCreditAccount.fromObject(object.cardCreditAccount[i]);
                            }
                        }
                        if (object.creditCard) {
                            if (!Array.isArray(object.creditCard))
                                throw TypeError(".md.maib.app.profile.Profile.creditCard: array expected");
                            message.creditCard = [];
                            for (let i = 0; i < object.creditCard.length; ++i) {
                                if (typeof object.creditCard[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.Profile.creditCard: object expected");
                                message.creditCard[i] = $root.md.maib.app.profile.Card.fromObject(object.creditCard[i]);
                            }
                        }
                        if (object.fetchInfo != null) {
                            if (typeof object.fetchInfo !== "object")
                                throw TypeError(".md.maib.app.profile.Profile.fetchInfo: object expected");
                            message.fetchInfo = $root.md.maib.app.profile.AccountsFetchInfo.fromObject(object.fetchInfo);
                        }
                        if (object.offerCredit != null) {
                            if (typeof object.offerCredit !== "object")
                                throw TypeError(".md.maib.app.profile.Profile.offerCredit: object expected");
                            message.offerCredit = $root.md.maib.app.profile.CreditInfo.fromObject(object.offerCredit);
                        }
                        if (object.cashbackInfo != null) {
                            if (typeof object.cashbackInfo !== "object")
                                throw TypeError(".md.maib.app.profile.Profile.cashbackInfo: object expected");
                            message.cashbackInfo = $root.md.maib.app.profile.CashbackInfo.fromObject(object.cashbackInfo);
                        }
                        if (object.offerCreditLimit != null) {
                            if (typeof object.offerCreditLimit !== "object")
                                throw TypeError(".md.maib.app.profile.Profile.offerCreditLimit: object expected");
                            message.offerCreditLimit = $root.md.maib.app.profile.CreditInfo.fromObject(object.offerCreditLimit);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Profile message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.Profile
                     * @static
                     * @param {md.maib.app.profile.Profile} message Profile
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Profile.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.card = [];
                            object.account = [];
                            object.depositAccount = [];
                            object.creditAccount = [];
                            object.cardCreditAccount = [];
                            object.creditCard = [];
                        }
                        if (options.defaults) {
                            object.settings = null;
                            object.personalInfo = null;
                            object.fetchInfo = null;
                            object.offerCredit = null;
                            object.cashbackInfo = null;
                            object.offerCreditLimit = null;
                        }
                        if (message.card && message.card.length) {
                            object.card = [];
                            for (let j = 0; j < message.card.length; ++j)
                                object.card[j] = $root.md.maib.app.profile.Card.toObject(message.card[j], options);
                        }
                        if (message.settings != null && message.hasOwnProperty("settings"))
                            object.settings = $root.md.maib.app.profile.ProfileSettings.toObject(message.settings, options);
                        if (message.personalInfo != null && message.hasOwnProperty("personalInfo"))
                            object.personalInfo = $root.md.maib.app.profile.PersonalInfo.toObject(message.personalInfo, options);
                        if (message.account && message.account.length) {
                            object.account = [];
                            for (let j = 0; j < message.account.length; ++j)
                                object.account[j] = $root.md.maib.app.profile.Account.toObject(message.account[j], options);
                        }
                        if (message.depositAccount && message.depositAccount.length) {
                            object.depositAccount = [];
                            for (let j = 0; j < message.depositAccount.length; ++j)
                                object.depositAccount[j] = $root.md.maib.app.profile.DepositAccount.toObject(message.depositAccount[j], options);
                        }
                        if (message.creditAccount && message.creditAccount.length) {
                            object.creditAccount = [];
                            for (let j = 0; j < message.creditAccount.length; ++j)
                                object.creditAccount[j] = $root.md.maib.app.profile.CreditAccount.toObject(message.creditAccount[j], options);
                        }
                        if (message.cardCreditAccount && message.cardCreditAccount.length) {
                            object.cardCreditAccount = [];
                            for (let j = 0; j < message.cardCreditAccount.length; ++j)
                                object.cardCreditAccount[j] = $root.md.maib.app.profile.CardCreditAccount.toObject(message.cardCreditAccount[j], options);
                        }
                        if (message.creditCard && message.creditCard.length) {
                            object.creditCard = [];
                            for (let j = 0; j < message.creditCard.length; ++j)
                                object.creditCard[j] = $root.md.maib.app.profile.Card.toObject(message.creditCard[j], options);
                        }
                        if (message.fetchInfo != null && message.hasOwnProperty("fetchInfo"))
                            object.fetchInfo = $root.md.maib.app.profile.AccountsFetchInfo.toObject(message.fetchInfo, options);
                        if (message.offerCredit != null && message.hasOwnProperty("offerCredit"))
                            object.offerCredit = $root.md.maib.app.profile.CreditInfo.toObject(message.offerCredit, options);
                        if (message.cashbackInfo != null && message.hasOwnProperty("cashbackInfo"))
                            object.cashbackInfo = $root.md.maib.app.profile.CashbackInfo.toObject(message.cashbackInfo, options);
                        if (message.offerCreditLimit != null && message.hasOwnProperty("offerCreditLimit"))
                            object.offerCreditLimit = $root.md.maib.app.profile.CreditInfo.toObject(message.offerCreditLimit, options);
                        return object;
                    };

                    /**
                     * Converts this Profile to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.Profile
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Profile.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Profile;
                })();

                profile.CashbackInfo = (function() {

                    /**
                     * Properties of a CashbackInfo.
                     * @memberof md.maib.app.profile
                     * @interface ICashbackInfo
                     * @property {boolean|null} [isCashbackSupported] CashbackInfo isCashbackSupported
                     */

                    /**
                     * Constructs a new CashbackInfo.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a CashbackInfo.
                     * @implements ICashbackInfo
                     * @constructor
                     * @param {md.maib.app.profile.ICashbackInfo=} [properties] Properties to set
                     */
                    function CashbackInfo(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CashbackInfo isCashbackSupported.
                     * @member {boolean} isCashbackSupported
                     * @memberof md.maib.app.profile.CashbackInfo
                     * @instance
                     */
                    CashbackInfo.prototype.isCashbackSupported = false;

                    /**
                     * Creates a new CashbackInfo instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.CashbackInfo
                     * @static
                     * @param {md.maib.app.profile.ICashbackInfo=} [properties] Properties to set
                     * @returns {md.maib.app.profile.CashbackInfo} CashbackInfo instance
                     */
                    CashbackInfo.create = function create(properties) {
                        return new CashbackInfo(properties);
                    };

                    /**
                     * Encodes the specified CashbackInfo message. Does not implicitly {@link md.maib.app.profile.CashbackInfo.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.CashbackInfo
                     * @static
                     * @param {md.maib.app.profile.ICashbackInfo} message CashbackInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.isCashbackSupported != null && Object.hasOwnProperty.call(message, "isCashbackSupported"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isCashbackSupported);
                        return writer;
                    };

                    /**
                     * Encodes the specified CashbackInfo message, length delimited. Does not implicitly {@link md.maib.app.profile.CashbackInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.CashbackInfo
                     * @static
                     * @param {md.maib.app.profile.ICashbackInfo} message CashbackInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CashbackInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.CashbackInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.CashbackInfo} CashbackInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.CashbackInfo();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.isCashbackSupported = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CashbackInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.CashbackInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.CashbackInfo} CashbackInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CashbackInfo message.
                     * @function verify
                     * @memberof md.maib.app.profile.CashbackInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CashbackInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.isCashbackSupported != null && message.hasOwnProperty("isCashbackSupported"))
                            if (typeof message.isCashbackSupported !== "boolean")
                                return "isCashbackSupported: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a CashbackInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.CashbackInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.CashbackInfo} CashbackInfo
                     */
                    CashbackInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.CashbackInfo)
                            return object;
                        let message = new $root.md.maib.app.profile.CashbackInfo();
                        if (object.isCashbackSupported != null)
                            message.isCashbackSupported = Boolean(object.isCashbackSupported);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CashbackInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.CashbackInfo
                     * @static
                     * @param {md.maib.app.profile.CashbackInfo} message CashbackInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CashbackInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.isCashbackSupported = false;
                        if (message.isCashbackSupported != null && message.hasOwnProperty("isCashbackSupported"))
                            object.isCashbackSupported = message.isCashbackSupported;
                        return object;
                    };

                    /**
                     * Converts this CashbackInfo to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.CashbackInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CashbackInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CashbackInfo;
                })();

                profile.AccountsFetchInfo = (function() {

                    /**
                     * Properties of an AccountsFetchInfo.
                     * @memberof md.maib.app.profile
                     * @interface IAccountsFetchInfo
                     * @property {boolean|null} [isAccountsListEmpty] AccountsFetchInfo isAccountsListEmpty
                     * @property {boolean|null} [isDepositsListEmpty] AccountsFetchInfo isDepositsListEmpty
                     * @property {boolean|null} [isCreditsListEmpty] AccountsFetchInfo isCreditsListEmpty
                     * @property {boolean|null} [isCardCreditsListEmpty] AccountsFetchInfo isCardCreditsListEmpty
                     */

                    /**
                     * Constructs a new AccountsFetchInfo.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents an AccountsFetchInfo.
                     * @implements IAccountsFetchInfo
                     * @constructor
                     * @param {md.maib.app.profile.IAccountsFetchInfo=} [properties] Properties to set
                     */
                    function AccountsFetchInfo(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AccountsFetchInfo isAccountsListEmpty.
                     * @member {boolean} isAccountsListEmpty
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @instance
                     */
                    AccountsFetchInfo.prototype.isAccountsListEmpty = false;

                    /**
                     * AccountsFetchInfo isDepositsListEmpty.
                     * @member {boolean} isDepositsListEmpty
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @instance
                     */
                    AccountsFetchInfo.prototype.isDepositsListEmpty = false;

                    /**
                     * AccountsFetchInfo isCreditsListEmpty.
                     * @member {boolean} isCreditsListEmpty
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @instance
                     */
                    AccountsFetchInfo.prototype.isCreditsListEmpty = false;

                    /**
                     * AccountsFetchInfo isCardCreditsListEmpty.
                     * @member {boolean} isCardCreditsListEmpty
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @instance
                     */
                    AccountsFetchInfo.prototype.isCardCreditsListEmpty = false;

                    /**
                     * Creates a new AccountsFetchInfo instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @static
                     * @param {md.maib.app.profile.IAccountsFetchInfo=} [properties] Properties to set
                     * @returns {md.maib.app.profile.AccountsFetchInfo} AccountsFetchInfo instance
                     */
                    AccountsFetchInfo.create = function create(properties) {
                        return new AccountsFetchInfo(properties);
                    };

                    /**
                     * Encodes the specified AccountsFetchInfo message. Does not implicitly {@link md.maib.app.profile.AccountsFetchInfo.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @static
                     * @param {md.maib.app.profile.IAccountsFetchInfo} message AccountsFetchInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountsFetchInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.isAccountsListEmpty != null && Object.hasOwnProperty.call(message, "isAccountsListEmpty"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isAccountsListEmpty);
                        if (message.isDepositsListEmpty != null && Object.hasOwnProperty.call(message, "isDepositsListEmpty"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isDepositsListEmpty);
                        if (message.isCreditsListEmpty != null && Object.hasOwnProperty.call(message, "isCreditsListEmpty"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isCreditsListEmpty);
                        if (message.isCardCreditsListEmpty != null && Object.hasOwnProperty.call(message, "isCardCreditsListEmpty"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isCardCreditsListEmpty);
                        return writer;
                    };

                    /**
                     * Encodes the specified AccountsFetchInfo message, length delimited. Does not implicitly {@link md.maib.app.profile.AccountsFetchInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @static
                     * @param {md.maib.app.profile.IAccountsFetchInfo} message AccountsFetchInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountsFetchInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AccountsFetchInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.AccountsFetchInfo} AccountsFetchInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountsFetchInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.AccountsFetchInfo();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.isAccountsListEmpty = reader.bool();
                                break;
                            case 2:
                                message.isDepositsListEmpty = reader.bool();
                                break;
                            case 3:
                                message.isCreditsListEmpty = reader.bool();
                                break;
                            case 4:
                                message.isCardCreditsListEmpty = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AccountsFetchInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.AccountsFetchInfo} AccountsFetchInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountsFetchInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AccountsFetchInfo message.
                     * @function verify
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AccountsFetchInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.isAccountsListEmpty != null && message.hasOwnProperty("isAccountsListEmpty"))
                            if (typeof message.isAccountsListEmpty !== "boolean")
                                return "isAccountsListEmpty: boolean expected";
                        if (message.isDepositsListEmpty != null && message.hasOwnProperty("isDepositsListEmpty"))
                            if (typeof message.isDepositsListEmpty !== "boolean")
                                return "isDepositsListEmpty: boolean expected";
                        if (message.isCreditsListEmpty != null && message.hasOwnProperty("isCreditsListEmpty"))
                            if (typeof message.isCreditsListEmpty !== "boolean")
                                return "isCreditsListEmpty: boolean expected";
                        if (message.isCardCreditsListEmpty != null && message.hasOwnProperty("isCardCreditsListEmpty"))
                            if (typeof message.isCardCreditsListEmpty !== "boolean")
                                return "isCardCreditsListEmpty: boolean expected";
                        return null;
                    };

                    /**
                     * Creates an AccountsFetchInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.AccountsFetchInfo} AccountsFetchInfo
                     */
                    AccountsFetchInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.AccountsFetchInfo)
                            return object;
                        let message = new $root.md.maib.app.profile.AccountsFetchInfo();
                        if (object.isAccountsListEmpty != null)
                            message.isAccountsListEmpty = Boolean(object.isAccountsListEmpty);
                        if (object.isDepositsListEmpty != null)
                            message.isDepositsListEmpty = Boolean(object.isDepositsListEmpty);
                        if (object.isCreditsListEmpty != null)
                            message.isCreditsListEmpty = Boolean(object.isCreditsListEmpty);
                        if (object.isCardCreditsListEmpty != null)
                            message.isCardCreditsListEmpty = Boolean(object.isCardCreditsListEmpty);
                        return message;
                    };

                    /**
                     * Creates a plain object from an AccountsFetchInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @static
                     * @param {md.maib.app.profile.AccountsFetchInfo} message AccountsFetchInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AccountsFetchInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.isAccountsListEmpty = false;
                            object.isDepositsListEmpty = false;
                            object.isCreditsListEmpty = false;
                            object.isCardCreditsListEmpty = false;
                        }
                        if (message.isAccountsListEmpty != null && message.hasOwnProperty("isAccountsListEmpty"))
                            object.isAccountsListEmpty = message.isAccountsListEmpty;
                        if (message.isDepositsListEmpty != null && message.hasOwnProperty("isDepositsListEmpty"))
                            object.isDepositsListEmpty = message.isDepositsListEmpty;
                        if (message.isCreditsListEmpty != null && message.hasOwnProperty("isCreditsListEmpty"))
                            object.isCreditsListEmpty = message.isCreditsListEmpty;
                        if (message.isCardCreditsListEmpty != null && message.hasOwnProperty("isCardCreditsListEmpty"))
                            object.isCardCreditsListEmpty = message.isCardCreditsListEmpty;
                        return object;
                    };

                    /**
                     * Converts this AccountsFetchInfo to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.AccountsFetchInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AccountsFetchInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return AccountsFetchInfo;
                })();

                profile.AccountsRequest = (function() {

                    /**
                     * Properties of an AccountsRequest.
                     * @memberof md.maib.app.profile
                     * @interface IAccountsRequest
                     * @property {Array.<md.maib.app.profile.AccountType>|null} [types] AccountsRequest types
                     */

                    /**
                     * Constructs a new AccountsRequest.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents an AccountsRequest.
                     * @implements IAccountsRequest
                     * @constructor
                     * @param {md.maib.app.profile.IAccountsRequest=} [properties] Properties to set
                     */
                    function AccountsRequest(properties) {
                        this.types = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AccountsRequest types.
                     * @member {Array.<md.maib.app.profile.AccountType>} types
                     * @memberof md.maib.app.profile.AccountsRequest
                     * @instance
                     */
                    AccountsRequest.prototype.types = $util.emptyArray;

                    /**
                     * Creates a new AccountsRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.AccountsRequest
                     * @static
                     * @param {md.maib.app.profile.IAccountsRequest=} [properties] Properties to set
                     * @returns {md.maib.app.profile.AccountsRequest} AccountsRequest instance
                     */
                    AccountsRequest.create = function create(properties) {
                        return new AccountsRequest(properties);
                    };

                    /**
                     * Encodes the specified AccountsRequest message. Does not implicitly {@link md.maib.app.profile.AccountsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.AccountsRequest
                     * @static
                     * @param {md.maib.app.profile.IAccountsRequest} message AccountsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.types != null && message.types.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (let i = 0; i < message.types.length; ++i)
                                writer.int32(message.types[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified AccountsRequest message, length delimited. Does not implicitly {@link md.maib.app.profile.AccountsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.AccountsRequest
                     * @static
                     * @param {md.maib.app.profile.IAccountsRequest} message AccountsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AccountsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.AccountsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.AccountsRequest} AccountsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.AccountsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.types && message.types.length))
                                    message.types = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.types.push(reader.int32());
                                } else
                                    message.types.push(reader.int32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AccountsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.AccountsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.AccountsRequest} AccountsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AccountsRequest message.
                     * @function verify
                     * @memberof md.maib.app.profile.AccountsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AccountsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.types != null && message.hasOwnProperty("types")) {
                            if (!Array.isArray(message.types))
                                return "types: array expected";
                            for (let i = 0; i < message.types.length; ++i)
                                switch (message.types[i]) {
                                default:
                                    return "types: enum value[] expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                        }
                        return null;
                    };

                    /**
                     * Creates an AccountsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.AccountsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.AccountsRequest} AccountsRequest
                     */
                    AccountsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.AccountsRequest)
                            return object;
                        let message = new $root.md.maib.app.profile.AccountsRequest();
                        if (object.types) {
                            if (!Array.isArray(object.types))
                                throw TypeError(".md.maib.app.profile.AccountsRequest.types: array expected");
                            message.types = [];
                            for (let i = 0; i < object.types.length; ++i)
                                switch (object.types[i]) {
                                default:
                                case "ACC_TYPE_UNKNOWN":
                                case 0:
                                    message.types[i] = 0;
                                    break;
                                case "CURRENT":
                                case 1:
                                    message.types[i] = 1;
                                    break;
                                case "DEPOSIT":
                                case 2:
                                    message.types[i] = 2;
                                    break;
                                case "CREDIT":
                                case 3:
                                    message.types[i] = 3;
                                    break;
                                case "CREDIT_CARD":
                                case 4:
                                    message.types[i] = 4;
                                    break;
                                }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AccountsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.AccountsRequest
                     * @static
                     * @param {md.maib.app.profile.AccountsRequest} message AccountsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AccountsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.types = [];
                        if (message.types && message.types.length) {
                            object.types = [];
                            for (let j = 0; j < message.types.length; ++j)
                                object.types[j] = options.enums === String ? $root.md.maib.app.profile.AccountType[message.types[j]] : message.types[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this AccountsRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.AccountsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AccountsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return AccountsRequest;
                })();

                profile.AccountsResponse = (function() {

                    /**
                     * Properties of an AccountsResponse.
                     * @memberof md.maib.app.profile
                     * @interface IAccountsResponse
                     * @property {Array.<md.maib.app.profile.IAccount>|null} [account] AccountsResponse account
                     * @property {Array.<md.maib.app.profile.IDepositAccount>|null} [depositAccount] AccountsResponse depositAccount
                     * @property {Array.<md.maib.app.profile.ICreditAccount>|null} [creditAccount] AccountsResponse creditAccount
                     * @property {Array.<md.maib.app.profile.ICardCreditAccount>|null} [cardCreditAccount] AccountsResponse cardCreditAccount
                     * @property {md.maib.app.profile.IAccountsFetchInfo|null} [fetchInfo] AccountsResponse fetchInfo
                     */

                    /**
                     * Constructs a new AccountsResponse.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents an AccountsResponse.
                     * @implements IAccountsResponse
                     * @constructor
                     * @param {md.maib.app.profile.IAccountsResponse=} [properties] Properties to set
                     */
                    function AccountsResponse(properties) {
                        this.account = [];
                        this.depositAccount = [];
                        this.creditAccount = [];
                        this.cardCreditAccount = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AccountsResponse account.
                     * @member {Array.<md.maib.app.profile.IAccount>} account
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @instance
                     */
                    AccountsResponse.prototype.account = $util.emptyArray;

                    /**
                     * AccountsResponse depositAccount.
                     * @member {Array.<md.maib.app.profile.IDepositAccount>} depositAccount
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @instance
                     */
                    AccountsResponse.prototype.depositAccount = $util.emptyArray;

                    /**
                     * AccountsResponse creditAccount.
                     * @member {Array.<md.maib.app.profile.ICreditAccount>} creditAccount
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @instance
                     */
                    AccountsResponse.prototype.creditAccount = $util.emptyArray;

                    /**
                     * AccountsResponse cardCreditAccount.
                     * @member {Array.<md.maib.app.profile.ICardCreditAccount>} cardCreditAccount
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @instance
                     */
                    AccountsResponse.prototype.cardCreditAccount = $util.emptyArray;

                    /**
                     * AccountsResponse fetchInfo.
                     * @member {md.maib.app.profile.IAccountsFetchInfo|null|undefined} fetchInfo
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @instance
                     */
                    AccountsResponse.prototype.fetchInfo = null;

                    /**
                     * Creates a new AccountsResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @static
                     * @param {md.maib.app.profile.IAccountsResponse=} [properties] Properties to set
                     * @returns {md.maib.app.profile.AccountsResponse} AccountsResponse instance
                     */
                    AccountsResponse.create = function create(properties) {
                        return new AccountsResponse(properties);
                    };

                    /**
                     * Encodes the specified AccountsResponse message. Does not implicitly {@link md.maib.app.profile.AccountsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @static
                     * @param {md.maib.app.profile.IAccountsResponse} message AccountsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.account != null && message.account.length)
                            for (let i = 0; i < message.account.length; ++i)
                                $root.md.maib.app.profile.Account.encode(message.account[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.depositAccount != null && message.depositAccount.length)
                            for (let i = 0; i < message.depositAccount.length; ++i)
                                $root.md.maib.app.profile.DepositAccount.encode(message.depositAccount[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.creditAccount != null && message.creditAccount.length)
                            for (let i = 0; i < message.creditAccount.length; ++i)
                                $root.md.maib.app.profile.CreditAccount.encode(message.creditAccount[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.cardCreditAccount != null && message.cardCreditAccount.length)
                            for (let i = 0; i < message.cardCreditAccount.length; ++i)
                                $root.md.maib.app.profile.CardCreditAccount.encode(message.cardCreditAccount[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.fetchInfo != null && Object.hasOwnProperty.call(message, "fetchInfo"))
                            $root.md.maib.app.profile.AccountsFetchInfo.encode(message.fetchInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified AccountsResponse message, length delimited. Does not implicitly {@link md.maib.app.profile.AccountsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @static
                     * @param {md.maib.app.profile.IAccountsResponse} message AccountsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AccountsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.AccountsResponse} AccountsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.AccountsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.account && message.account.length))
                                    message.account = [];
                                message.account.push($root.md.maib.app.profile.Account.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.depositAccount && message.depositAccount.length))
                                    message.depositAccount = [];
                                message.depositAccount.push($root.md.maib.app.profile.DepositAccount.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                if (!(message.creditAccount && message.creditAccount.length))
                                    message.creditAccount = [];
                                message.creditAccount.push($root.md.maib.app.profile.CreditAccount.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                if (!(message.cardCreditAccount && message.cardCreditAccount.length))
                                    message.cardCreditAccount = [];
                                message.cardCreditAccount.push($root.md.maib.app.profile.CardCreditAccount.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                message.fetchInfo = $root.md.maib.app.profile.AccountsFetchInfo.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AccountsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.AccountsResponse} AccountsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AccountsResponse message.
                     * @function verify
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AccountsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.account != null && message.hasOwnProperty("account")) {
                            if (!Array.isArray(message.account))
                                return "account: array expected";
                            for (let i = 0; i < message.account.length; ++i) {
                                let error = $root.md.maib.app.profile.Account.verify(message.account[i]);
                                if (error)
                                    return "account." + error;
                            }
                        }
                        if (message.depositAccount != null && message.hasOwnProperty("depositAccount")) {
                            if (!Array.isArray(message.depositAccount))
                                return "depositAccount: array expected";
                            for (let i = 0; i < message.depositAccount.length; ++i) {
                                let error = $root.md.maib.app.profile.DepositAccount.verify(message.depositAccount[i]);
                                if (error)
                                    return "depositAccount." + error;
                            }
                        }
                        if (message.creditAccount != null && message.hasOwnProperty("creditAccount")) {
                            if (!Array.isArray(message.creditAccount))
                                return "creditAccount: array expected";
                            for (let i = 0; i < message.creditAccount.length; ++i) {
                                let error = $root.md.maib.app.profile.CreditAccount.verify(message.creditAccount[i]);
                                if (error)
                                    return "creditAccount." + error;
                            }
                        }
                        if (message.cardCreditAccount != null && message.hasOwnProperty("cardCreditAccount")) {
                            if (!Array.isArray(message.cardCreditAccount))
                                return "cardCreditAccount: array expected";
                            for (let i = 0; i < message.cardCreditAccount.length; ++i) {
                                let error = $root.md.maib.app.profile.CardCreditAccount.verify(message.cardCreditAccount[i]);
                                if (error)
                                    return "cardCreditAccount." + error;
                            }
                        }
                        if (message.fetchInfo != null && message.hasOwnProperty("fetchInfo")) {
                            let error = $root.md.maib.app.profile.AccountsFetchInfo.verify(message.fetchInfo);
                            if (error)
                                return "fetchInfo." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates an AccountsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.AccountsResponse} AccountsResponse
                     */
                    AccountsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.AccountsResponse)
                            return object;
                        let message = new $root.md.maib.app.profile.AccountsResponse();
                        if (object.account) {
                            if (!Array.isArray(object.account))
                                throw TypeError(".md.maib.app.profile.AccountsResponse.account: array expected");
                            message.account = [];
                            for (let i = 0; i < object.account.length; ++i) {
                                if (typeof object.account[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.AccountsResponse.account: object expected");
                                message.account[i] = $root.md.maib.app.profile.Account.fromObject(object.account[i]);
                            }
                        }
                        if (object.depositAccount) {
                            if (!Array.isArray(object.depositAccount))
                                throw TypeError(".md.maib.app.profile.AccountsResponse.depositAccount: array expected");
                            message.depositAccount = [];
                            for (let i = 0; i < object.depositAccount.length; ++i) {
                                if (typeof object.depositAccount[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.AccountsResponse.depositAccount: object expected");
                                message.depositAccount[i] = $root.md.maib.app.profile.DepositAccount.fromObject(object.depositAccount[i]);
                            }
                        }
                        if (object.creditAccount) {
                            if (!Array.isArray(object.creditAccount))
                                throw TypeError(".md.maib.app.profile.AccountsResponse.creditAccount: array expected");
                            message.creditAccount = [];
                            for (let i = 0; i < object.creditAccount.length; ++i) {
                                if (typeof object.creditAccount[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.AccountsResponse.creditAccount: object expected");
                                message.creditAccount[i] = $root.md.maib.app.profile.CreditAccount.fromObject(object.creditAccount[i]);
                            }
                        }
                        if (object.cardCreditAccount) {
                            if (!Array.isArray(object.cardCreditAccount))
                                throw TypeError(".md.maib.app.profile.AccountsResponse.cardCreditAccount: array expected");
                            message.cardCreditAccount = [];
                            for (let i = 0; i < object.cardCreditAccount.length; ++i) {
                                if (typeof object.cardCreditAccount[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.AccountsResponse.cardCreditAccount: object expected");
                                message.cardCreditAccount[i] = $root.md.maib.app.profile.CardCreditAccount.fromObject(object.cardCreditAccount[i]);
                            }
                        }
                        if (object.fetchInfo != null) {
                            if (typeof object.fetchInfo !== "object")
                                throw TypeError(".md.maib.app.profile.AccountsResponse.fetchInfo: object expected");
                            message.fetchInfo = $root.md.maib.app.profile.AccountsFetchInfo.fromObject(object.fetchInfo);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AccountsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @static
                     * @param {md.maib.app.profile.AccountsResponse} message AccountsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AccountsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.account = [];
                            object.depositAccount = [];
                            object.creditAccount = [];
                            object.cardCreditAccount = [];
                        }
                        if (options.defaults)
                            object.fetchInfo = null;
                        if (message.account && message.account.length) {
                            object.account = [];
                            for (let j = 0; j < message.account.length; ++j)
                                object.account[j] = $root.md.maib.app.profile.Account.toObject(message.account[j], options);
                        }
                        if (message.depositAccount && message.depositAccount.length) {
                            object.depositAccount = [];
                            for (let j = 0; j < message.depositAccount.length; ++j)
                                object.depositAccount[j] = $root.md.maib.app.profile.DepositAccount.toObject(message.depositAccount[j], options);
                        }
                        if (message.creditAccount && message.creditAccount.length) {
                            object.creditAccount = [];
                            for (let j = 0; j < message.creditAccount.length; ++j)
                                object.creditAccount[j] = $root.md.maib.app.profile.CreditAccount.toObject(message.creditAccount[j], options);
                        }
                        if (message.cardCreditAccount && message.cardCreditAccount.length) {
                            object.cardCreditAccount = [];
                            for (let j = 0; j < message.cardCreditAccount.length; ++j)
                                object.cardCreditAccount[j] = $root.md.maib.app.profile.CardCreditAccount.toObject(message.cardCreditAccount[j], options);
                        }
                        if (message.fetchInfo != null && message.hasOwnProperty("fetchInfo"))
                            object.fetchInfo = $root.md.maib.app.profile.AccountsFetchInfo.toObject(message.fetchInfo, options);
                        return object;
                    };

                    /**
                     * Converts this AccountsResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.AccountsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AccountsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return AccountsResponse;
                })();

                profile.Card = (function() {

                    /**
                     * Properties of a Card.
                     * @memberof md.maib.app.profile
                     * @interface ICard
                     * @property {string|null} [id] Card id
                     * @property {string|null} [last4Digits] Card last4Digits
                     * @property {number|null} [balance] Card balance
                     * @property {number|null} [expMonth] Card expMonth
                     * @property {number|null} [expYear] Card expYear
                     * @property {string|null} [ccy] Card ccy
                     * @property {string|null} [cardHolder] Card cardHolder
                     * @property {md.maib.app.profile.CardType|null} [cardType] Card cardType
                     * @property {boolean|null} [isBlocked] Card isBlocked
                     * @property {md.maib.app.profile.IVisibilitySetting|null} [visibility] Card visibility
                     * @property {string|null} [bankAccount] Card bankAccount
                     * @property {string|null} [cardName] Card cardName
                     * @property {string|null} [qrCode] Card qrCode
                     * @property {string|null} [bankTitle] Card bankTitle
                     * @property {string|null} [bic] Card bic
                     * @property {string|null} [iban] Card iban
                     * @property {string|null} [pan] Card pan
                     * @property {boolean|null} [needsActivation] Card needsActivation
                     * @property {boolean|null} [activationIsPending] Card activationIsPending
                     * @property {boolean|null} [isExpired] Card isExpired
                     * @property {boolean|null} [isIssuedInApp] Card isIssuedInApp
                     * @property {boolean|null} [isCashbackSupported] Card isCashbackSupported
                     * @property {boolean|null} [isCreditLimit] Card isCreditLimit
                     * @property {md.maib.app.profile.ICardCreditLimitInfo|null} [limitInfo] Card limitInfo
                     */

                    /**
                     * Constructs a new Card.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a Card.
                     * @implements ICard
                     * @constructor
                     * @param {md.maib.app.profile.ICard=} [properties] Properties to set
                     */
                    function Card(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Card id.
                     * @member {string} id
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.id = "";

                    /**
                     * Card last4Digits.
                     * @member {string} last4Digits
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.last4Digits = "";

                    /**
                     * Card balance.
                     * @member {number} balance
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.balance = 0;

                    /**
                     * Card expMonth.
                     * @member {number} expMonth
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.expMonth = 0;

                    /**
                     * Card expYear.
                     * @member {number} expYear
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.expYear = 0;

                    /**
                     * Card ccy.
                     * @member {string} ccy
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.ccy = "";

                    /**
                     * Card cardHolder.
                     * @member {string} cardHolder
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.cardHolder = "";

                    /**
                     * Card cardType.
                     * @member {md.maib.app.profile.CardType} cardType
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.cardType = 0;

                    /**
                     * Card isBlocked.
                     * @member {boolean} isBlocked
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.isBlocked = false;

                    /**
                     * Card visibility.
                     * @member {md.maib.app.profile.IVisibilitySetting|null|undefined} visibility
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.visibility = null;

                    /**
                     * Card bankAccount.
                     * @member {string} bankAccount
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.bankAccount = "";

                    /**
                     * Card cardName.
                     * @member {string} cardName
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.cardName = "";

                    /**
                     * Card qrCode.
                     * @member {string} qrCode
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.qrCode = "";

                    /**
                     * Card bankTitle.
                     * @member {string} bankTitle
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.bankTitle = "";

                    /**
                     * Card bic.
                     * @member {string} bic
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.bic = "";

                    /**
                     * Card iban.
                     * @member {string} iban
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.iban = "";

                    /**
                     * Card pan.
                     * @member {string} pan
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.pan = "";

                    /**
                     * Card needsActivation.
                     * @member {boolean} needsActivation
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.needsActivation = false;

                    /**
                     * Card activationIsPending.
                     * @member {boolean} activationIsPending
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.activationIsPending = false;

                    /**
                     * Card isExpired.
                     * @member {boolean} isExpired
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.isExpired = false;

                    /**
                     * Card isIssuedInApp.
                     * @member {boolean} isIssuedInApp
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.isIssuedInApp = false;

                    /**
                     * Card isCashbackSupported.
                     * @member {boolean} isCashbackSupported
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.isCashbackSupported = false;

                    /**
                     * Card isCreditLimit.
                     * @member {boolean} isCreditLimit
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.isCreditLimit = false;

                    /**
                     * Card limitInfo.
                     * @member {md.maib.app.profile.ICardCreditLimitInfo|null|undefined} limitInfo
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     */
                    Card.prototype.limitInfo = null;

                    /**
                     * Creates a new Card instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.Card
                     * @static
                     * @param {md.maib.app.profile.ICard=} [properties] Properties to set
                     * @returns {md.maib.app.profile.Card} Card instance
                     */
                    Card.create = function create(properties) {
                        return new Card(properties);
                    };

                    /**
                     * Encodes the specified Card message. Does not implicitly {@link md.maib.app.profile.Card.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.Card
                     * @static
                     * @param {md.maib.app.profile.ICard} message Card message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Card.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.last4Digits != null && Object.hasOwnProperty.call(message, "last4Digits"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.last4Digits);
                        if (message.balance != null && Object.hasOwnProperty.call(message, "balance"))
                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.balance);
                        if (message.expMonth != null && Object.hasOwnProperty.call(message, "expMonth"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.expMonth);
                        if (message.expYear != null && Object.hasOwnProperty.call(message, "expYear"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.expYear);
                        if (message.ccy != null && Object.hasOwnProperty.call(message, "ccy"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.ccy);
                        if (message.cardHolder != null && Object.hasOwnProperty.call(message, "cardHolder"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.cardHolder);
                        if (message.cardType != null && Object.hasOwnProperty.call(message, "cardType"))
                            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.cardType);
                        if (message.isBlocked != null && Object.hasOwnProperty.call(message, "isBlocked"))
                            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.isBlocked);
                        if (message.visibility != null && Object.hasOwnProperty.call(message, "visibility"))
                            $root.md.maib.app.profile.VisibilitySetting.encode(message.visibility, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.bankAccount != null && Object.hasOwnProperty.call(message, "bankAccount"))
                            writer.uint32(/* id 11, wireType 2 =*/90).string(message.bankAccount);
                        if (message.cardName != null && Object.hasOwnProperty.call(message, "cardName"))
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.cardName);
                        if (message.qrCode != null && Object.hasOwnProperty.call(message, "qrCode"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.qrCode);
                        if (message.bankTitle != null && Object.hasOwnProperty.call(message, "bankTitle"))
                            writer.uint32(/* id 14, wireType 2 =*/114).string(message.bankTitle);
                        if (message.bic != null && Object.hasOwnProperty.call(message, "bic"))
                            writer.uint32(/* id 15, wireType 2 =*/122).string(message.bic);
                        if (message.iban != null && Object.hasOwnProperty.call(message, "iban"))
                            writer.uint32(/* id 16, wireType 2 =*/130).string(message.iban);
                        if (message.pan != null && Object.hasOwnProperty.call(message, "pan"))
                            writer.uint32(/* id 17, wireType 2 =*/138).string(message.pan);
                        if (message.needsActivation != null && Object.hasOwnProperty.call(message, "needsActivation"))
                            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.needsActivation);
                        if (message.activationIsPending != null && Object.hasOwnProperty.call(message, "activationIsPending"))
                            writer.uint32(/* id 19, wireType 0 =*/152).bool(message.activationIsPending);
                        if (message.isExpired != null && Object.hasOwnProperty.call(message, "isExpired"))
                            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.isExpired);
                        if (message.isIssuedInApp != null && Object.hasOwnProperty.call(message, "isIssuedInApp"))
                            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.isIssuedInApp);
                        if (message.isCashbackSupported != null && Object.hasOwnProperty.call(message, "isCashbackSupported"))
                            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.isCashbackSupported);
                        if (message.isCreditLimit != null && Object.hasOwnProperty.call(message, "isCreditLimit"))
                            writer.uint32(/* id 23, wireType 0 =*/184).bool(message.isCreditLimit);
                        if (message.limitInfo != null && Object.hasOwnProperty.call(message, "limitInfo"))
                            $root.md.maib.app.profile.CardCreditLimitInfo.encode(message.limitInfo, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Card message, length delimited. Does not implicitly {@link md.maib.app.profile.Card.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.Card
                     * @static
                     * @param {md.maib.app.profile.ICard} message Card message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Card.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Card message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.Card
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.Card} Card
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Card.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.Card();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.last4Digits = reader.string();
                                break;
                            case 3:
                                message.balance = reader.double();
                                break;
                            case 4:
                                message.expMonth = reader.int32();
                                break;
                            case 5:
                                message.expYear = reader.int32();
                                break;
                            case 6:
                                message.ccy = reader.string();
                                break;
                            case 7:
                                message.cardHolder = reader.string();
                                break;
                            case 8:
                                message.cardType = reader.int32();
                                break;
                            case 9:
                                message.isBlocked = reader.bool();
                                break;
                            case 10:
                                message.visibility = $root.md.maib.app.profile.VisibilitySetting.decode(reader, reader.uint32());
                                break;
                            case 11:
                                message.bankAccount = reader.string();
                                break;
                            case 12:
                                message.cardName = reader.string();
                                break;
                            case 13:
                                message.qrCode = reader.string();
                                break;
                            case 14:
                                message.bankTitle = reader.string();
                                break;
                            case 15:
                                message.bic = reader.string();
                                break;
                            case 16:
                                message.iban = reader.string();
                                break;
                            case 17:
                                message.pan = reader.string();
                                break;
                            case 18:
                                message.needsActivation = reader.bool();
                                break;
                            case 19:
                                message.activationIsPending = reader.bool();
                                break;
                            case 20:
                                message.isExpired = reader.bool();
                                break;
                            case 21:
                                message.isIssuedInApp = reader.bool();
                                break;
                            case 22:
                                message.isCashbackSupported = reader.bool();
                                break;
                            case 23:
                                message.isCreditLimit = reader.bool();
                                break;
                            case 24:
                                message.limitInfo = $root.md.maib.app.profile.CardCreditLimitInfo.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Card message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.Card
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.Card} Card
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Card.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Card message.
                     * @function verify
                     * @memberof md.maib.app.profile.Card
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Card.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.last4Digits != null && message.hasOwnProperty("last4Digits"))
                            if (!$util.isString(message.last4Digits))
                                return "last4Digits: string expected";
                        if (message.balance != null && message.hasOwnProperty("balance"))
                            if (typeof message.balance !== "number")
                                return "balance: number expected";
                        if (message.expMonth != null && message.hasOwnProperty("expMonth"))
                            if (!$util.isInteger(message.expMonth))
                                return "expMonth: integer expected";
                        if (message.expYear != null && message.hasOwnProperty("expYear"))
                            if (!$util.isInteger(message.expYear))
                                return "expYear: integer expected";
                        if (message.ccy != null && message.hasOwnProperty("ccy"))
                            if (!$util.isString(message.ccy))
                                return "ccy: string expected";
                        if (message.cardHolder != null && message.hasOwnProperty("cardHolder"))
                            if (!$util.isString(message.cardHolder))
                                return "cardHolder: string expected";
                        if (message.cardType != null && message.hasOwnProperty("cardType"))
                            switch (message.cardType) {
                            default:
                                return "cardType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 10:
                                break;
                            }
                        if (message.isBlocked != null && message.hasOwnProperty("isBlocked"))
                            if (typeof message.isBlocked !== "boolean")
                                return "isBlocked: boolean expected";
                        if (message.visibility != null && message.hasOwnProperty("visibility")) {
                            let error = $root.md.maib.app.profile.VisibilitySetting.verify(message.visibility);
                            if (error)
                                return "visibility." + error;
                        }
                        if (message.bankAccount != null && message.hasOwnProperty("bankAccount"))
                            if (!$util.isString(message.bankAccount))
                                return "bankAccount: string expected";
                        if (message.cardName != null && message.hasOwnProperty("cardName"))
                            if (!$util.isString(message.cardName))
                                return "cardName: string expected";
                        if (message.qrCode != null && message.hasOwnProperty("qrCode"))
                            if (!$util.isString(message.qrCode))
                                return "qrCode: string expected";
                        if (message.bankTitle != null && message.hasOwnProperty("bankTitle"))
                            if (!$util.isString(message.bankTitle))
                                return "bankTitle: string expected";
                        if (message.bic != null && message.hasOwnProperty("bic"))
                            if (!$util.isString(message.bic))
                                return "bic: string expected";
                        if (message.iban != null && message.hasOwnProperty("iban"))
                            if (!$util.isString(message.iban))
                                return "iban: string expected";
                        if (message.pan != null && message.hasOwnProperty("pan"))
                            if (!$util.isString(message.pan))
                                return "pan: string expected";
                        if (message.needsActivation != null && message.hasOwnProperty("needsActivation"))
                            if (typeof message.needsActivation !== "boolean")
                                return "needsActivation: boolean expected";
                        if (message.activationIsPending != null && message.hasOwnProperty("activationIsPending"))
                            if (typeof message.activationIsPending !== "boolean")
                                return "activationIsPending: boolean expected";
                        if (message.isExpired != null && message.hasOwnProperty("isExpired"))
                            if (typeof message.isExpired !== "boolean")
                                return "isExpired: boolean expected";
                        if (message.isIssuedInApp != null && message.hasOwnProperty("isIssuedInApp"))
                            if (typeof message.isIssuedInApp !== "boolean")
                                return "isIssuedInApp: boolean expected";
                        if (message.isCashbackSupported != null && message.hasOwnProperty("isCashbackSupported"))
                            if (typeof message.isCashbackSupported !== "boolean")
                                return "isCashbackSupported: boolean expected";
                        if (message.isCreditLimit != null && message.hasOwnProperty("isCreditLimit"))
                            if (typeof message.isCreditLimit !== "boolean")
                                return "isCreditLimit: boolean expected";
                        if (message.limitInfo != null && message.hasOwnProperty("limitInfo")) {
                            let error = $root.md.maib.app.profile.CardCreditLimitInfo.verify(message.limitInfo);
                            if (error)
                                return "limitInfo." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Card message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.Card
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.Card} Card
                     */
                    Card.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.Card)
                            return object;
                        let message = new $root.md.maib.app.profile.Card();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.last4Digits != null)
                            message.last4Digits = String(object.last4Digits);
                        if (object.balance != null)
                            message.balance = Number(object.balance);
                        if (object.expMonth != null)
                            message.expMonth = object.expMonth | 0;
                        if (object.expYear != null)
                            message.expYear = object.expYear | 0;
                        if (object.ccy != null)
                            message.ccy = String(object.ccy);
                        if (object.cardHolder != null)
                            message.cardHolder = String(object.cardHolder);
                        switch (object.cardType) {
                        case "VISA":
                        case 0:
                            message.cardType = 0;
                            break;
                        case "MASTERCARD":
                        case 1:
                            message.cardType = 1;
                            break;
                        case "MAESTRO":
                        case 2:
                            message.cardType = 2;
                            break;
                        case "ELECTRON":
                        case 3:
                            message.cardType = 3;
                            break;
                        case "DISCOVER":
                        case 4:
                            message.cardType = 4;
                            break;
                        case "DINERS":
                        case 5:
                            message.cardType = 5;
                            break;
                        case "UNIONPAY":
                        case 6:
                            message.cardType = 6;
                            break;
                        case "AMERICAN_EXPRESS":
                        case 7:
                            message.cardType = 7;
                            break;
                        case "UNKNOWN":
                        case 8:
                            message.cardType = 8;
                            break;
                        case "CIRRUS":
                        case 9:
                            message.cardType = 9;
                            break;
                        case "LUNCH":
                        case 10:
                            message.cardType = 10;
                            break;
                        }
                        if (object.isBlocked != null)
                            message.isBlocked = Boolean(object.isBlocked);
                        if (object.visibility != null) {
                            if (typeof object.visibility !== "object")
                                throw TypeError(".md.maib.app.profile.Card.visibility: object expected");
                            message.visibility = $root.md.maib.app.profile.VisibilitySetting.fromObject(object.visibility);
                        }
                        if (object.bankAccount != null)
                            message.bankAccount = String(object.bankAccount);
                        if (object.cardName != null)
                            message.cardName = String(object.cardName);
                        if (object.qrCode != null)
                            message.qrCode = String(object.qrCode);
                        if (object.bankTitle != null)
                            message.bankTitle = String(object.bankTitle);
                        if (object.bic != null)
                            message.bic = String(object.bic);
                        if (object.iban != null)
                            message.iban = String(object.iban);
                        if (object.pan != null)
                            message.pan = String(object.pan);
                        if (object.needsActivation != null)
                            message.needsActivation = Boolean(object.needsActivation);
                        if (object.activationIsPending != null)
                            message.activationIsPending = Boolean(object.activationIsPending);
                        if (object.isExpired != null)
                            message.isExpired = Boolean(object.isExpired);
                        if (object.isIssuedInApp != null)
                            message.isIssuedInApp = Boolean(object.isIssuedInApp);
                        if (object.isCashbackSupported != null)
                            message.isCashbackSupported = Boolean(object.isCashbackSupported);
                        if (object.isCreditLimit != null)
                            message.isCreditLimit = Boolean(object.isCreditLimit);
                        if (object.limitInfo != null) {
                            if (typeof object.limitInfo !== "object")
                                throw TypeError(".md.maib.app.profile.Card.limitInfo: object expected");
                            message.limitInfo = $root.md.maib.app.profile.CardCreditLimitInfo.fromObject(object.limitInfo);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Card message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.Card
                     * @static
                     * @param {md.maib.app.profile.Card} message Card
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Card.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.last4Digits = "";
                            object.balance = 0;
                            object.expMonth = 0;
                            object.expYear = 0;
                            object.ccy = "";
                            object.cardHolder = "";
                            object.cardType = options.enums === String ? "VISA" : 0;
                            object.isBlocked = false;
                            object.visibility = null;
                            object.bankAccount = "";
                            object.cardName = "";
                            object.qrCode = "";
                            object.bankTitle = "";
                            object.bic = "";
                            object.iban = "";
                            object.pan = "";
                            object.needsActivation = false;
                            object.activationIsPending = false;
                            object.isExpired = false;
                            object.isIssuedInApp = false;
                            object.isCashbackSupported = false;
                            object.isCreditLimit = false;
                            object.limitInfo = null;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.last4Digits != null && message.hasOwnProperty("last4Digits"))
                            object.last4Digits = message.last4Digits;
                        if (message.balance != null && message.hasOwnProperty("balance"))
                            object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;
                        if (message.expMonth != null && message.hasOwnProperty("expMonth"))
                            object.expMonth = message.expMonth;
                        if (message.expYear != null && message.hasOwnProperty("expYear"))
                            object.expYear = message.expYear;
                        if (message.ccy != null && message.hasOwnProperty("ccy"))
                            object.ccy = message.ccy;
                        if (message.cardHolder != null && message.hasOwnProperty("cardHolder"))
                            object.cardHolder = message.cardHolder;
                        if (message.cardType != null && message.hasOwnProperty("cardType"))
                            object.cardType = options.enums === String ? $root.md.maib.app.profile.CardType[message.cardType] : message.cardType;
                        if (message.isBlocked != null && message.hasOwnProperty("isBlocked"))
                            object.isBlocked = message.isBlocked;
                        if (message.visibility != null && message.hasOwnProperty("visibility"))
                            object.visibility = $root.md.maib.app.profile.VisibilitySetting.toObject(message.visibility, options);
                        if (message.bankAccount != null && message.hasOwnProperty("bankAccount"))
                            object.bankAccount = message.bankAccount;
                        if (message.cardName != null && message.hasOwnProperty("cardName"))
                            object.cardName = message.cardName;
                        if (message.qrCode != null && message.hasOwnProperty("qrCode"))
                            object.qrCode = message.qrCode;
                        if (message.bankTitle != null && message.hasOwnProperty("bankTitle"))
                            object.bankTitle = message.bankTitle;
                        if (message.bic != null && message.hasOwnProperty("bic"))
                            object.bic = message.bic;
                        if (message.iban != null && message.hasOwnProperty("iban"))
                            object.iban = message.iban;
                        if (message.pan != null && message.hasOwnProperty("pan"))
                            object.pan = message.pan;
                        if (message.needsActivation != null && message.hasOwnProperty("needsActivation"))
                            object.needsActivation = message.needsActivation;
                        if (message.activationIsPending != null && message.hasOwnProperty("activationIsPending"))
                            object.activationIsPending = message.activationIsPending;
                        if (message.isExpired != null && message.hasOwnProperty("isExpired"))
                            object.isExpired = message.isExpired;
                        if (message.isIssuedInApp != null && message.hasOwnProperty("isIssuedInApp"))
                            object.isIssuedInApp = message.isIssuedInApp;
                        if (message.isCashbackSupported != null && message.hasOwnProperty("isCashbackSupported"))
                            object.isCashbackSupported = message.isCashbackSupported;
                        if (message.isCreditLimit != null && message.hasOwnProperty("isCreditLimit"))
                            object.isCreditLimit = message.isCreditLimit;
                        if (message.limitInfo != null && message.hasOwnProperty("limitInfo"))
                            object.limitInfo = $root.md.maib.app.profile.CardCreditLimitInfo.toObject(message.limitInfo, options);
                        return object;
                    };

                    /**
                     * Converts this Card to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.Card
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Card.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Card;
                })();

                profile.CardCreditLimitInfo = (function() {

                    /**
                     * Properties of a CardCreditLimitInfo.
                     * @memberof md.maib.app.profile
                     * @interface ICardCreditLimitInfo
                     * @property {number|null} [limitAmount] CardCreditLimitInfo limitAmount
                     * @property {number|null} [usedLimitAmount] CardCreditLimitInfo usedLimitAmount
                     * @property {number|null} [ownMoney] CardCreditLimitInfo ownMoney
                     */

                    /**
                     * Constructs a new CardCreditLimitInfo.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a CardCreditLimitInfo.
                     * @implements ICardCreditLimitInfo
                     * @constructor
                     * @param {md.maib.app.profile.ICardCreditLimitInfo=} [properties] Properties to set
                     */
                    function CardCreditLimitInfo(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CardCreditLimitInfo limitAmount.
                     * @member {number} limitAmount
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @instance
                     */
                    CardCreditLimitInfo.prototype.limitAmount = 0;

                    /**
                     * CardCreditLimitInfo usedLimitAmount.
                     * @member {number} usedLimitAmount
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @instance
                     */
                    CardCreditLimitInfo.prototype.usedLimitAmount = 0;

                    /**
                     * CardCreditLimitInfo ownMoney.
                     * @member {number} ownMoney
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @instance
                     */
                    CardCreditLimitInfo.prototype.ownMoney = 0;

                    /**
                     * Creates a new CardCreditLimitInfo instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @static
                     * @param {md.maib.app.profile.ICardCreditLimitInfo=} [properties] Properties to set
                     * @returns {md.maib.app.profile.CardCreditLimitInfo} CardCreditLimitInfo instance
                     */
                    CardCreditLimitInfo.create = function create(properties) {
                        return new CardCreditLimitInfo(properties);
                    };

                    /**
                     * Encodes the specified CardCreditLimitInfo message. Does not implicitly {@link md.maib.app.profile.CardCreditLimitInfo.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @static
                     * @param {md.maib.app.profile.ICardCreditLimitInfo} message CardCreditLimitInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CardCreditLimitInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.limitAmount != null && Object.hasOwnProperty.call(message, "limitAmount"))
                            writer.uint32(/* id 1, wireType 1 =*/9).double(message.limitAmount);
                        if (message.usedLimitAmount != null && Object.hasOwnProperty.call(message, "usedLimitAmount"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.usedLimitAmount);
                        if (message.ownMoney != null && Object.hasOwnProperty.call(message, "ownMoney"))
                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.ownMoney);
                        return writer;
                    };

                    /**
                     * Encodes the specified CardCreditLimitInfo message, length delimited. Does not implicitly {@link md.maib.app.profile.CardCreditLimitInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @static
                     * @param {md.maib.app.profile.ICardCreditLimitInfo} message CardCreditLimitInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CardCreditLimitInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CardCreditLimitInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.CardCreditLimitInfo} CardCreditLimitInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CardCreditLimitInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.CardCreditLimitInfo();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.limitAmount = reader.double();
                                break;
                            case 2:
                                message.usedLimitAmount = reader.double();
                                break;
                            case 3:
                                message.ownMoney = reader.double();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CardCreditLimitInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.CardCreditLimitInfo} CardCreditLimitInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CardCreditLimitInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CardCreditLimitInfo message.
                     * @function verify
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CardCreditLimitInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.limitAmount != null && message.hasOwnProperty("limitAmount"))
                            if (typeof message.limitAmount !== "number")
                                return "limitAmount: number expected";
                        if (message.usedLimitAmount != null && message.hasOwnProperty("usedLimitAmount"))
                            if (typeof message.usedLimitAmount !== "number")
                                return "usedLimitAmount: number expected";
                        if (message.ownMoney != null && message.hasOwnProperty("ownMoney"))
                            if (typeof message.ownMoney !== "number")
                                return "ownMoney: number expected";
                        return null;
                    };

                    /**
                     * Creates a CardCreditLimitInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.CardCreditLimitInfo} CardCreditLimitInfo
                     */
                    CardCreditLimitInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.CardCreditLimitInfo)
                            return object;
                        let message = new $root.md.maib.app.profile.CardCreditLimitInfo();
                        if (object.limitAmount != null)
                            message.limitAmount = Number(object.limitAmount);
                        if (object.usedLimitAmount != null)
                            message.usedLimitAmount = Number(object.usedLimitAmount);
                        if (object.ownMoney != null)
                            message.ownMoney = Number(object.ownMoney);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CardCreditLimitInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @static
                     * @param {md.maib.app.profile.CardCreditLimitInfo} message CardCreditLimitInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CardCreditLimitInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.limitAmount = 0;
                            object.usedLimitAmount = 0;
                            object.ownMoney = 0;
                        }
                        if (message.limitAmount != null && message.hasOwnProperty("limitAmount"))
                            object.limitAmount = options.json && !isFinite(message.limitAmount) ? String(message.limitAmount) : message.limitAmount;
                        if (message.usedLimitAmount != null && message.hasOwnProperty("usedLimitAmount"))
                            object.usedLimitAmount = options.json && !isFinite(message.usedLimitAmount) ? String(message.usedLimitAmount) : message.usedLimitAmount;
                        if (message.ownMoney != null && message.hasOwnProperty("ownMoney"))
                            object.ownMoney = options.json && !isFinite(message.ownMoney) ? String(message.ownMoney) : message.ownMoney;
                        return object;
                    };

                    /**
                     * Converts this CardCreditLimitInfo to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.CardCreditLimitInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CardCreditLimitInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CardCreditLimitInfo;
                })();

                profile.ProfileSettings = (function() {

                    /**
                     * Properties of a ProfileSettings.
                     * @memberof md.maib.app.profile
                     * @interface IProfileSettings
                     * @property {md.maib.app.profile.INotificationsSettings|null} [notifications] ProfileSettings notifications
                     * @property {md.maib.app.profile.IP2PContactsSettings|null} [p2pSettings] ProfileSettings p2pSettings
                     */

                    /**
                     * Constructs a new ProfileSettings.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a ProfileSettings.
                     * @implements IProfileSettings
                     * @constructor
                     * @param {md.maib.app.profile.IProfileSettings=} [properties] Properties to set
                     */
                    function ProfileSettings(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ProfileSettings notifications.
                     * @member {md.maib.app.profile.INotificationsSettings|null|undefined} notifications
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @instance
                     */
                    ProfileSettings.prototype.notifications = null;

                    /**
                     * ProfileSettings p2pSettings.
                     * @member {md.maib.app.profile.IP2PContactsSettings|null|undefined} p2pSettings
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @instance
                     */
                    ProfileSettings.prototype.p2pSettings = null;

                    /**
                     * Creates a new ProfileSettings instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @static
                     * @param {md.maib.app.profile.IProfileSettings=} [properties] Properties to set
                     * @returns {md.maib.app.profile.ProfileSettings} ProfileSettings instance
                     */
                    ProfileSettings.create = function create(properties) {
                        return new ProfileSettings(properties);
                    };

                    /**
                     * Encodes the specified ProfileSettings message. Does not implicitly {@link md.maib.app.profile.ProfileSettings.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @static
                     * @param {md.maib.app.profile.IProfileSettings} message ProfileSettings message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProfileSettings.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.notifications != null && Object.hasOwnProperty.call(message, "notifications"))
                            $root.md.maib.app.profile.NotificationsSettings.encode(message.notifications, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.p2pSettings != null && Object.hasOwnProperty.call(message, "p2pSettings"))
                            $root.md.maib.app.profile.P2PContactsSettings.encode(message.p2pSettings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ProfileSettings message, length delimited. Does not implicitly {@link md.maib.app.profile.ProfileSettings.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @static
                     * @param {md.maib.app.profile.IProfileSettings} message ProfileSettings message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProfileSettings.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ProfileSettings message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.ProfileSettings} ProfileSettings
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProfileSettings.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.ProfileSettings();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.notifications = $root.md.maib.app.profile.NotificationsSettings.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.p2pSettings = $root.md.maib.app.profile.P2PContactsSettings.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ProfileSettings message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.ProfileSettings} ProfileSettings
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProfileSettings.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ProfileSettings message.
                     * @function verify
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ProfileSettings.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.notifications != null && message.hasOwnProperty("notifications")) {
                            let error = $root.md.maib.app.profile.NotificationsSettings.verify(message.notifications);
                            if (error)
                                return "notifications." + error;
                        }
                        if (message.p2pSettings != null && message.hasOwnProperty("p2pSettings")) {
                            let error = $root.md.maib.app.profile.P2PContactsSettings.verify(message.p2pSettings);
                            if (error)
                                return "p2pSettings." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ProfileSettings message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.ProfileSettings} ProfileSettings
                     */
                    ProfileSettings.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.ProfileSettings)
                            return object;
                        let message = new $root.md.maib.app.profile.ProfileSettings();
                        if (object.notifications != null) {
                            if (typeof object.notifications !== "object")
                                throw TypeError(".md.maib.app.profile.ProfileSettings.notifications: object expected");
                            message.notifications = $root.md.maib.app.profile.NotificationsSettings.fromObject(object.notifications);
                        }
                        if (object.p2pSettings != null) {
                            if (typeof object.p2pSettings !== "object")
                                throw TypeError(".md.maib.app.profile.ProfileSettings.p2pSettings: object expected");
                            message.p2pSettings = $root.md.maib.app.profile.P2PContactsSettings.fromObject(object.p2pSettings);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ProfileSettings message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @static
                     * @param {md.maib.app.profile.ProfileSettings} message ProfileSettings
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ProfileSettings.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.notifications = null;
                            object.p2pSettings = null;
                        }
                        if (message.notifications != null && message.hasOwnProperty("notifications"))
                            object.notifications = $root.md.maib.app.profile.NotificationsSettings.toObject(message.notifications, options);
                        if (message.p2pSettings != null && message.hasOwnProperty("p2pSettings"))
                            object.p2pSettings = $root.md.maib.app.profile.P2PContactsSettings.toObject(message.p2pSettings, options);
                        return object;
                    };

                    /**
                     * Converts this ProfileSettings to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.ProfileSettings
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ProfileSettings.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ProfileSettings;
                })();

                profile.NotificationsSettings = (function() {

                    /**
                     * Properties of a NotificationsSettings.
                     * @memberof md.maib.app.profile
                     * @interface INotificationsSettings
                     * @property {boolean|null} [sendSpendNotification] NotificationsSettings sendSpendNotification
                     * @property {boolean|null} [sendSupplyNotification] NotificationsSettings sendSupplyNotification
                     * @property {boolean|null} [sendOtherNotification] NotificationsSettings sendOtherNotification
                     * @property {boolean|null} [dummyTrue] NotificationsSettings dummyTrue
                     */

                    /**
                     * Constructs a new NotificationsSettings.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a NotificationsSettings.
                     * @implements INotificationsSettings
                     * @constructor
                     * @param {md.maib.app.profile.INotificationsSettings=} [properties] Properties to set
                     */
                    function NotificationsSettings(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * NotificationsSettings sendSpendNotification.
                     * @member {boolean} sendSpendNotification
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @instance
                     */
                    NotificationsSettings.prototype.sendSpendNotification = false;

                    /**
                     * NotificationsSettings sendSupplyNotification.
                     * @member {boolean} sendSupplyNotification
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @instance
                     */
                    NotificationsSettings.prototype.sendSupplyNotification = false;

                    /**
                     * NotificationsSettings sendOtherNotification.
                     * @member {boolean} sendOtherNotification
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @instance
                     */
                    NotificationsSettings.prototype.sendOtherNotification = false;

                    /**
                     * NotificationsSettings dummyTrue.
                     * @member {boolean} dummyTrue
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @instance
                     */
                    NotificationsSettings.prototype.dummyTrue = false;

                    /**
                     * Creates a new NotificationsSettings instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @static
                     * @param {md.maib.app.profile.INotificationsSettings=} [properties] Properties to set
                     * @returns {md.maib.app.profile.NotificationsSettings} NotificationsSettings instance
                     */
                    NotificationsSettings.create = function create(properties) {
                        return new NotificationsSettings(properties);
                    };

                    /**
                     * Encodes the specified NotificationsSettings message. Does not implicitly {@link md.maib.app.profile.NotificationsSettings.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @static
                     * @param {md.maib.app.profile.INotificationsSettings} message NotificationsSettings message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NotificationsSettings.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sendSpendNotification != null && Object.hasOwnProperty.call(message, "sendSpendNotification"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.sendSpendNotification);
                        if (message.sendSupplyNotification != null && Object.hasOwnProperty.call(message, "sendSupplyNotification"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.sendSupplyNotification);
                        if (message.sendOtherNotification != null && Object.hasOwnProperty.call(message, "sendOtherNotification"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.sendOtherNotification);
                        if (message.dummyTrue != null && Object.hasOwnProperty.call(message, "dummyTrue"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.dummyTrue);
                        return writer;
                    };

                    /**
                     * Encodes the specified NotificationsSettings message, length delimited. Does not implicitly {@link md.maib.app.profile.NotificationsSettings.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @static
                     * @param {md.maib.app.profile.INotificationsSettings} message NotificationsSettings message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NotificationsSettings.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NotificationsSettings message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.NotificationsSettings} NotificationsSettings
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NotificationsSettings.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.NotificationsSettings();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sendSpendNotification = reader.bool();
                                break;
                            case 2:
                                message.sendSupplyNotification = reader.bool();
                                break;
                            case 3:
                                message.sendOtherNotification = reader.bool();
                                break;
                            case 4:
                                message.dummyTrue = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a NotificationsSettings message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.NotificationsSettings} NotificationsSettings
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NotificationsSettings.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NotificationsSettings message.
                     * @function verify
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NotificationsSettings.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sendSpendNotification != null && message.hasOwnProperty("sendSpendNotification"))
                            if (typeof message.sendSpendNotification !== "boolean")
                                return "sendSpendNotification: boolean expected";
                        if (message.sendSupplyNotification != null && message.hasOwnProperty("sendSupplyNotification"))
                            if (typeof message.sendSupplyNotification !== "boolean")
                                return "sendSupplyNotification: boolean expected";
                        if (message.sendOtherNotification != null && message.hasOwnProperty("sendOtherNotification"))
                            if (typeof message.sendOtherNotification !== "boolean")
                                return "sendOtherNotification: boolean expected";
                        if (message.dummyTrue != null && message.hasOwnProperty("dummyTrue"))
                            if (typeof message.dummyTrue !== "boolean")
                                return "dummyTrue: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a NotificationsSettings message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.NotificationsSettings} NotificationsSettings
                     */
                    NotificationsSettings.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.NotificationsSettings)
                            return object;
                        let message = new $root.md.maib.app.profile.NotificationsSettings();
                        if (object.sendSpendNotification != null)
                            message.sendSpendNotification = Boolean(object.sendSpendNotification);
                        if (object.sendSupplyNotification != null)
                            message.sendSupplyNotification = Boolean(object.sendSupplyNotification);
                        if (object.sendOtherNotification != null)
                            message.sendOtherNotification = Boolean(object.sendOtherNotification);
                        if (object.dummyTrue != null)
                            message.dummyTrue = Boolean(object.dummyTrue);
                        return message;
                    };

                    /**
                     * Creates a plain object from a NotificationsSettings message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @static
                     * @param {md.maib.app.profile.NotificationsSettings} message NotificationsSettings
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NotificationsSettings.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.sendSpendNotification = false;
                            object.sendSupplyNotification = false;
                            object.sendOtherNotification = false;
                            object.dummyTrue = false;
                        }
                        if (message.sendSpendNotification != null && message.hasOwnProperty("sendSpendNotification"))
                            object.sendSpendNotification = message.sendSpendNotification;
                        if (message.sendSupplyNotification != null && message.hasOwnProperty("sendSupplyNotification"))
                            object.sendSupplyNotification = message.sendSupplyNotification;
                        if (message.sendOtherNotification != null && message.hasOwnProperty("sendOtherNotification"))
                            object.sendOtherNotification = message.sendOtherNotification;
                        if (message.dummyTrue != null && message.hasOwnProperty("dummyTrue"))
                            object.dummyTrue = message.dummyTrue;
                        return object;
                    };

                    /**
                     * Converts this NotificationsSettings to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.NotificationsSettings
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NotificationsSettings.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return NotificationsSettings;
                })();

                profile.PersonalInfo = (function() {

                    /**
                     * Properties of a PersonalInfo.
                     * @memberof md.maib.app.profile
                     * @interface IPersonalInfo
                     * @property {string|null} [IDNP] PersonalInfo IDNP
                     * @property {string|null} [fullName] PersonalInfo fullName
                     * @property {string|null} [address] PersonalInfo address
                     * @property {string|null} [email] PersonalInfo email
                     * @property {string|null} [residence] PersonalInfo residence
                     * @property {string|null} [phone] PersonalInfo phone
                     * @property {number|Long|null} [birthDate] PersonalInfo birthDate
                     */

                    /**
                     * Constructs a new PersonalInfo.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a PersonalInfo.
                     * @implements IPersonalInfo
                     * @constructor
                     * @param {md.maib.app.profile.IPersonalInfo=} [properties] Properties to set
                     */
                    function PersonalInfo(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PersonalInfo IDNP.
                     * @member {string} IDNP
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @instance
                     */
                    PersonalInfo.prototype.IDNP = "";

                    /**
                     * PersonalInfo fullName.
                     * @member {string} fullName
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @instance
                     */
                    PersonalInfo.prototype.fullName = "";

                    /**
                     * PersonalInfo address.
                     * @member {string} address
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @instance
                     */
                    PersonalInfo.prototype.address = "";

                    /**
                     * PersonalInfo email.
                     * @member {string} email
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @instance
                     */
                    PersonalInfo.prototype.email = "";

                    /**
                     * PersonalInfo residence.
                     * @member {string} residence
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @instance
                     */
                    PersonalInfo.prototype.residence = "";

                    /**
                     * PersonalInfo phone.
                     * @member {string} phone
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @instance
                     */
                    PersonalInfo.prototype.phone = "";

                    /**
                     * PersonalInfo birthDate.
                     * @member {number|Long} birthDate
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @instance
                     */
                    PersonalInfo.prototype.birthDate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * Creates a new PersonalInfo instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @static
                     * @param {md.maib.app.profile.IPersonalInfo=} [properties] Properties to set
                     * @returns {md.maib.app.profile.PersonalInfo} PersonalInfo instance
                     */
                    PersonalInfo.create = function create(properties) {
                        return new PersonalInfo(properties);
                    };

                    /**
                     * Encodes the specified PersonalInfo message. Does not implicitly {@link md.maib.app.profile.PersonalInfo.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @static
                     * @param {md.maib.app.profile.IPersonalInfo} message PersonalInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PersonalInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.IDNP != null && Object.hasOwnProperty.call(message, "IDNP"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.IDNP);
                        if (message.fullName != null && Object.hasOwnProperty.call(message, "fullName"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.fullName);
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.address);
                        if (message.email != null && Object.hasOwnProperty.call(message, "email"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.email);
                        if (message.residence != null && Object.hasOwnProperty.call(message, "residence"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.residence);
                        if (message.phone != null && Object.hasOwnProperty.call(message, "phone"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.phone);
                        if (message.birthDate != null && Object.hasOwnProperty.call(message, "birthDate"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.birthDate);
                        return writer;
                    };

                    /**
                     * Encodes the specified PersonalInfo message, length delimited. Does not implicitly {@link md.maib.app.profile.PersonalInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @static
                     * @param {md.maib.app.profile.IPersonalInfo} message PersonalInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PersonalInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PersonalInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.PersonalInfo} PersonalInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PersonalInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.PersonalInfo();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.IDNP = reader.string();
                                break;
                            case 2:
                                message.fullName = reader.string();
                                break;
                            case 3:
                                message.address = reader.string();
                                break;
                            case 4:
                                message.email = reader.string();
                                break;
                            case 5:
                                message.residence = reader.string();
                                break;
                            case 6:
                                message.phone = reader.string();
                                break;
                            case 7:
                                message.birthDate = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PersonalInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.PersonalInfo} PersonalInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PersonalInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PersonalInfo message.
                     * @function verify
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PersonalInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.IDNP != null && message.hasOwnProperty("IDNP"))
                            if (!$util.isString(message.IDNP))
                                return "IDNP: string expected";
                        if (message.fullName != null && message.hasOwnProperty("fullName"))
                            if (!$util.isString(message.fullName))
                                return "fullName: string expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.email != null && message.hasOwnProperty("email"))
                            if (!$util.isString(message.email))
                                return "email: string expected";
                        if (message.residence != null && message.hasOwnProperty("residence"))
                            if (!$util.isString(message.residence))
                                return "residence: string expected";
                        if (message.phone != null && message.hasOwnProperty("phone"))
                            if (!$util.isString(message.phone))
                                return "phone: string expected";
                        if (message.birthDate != null && message.hasOwnProperty("birthDate"))
                            if (!$util.isInteger(message.birthDate) && !(message.birthDate && $util.isInteger(message.birthDate.low) && $util.isInteger(message.birthDate.high)))
                                return "birthDate: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a PersonalInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.PersonalInfo} PersonalInfo
                     */
                    PersonalInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.PersonalInfo)
                            return object;
                        let message = new $root.md.maib.app.profile.PersonalInfo();
                        if (object.IDNP != null)
                            message.IDNP = String(object.IDNP);
                        if (object.fullName != null)
                            message.fullName = String(object.fullName);
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.email != null)
                            message.email = String(object.email);
                        if (object.residence != null)
                            message.residence = String(object.residence);
                        if (object.phone != null)
                            message.phone = String(object.phone);
                        if (object.birthDate != null)
                            if ($util.Long)
                                (message.birthDate = $util.Long.fromValue(object.birthDate)).unsigned = false;
                            else if (typeof object.birthDate === "string")
                                message.birthDate = parseInt(object.birthDate, 10);
                            else if (typeof object.birthDate === "number")
                                message.birthDate = object.birthDate;
                            else if (typeof object.birthDate === "object")
                                message.birthDate = new $util.LongBits(object.birthDate.low >>> 0, object.birthDate.high >>> 0).toNumber();
                        return message;
                    };

                    /**
                     * Creates a plain object from a PersonalInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @static
                     * @param {md.maib.app.profile.PersonalInfo} message PersonalInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PersonalInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.IDNP = "";
                            object.fullName = "";
                            object.address = "";
                            object.email = "";
                            object.residence = "";
                            object.phone = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.birthDate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.birthDate = options.longs === String ? "0" : 0;
                        }
                        if (message.IDNP != null && message.hasOwnProperty("IDNP"))
                            object.IDNP = message.IDNP;
                        if (message.fullName != null && message.hasOwnProperty("fullName"))
                            object.fullName = message.fullName;
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.email != null && message.hasOwnProperty("email"))
                            object.email = message.email;
                        if (message.residence != null && message.hasOwnProperty("residence"))
                            object.residence = message.residence;
                        if (message.phone != null && message.hasOwnProperty("phone"))
                            object.phone = message.phone;
                        if (message.birthDate != null && message.hasOwnProperty("birthDate"))
                            if (typeof message.birthDate === "number")
                                object.birthDate = options.longs === String ? String(message.birthDate) : message.birthDate;
                            else
                                object.birthDate = options.longs === String ? $util.Long.prototype.toString.call(message.birthDate) : options.longs === Number ? new $util.LongBits(message.birthDate.low >>> 0, message.birthDate.high >>> 0).toNumber() : message.birthDate;
                        return object;
                    };

                    /**
                     * Converts this PersonalInfo to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.PersonalInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PersonalInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PersonalInfo;
                })();

                profile.P2PContactsSettings = (function() {

                    /**
                     * Properties of a P2PContactsSettings.
                     * @memberof md.maib.app.profile
                     * @interface IP2PContactsSettings
                     * @property {boolean|null} [showMaibContacts] P2PContactsSettings showMaibContacts
                     * @property {boolean|null} [showMeAsMaibCustomer] P2PContactsSettings showMeAsMaibCustomer
                     * @property {number|Long|null} [defaultCardId] P2PContactsSettings defaultCardId
                     * @property {boolean|null} [dummyTrue] P2PContactsSettings dummyTrue
                     */

                    /**
                     * Constructs a new P2PContactsSettings.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a P2PContactsSettings.
                     * @implements IP2PContactsSettings
                     * @constructor
                     * @param {md.maib.app.profile.IP2PContactsSettings=} [properties] Properties to set
                     */
                    function P2PContactsSettings(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * P2PContactsSettings showMaibContacts.
                     * @member {boolean} showMaibContacts
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @instance
                     */
                    P2PContactsSettings.prototype.showMaibContacts = false;

                    /**
                     * P2PContactsSettings showMeAsMaibCustomer.
                     * @member {boolean} showMeAsMaibCustomer
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @instance
                     */
                    P2PContactsSettings.prototype.showMeAsMaibCustomer = false;

                    /**
                     * P2PContactsSettings defaultCardId.
                     * @member {number|Long} defaultCardId
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @instance
                     */
                    P2PContactsSettings.prototype.defaultCardId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * P2PContactsSettings dummyTrue.
                     * @member {boolean} dummyTrue
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @instance
                     */
                    P2PContactsSettings.prototype.dummyTrue = false;

                    /**
                     * Creates a new P2PContactsSettings instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @static
                     * @param {md.maib.app.profile.IP2PContactsSettings=} [properties] Properties to set
                     * @returns {md.maib.app.profile.P2PContactsSettings} P2PContactsSettings instance
                     */
                    P2PContactsSettings.create = function create(properties) {
                        return new P2PContactsSettings(properties);
                    };

                    /**
                     * Encodes the specified P2PContactsSettings message. Does not implicitly {@link md.maib.app.profile.P2PContactsSettings.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @static
                     * @param {md.maib.app.profile.IP2PContactsSettings} message P2PContactsSettings message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    P2PContactsSettings.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.showMaibContacts != null && Object.hasOwnProperty.call(message, "showMaibContacts"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.showMaibContacts);
                        if (message.showMeAsMaibCustomer != null && Object.hasOwnProperty.call(message, "showMeAsMaibCustomer"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.showMeAsMaibCustomer);
                        if (message.defaultCardId != null && Object.hasOwnProperty.call(message, "defaultCardId"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.defaultCardId);
                        if (message.dummyTrue != null && Object.hasOwnProperty.call(message, "dummyTrue"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.dummyTrue);
                        return writer;
                    };

                    /**
                     * Encodes the specified P2PContactsSettings message, length delimited. Does not implicitly {@link md.maib.app.profile.P2PContactsSettings.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @static
                     * @param {md.maib.app.profile.IP2PContactsSettings} message P2PContactsSettings message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    P2PContactsSettings.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a P2PContactsSettings message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.P2PContactsSettings} P2PContactsSettings
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    P2PContactsSettings.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.P2PContactsSettings();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.showMaibContacts = reader.bool();
                                break;
                            case 2:
                                message.showMeAsMaibCustomer = reader.bool();
                                break;
                            case 3:
                                message.defaultCardId = reader.uint64();
                                break;
                            case 4:
                                message.dummyTrue = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a P2PContactsSettings message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.P2PContactsSettings} P2PContactsSettings
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    P2PContactsSettings.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a P2PContactsSettings message.
                     * @function verify
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    P2PContactsSettings.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.showMaibContacts != null && message.hasOwnProperty("showMaibContacts"))
                            if (typeof message.showMaibContacts !== "boolean")
                                return "showMaibContacts: boolean expected";
                        if (message.showMeAsMaibCustomer != null && message.hasOwnProperty("showMeAsMaibCustomer"))
                            if (typeof message.showMeAsMaibCustomer !== "boolean")
                                return "showMeAsMaibCustomer: boolean expected";
                        if (message.defaultCardId != null && message.hasOwnProperty("defaultCardId"))
                            if (!$util.isInteger(message.defaultCardId) && !(message.defaultCardId && $util.isInteger(message.defaultCardId.low) && $util.isInteger(message.defaultCardId.high)))
                                return "defaultCardId: integer|Long expected";
                        if (message.dummyTrue != null && message.hasOwnProperty("dummyTrue"))
                            if (typeof message.dummyTrue !== "boolean")
                                return "dummyTrue: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a P2PContactsSettings message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.P2PContactsSettings} P2PContactsSettings
                     */
                    P2PContactsSettings.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.P2PContactsSettings)
                            return object;
                        let message = new $root.md.maib.app.profile.P2PContactsSettings();
                        if (object.showMaibContacts != null)
                            message.showMaibContacts = Boolean(object.showMaibContacts);
                        if (object.showMeAsMaibCustomer != null)
                            message.showMeAsMaibCustomer = Boolean(object.showMeAsMaibCustomer);
                        if (object.defaultCardId != null)
                            if ($util.Long)
                                (message.defaultCardId = $util.Long.fromValue(object.defaultCardId)).unsigned = true;
                            else if (typeof object.defaultCardId === "string")
                                message.defaultCardId = parseInt(object.defaultCardId, 10);
                            else if (typeof object.defaultCardId === "number")
                                message.defaultCardId = object.defaultCardId;
                            else if (typeof object.defaultCardId === "object")
                                message.defaultCardId = new $util.LongBits(object.defaultCardId.low >>> 0, object.defaultCardId.high >>> 0).toNumber(true);
                        if (object.dummyTrue != null)
                            message.dummyTrue = Boolean(object.dummyTrue);
                        return message;
                    };

                    /**
                     * Creates a plain object from a P2PContactsSettings message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @static
                     * @param {md.maib.app.profile.P2PContactsSettings} message P2PContactsSettings
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    P2PContactsSettings.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.showMaibContacts = false;
                            object.showMeAsMaibCustomer = false;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.defaultCardId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.defaultCardId = options.longs === String ? "0" : 0;
                            object.dummyTrue = false;
                        }
                        if (message.showMaibContacts != null && message.hasOwnProperty("showMaibContacts"))
                            object.showMaibContacts = message.showMaibContacts;
                        if (message.showMeAsMaibCustomer != null && message.hasOwnProperty("showMeAsMaibCustomer"))
                            object.showMeAsMaibCustomer = message.showMeAsMaibCustomer;
                        if (message.defaultCardId != null && message.hasOwnProperty("defaultCardId"))
                            if (typeof message.defaultCardId === "number")
                                object.defaultCardId = options.longs === String ? String(message.defaultCardId) : message.defaultCardId;
                            else
                                object.defaultCardId = options.longs === String ? $util.Long.prototype.toString.call(message.defaultCardId) : options.longs === Number ? new $util.LongBits(message.defaultCardId.low >>> 0, message.defaultCardId.high >>> 0).toNumber(true) : message.defaultCardId;
                        if (message.dummyTrue != null && message.hasOwnProperty("dummyTrue"))
                            object.dummyTrue = message.dummyTrue;
                        return object;
                    };

                    /**
                     * Converts this P2PContactsSettings to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.P2PContactsSettings
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    P2PContactsSettings.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return P2PContactsSettings;
                })();

                profile.Account = (function() {

                    /**
                     * Properties of an Account.
                     * @memberof md.maib.app.profile
                     * @interface IAccount
                     * @property {string|null} [synt] Account synt
                     * @property {string|null} [account] Account account
                     * @property {string|null} [iban] Account iban
                     * @property {string|null} [currency] Account currency
                     * @property {number|null} [amount] Account amount
                     * @property {number|null} [blockedAmount] Account blockedAmount
                     * @property {boolean|null} [isActive] Account isActive
                     * @property {md.maib.app.profile.IVisibilitySetting|null} [visibility] Account visibility
                     * @property {boolean|null} [isCardAccount] Account isCardAccount
                     * @property {string|null} [bic] Account bic
                     * @property {boolean|null} [openedInApp] Account openedInApp
                     * @property {number|Long|null} [openedDate] Account openedDate
                     * @property {string|null} [accountName] Account accountName
                     */

                    /**
                     * Constructs a new Account.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents an Account.
                     * @implements IAccount
                     * @constructor
                     * @param {md.maib.app.profile.IAccount=} [properties] Properties to set
                     */
                    function Account(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Account synt.
                     * @member {string} synt
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.synt = "";

                    /**
                     * Account account.
                     * @member {string} account
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.account = "";

                    /**
                     * Account iban.
                     * @member {string} iban
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.iban = "";

                    /**
                     * Account currency.
                     * @member {string} currency
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.currency = "";

                    /**
                     * Account amount.
                     * @member {number} amount
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.amount = 0;

                    /**
                     * Account blockedAmount.
                     * @member {number} blockedAmount
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.blockedAmount = 0;

                    /**
                     * Account isActive.
                     * @member {boolean} isActive
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.isActive = false;

                    /**
                     * Account visibility.
                     * @member {md.maib.app.profile.IVisibilitySetting|null|undefined} visibility
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.visibility = null;

                    /**
                     * Account isCardAccount.
                     * @member {boolean} isCardAccount
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.isCardAccount = false;

                    /**
                     * Account bic.
                     * @member {string} bic
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.bic = "";

                    /**
                     * Account openedInApp.
                     * @member {boolean} openedInApp
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.openedInApp = false;

                    /**
                     * Account openedDate.
                     * @member {number|Long} openedDate
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.openedDate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * Account accountName.
                     * @member {string} accountName
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     */
                    Account.prototype.accountName = "";

                    /**
                     * Creates a new Account instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.Account
                     * @static
                     * @param {md.maib.app.profile.IAccount=} [properties] Properties to set
                     * @returns {md.maib.app.profile.Account} Account instance
                     */
                    Account.create = function create(properties) {
                        return new Account(properties);
                    };

                    /**
                     * Encodes the specified Account message. Does not implicitly {@link md.maib.app.profile.Account.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.Account
                     * @static
                     * @param {md.maib.app.profile.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.synt != null && Object.hasOwnProperty.call(message, "synt"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.synt);
                        if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.account);
                        if (message.iban != null && Object.hasOwnProperty.call(message, "iban"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.iban);
                        if (message.currency != null && Object.hasOwnProperty.call(message, "currency"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.currency);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.amount);
                        if (message.blockedAmount != null && Object.hasOwnProperty.call(message, "blockedAmount"))
                            writer.uint32(/* id 6, wireType 1 =*/49).double(message.blockedAmount);
                        if (message.isActive != null && Object.hasOwnProperty.call(message, "isActive"))
                            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isActive);
                        if (message.visibility != null && Object.hasOwnProperty.call(message, "visibility"))
                            $root.md.maib.app.profile.VisibilitySetting.encode(message.visibility, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.isCardAccount != null && Object.hasOwnProperty.call(message, "isCardAccount"))
                            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.isCardAccount);
                        if (message.bic != null && Object.hasOwnProperty.call(message, "bic"))
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.bic);
                        if (message.openedInApp != null && Object.hasOwnProperty.call(message, "openedInApp"))
                            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.openedInApp);
                        if (message.openedDate != null && Object.hasOwnProperty.call(message, "openedDate"))
                            writer.uint32(/* id 12, wireType 0 =*/96).int64(message.openedDate);
                        if (message.accountName != null && Object.hasOwnProperty.call(message, "accountName"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.accountName);
                        return writer;
                    };

                    /**
                     * Encodes the specified Account message, length delimited. Does not implicitly {@link md.maib.app.profile.Account.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.Account
                     * @static
                     * @param {md.maib.app.profile.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Account message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.Account();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.synt = reader.string();
                                break;
                            case 2:
                                message.account = reader.string();
                                break;
                            case 3:
                                message.iban = reader.string();
                                break;
                            case 4:
                                message.currency = reader.string();
                                break;
                            case 5:
                                message.amount = reader.double();
                                break;
                            case 6:
                                message.blockedAmount = reader.double();
                                break;
                            case 7:
                                message.isActive = reader.bool();
                                break;
                            case 8:
                                message.visibility = $root.md.maib.app.profile.VisibilitySetting.decode(reader, reader.uint32());
                                break;
                            case 9:
                                message.isCardAccount = reader.bool();
                                break;
                            case 10:
                                message.bic = reader.string();
                                break;
                            case 11:
                                message.openedInApp = reader.bool();
                                break;
                            case 12:
                                message.openedDate = reader.int64();
                                break;
                            case 13:
                                message.accountName = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Account message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Account message.
                     * @function verify
                     * @memberof md.maib.app.profile.Account
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Account.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.synt != null && message.hasOwnProperty("synt"))
                            if (!$util.isString(message.synt))
                                return "synt: string expected";
                        if (message.account != null && message.hasOwnProperty("account"))
                            if (!$util.isString(message.account))
                                return "account: string expected";
                        if (message.iban != null && message.hasOwnProperty("iban"))
                            if (!$util.isString(message.iban))
                                return "iban: string expected";
                        if (message.currency != null && message.hasOwnProperty("currency"))
                            if (!$util.isString(message.currency))
                                return "currency: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (typeof message.amount !== "number")
                                return "amount: number expected";
                        if (message.blockedAmount != null && message.hasOwnProperty("blockedAmount"))
                            if (typeof message.blockedAmount !== "number")
                                return "blockedAmount: number expected";
                        if (message.isActive != null && message.hasOwnProperty("isActive"))
                            if (typeof message.isActive !== "boolean")
                                return "isActive: boolean expected";
                        if (message.visibility != null && message.hasOwnProperty("visibility")) {
                            let error = $root.md.maib.app.profile.VisibilitySetting.verify(message.visibility);
                            if (error)
                                return "visibility." + error;
                        }
                        if (message.isCardAccount != null && message.hasOwnProperty("isCardAccount"))
                            if (typeof message.isCardAccount !== "boolean")
                                return "isCardAccount: boolean expected";
                        if (message.bic != null && message.hasOwnProperty("bic"))
                            if (!$util.isString(message.bic))
                                return "bic: string expected";
                        if (message.openedInApp != null && message.hasOwnProperty("openedInApp"))
                            if (typeof message.openedInApp !== "boolean")
                                return "openedInApp: boolean expected";
                        if (message.openedDate != null && message.hasOwnProperty("openedDate"))
                            if (!$util.isInteger(message.openedDate) && !(message.openedDate && $util.isInteger(message.openedDate.low) && $util.isInteger(message.openedDate.high)))
                                return "openedDate: integer|Long expected";
                        if (message.accountName != null && message.hasOwnProperty("accountName"))
                            if (!$util.isString(message.accountName))
                                return "accountName: string expected";
                        return null;
                    };

                    /**
                     * Creates an Account message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.Account
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.Account} Account
                     */
                    Account.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.Account)
                            return object;
                        let message = new $root.md.maib.app.profile.Account();
                        if (object.synt != null)
                            message.synt = String(object.synt);
                        if (object.account != null)
                            message.account = String(object.account);
                        if (object.iban != null)
                            message.iban = String(object.iban);
                        if (object.currency != null)
                            message.currency = String(object.currency);
                        if (object.amount != null)
                            message.amount = Number(object.amount);
                        if (object.blockedAmount != null)
                            message.blockedAmount = Number(object.blockedAmount);
                        if (object.isActive != null)
                            message.isActive = Boolean(object.isActive);
                        if (object.visibility != null) {
                            if (typeof object.visibility !== "object")
                                throw TypeError(".md.maib.app.profile.Account.visibility: object expected");
                            message.visibility = $root.md.maib.app.profile.VisibilitySetting.fromObject(object.visibility);
                        }
                        if (object.isCardAccount != null)
                            message.isCardAccount = Boolean(object.isCardAccount);
                        if (object.bic != null)
                            message.bic = String(object.bic);
                        if (object.openedInApp != null)
                            message.openedInApp = Boolean(object.openedInApp);
                        if (object.openedDate != null)
                            if ($util.Long)
                                (message.openedDate = $util.Long.fromValue(object.openedDate)).unsigned = false;
                            else if (typeof object.openedDate === "string")
                                message.openedDate = parseInt(object.openedDate, 10);
                            else if (typeof object.openedDate === "number")
                                message.openedDate = object.openedDate;
                            else if (typeof object.openedDate === "object")
                                message.openedDate = new $util.LongBits(object.openedDate.low >>> 0, object.openedDate.high >>> 0).toNumber();
                        if (object.accountName != null)
                            message.accountName = String(object.accountName);
                        return message;
                    };

                    /**
                     * Creates a plain object from an Account message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.Account
                     * @static
                     * @param {md.maib.app.profile.Account} message Account
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Account.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.synt = "";
                            object.account = "";
                            object.iban = "";
                            object.currency = "";
                            object.amount = 0;
                            object.blockedAmount = 0;
                            object.isActive = false;
                            object.visibility = null;
                            object.isCardAccount = false;
                            object.bic = "";
                            object.openedInApp = false;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.openedDate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.openedDate = options.longs === String ? "0" : 0;
                            object.accountName = "";
                        }
                        if (message.synt != null && message.hasOwnProperty("synt"))
                            object.synt = message.synt;
                        if (message.account != null && message.hasOwnProperty("account"))
                            object.account = message.account;
                        if (message.iban != null && message.hasOwnProperty("iban"))
                            object.iban = message.iban;
                        if (message.currency != null && message.hasOwnProperty("currency"))
                            object.currency = message.currency;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                        if (message.blockedAmount != null && message.hasOwnProperty("blockedAmount"))
                            object.blockedAmount = options.json && !isFinite(message.blockedAmount) ? String(message.blockedAmount) : message.blockedAmount;
                        if (message.isActive != null && message.hasOwnProperty("isActive"))
                            object.isActive = message.isActive;
                        if (message.visibility != null && message.hasOwnProperty("visibility"))
                            object.visibility = $root.md.maib.app.profile.VisibilitySetting.toObject(message.visibility, options);
                        if (message.isCardAccount != null && message.hasOwnProperty("isCardAccount"))
                            object.isCardAccount = message.isCardAccount;
                        if (message.bic != null && message.hasOwnProperty("bic"))
                            object.bic = message.bic;
                        if (message.openedInApp != null && message.hasOwnProperty("openedInApp"))
                            object.openedInApp = message.openedInApp;
                        if (message.openedDate != null && message.hasOwnProperty("openedDate"))
                            if (typeof message.openedDate === "number")
                                object.openedDate = options.longs === String ? String(message.openedDate) : message.openedDate;
                            else
                                object.openedDate = options.longs === String ? $util.Long.prototype.toString.call(message.openedDate) : options.longs === Number ? new $util.LongBits(message.openedDate.low >>> 0, message.openedDate.high >>> 0).toNumber() : message.openedDate;
                        if (message.accountName != null && message.hasOwnProperty("accountName"))
                            object.accountName = message.accountName;
                        return object;
                    };

                    /**
                     * Converts this Account to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.Account
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Account.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Account;
                })();

                profile.DepositAccount = (function() {

                    /**
                     * Properties of a DepositAccount.
                     * @memberof md.maib.app.profile
                     * @interface IDepositAccount
                     * @property {string|null} [account] DepositAccount account
                     * @property {number|Long|null} [dateStart] DepositAccount dateStart
                     * @property {number|Long|null} [dateEnd] DepositAccount dateEnd
                     * @property {number|null} [amount] DepositAccount amount
                     * @property {string|null} [currency] DepositAccount currency
                     * @property {number|null} [minimalAmount] DepositAccount minimalAmount
                     * @property {number|null} [blockedAmount] DepositAccount blockedAmount
                     * @property {boolean|null} [permitAdd] DepositAccount permitAdd
                     * @property {boolean|null} [permitPay] DepositAccount permitPay
                     * @property {boolean|null} [isActive] DepositAccount isActive
                     * @property {md.maib.app.profile.IVisibilitySetting|null} [visibility] DepositAccount visibility
                     * @property {string|null} [iban] DepositAccount iban
                     * @property {string|null} [bic] DepositAccount bic
                     * @property {string|null} [depositName] DepositAccount depositName
                     * @property {string|null} [accountName] DepositAccount accountName
                     */

                    /**
                     * Constructs a new DepositAccount.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a DepositAccount.
                     * @implements IDepositAccount
                     * @constructor
                     * @param {md.maib.app.profile.IDepositAccount=} [properties] Properties to set
                     */
                    function DepositAccount(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * DepositAccount account.
                     * @member {string} account
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.account = "";

                    /**
                     * DepositAccount dateStart.
                     * @member {number|Long} dateStart
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.dateStart = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * DepositAccount dateEnd.
                     * @member {number|Long} dateEnd
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.dateEnd = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * DepositAccount amount.
                     * @member {number} amount
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.amount = 0;

                    /**
                     * DepositAccount currency.
                     * @member {string} currency
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.currency = "";

                    /**
                     * DepositAccount minimalAmount.
                     * @member {number} minimalAmount
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.minimalAmount = 0;

                    /**
                     * DepositAccount blockedAmount.
                     * @member {number} blockedAmount
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.blockedAmount = 0;

                    /**
                     * DepositAccount permitAdd.
                     * @member {boolean} permitAdd
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.permitAdd = false;

                    /**
                     * DepositAccount permitPay.
                     * @member {boolean} permitPay
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.permitPay = false;

                    /**
                     * DepositAccount isActive.
                     * @member {boolean} isActive
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.isActive = false;

                    /**
                     * DepositAccount visibility.
                     * @member {md.maib.app.profile.IVisibilitySetting|null|undefined} visibility
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.visibility = null;

                    /**
                     * DepositAccount iban.
                     * @member {string} iban
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.iban = "";

                    /**
                     * DepositAccount bic.
                     * @member {string} bic
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.bic = "";

                    /**
                     * DepositAccount depositName.
                     * @member {string} depositName
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.depositName = "";

                    /**
                     * DepositAccount accountName.
                     * @member {string} accountName
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     */
                    DepositAccount.prototype.accountName = "";

                    /**
                     * Creates a new DepositAccount instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.DepositAccount
                     * @static
                     * @param {md.maib.app.profile.IDepositAccount=} [properties] Properties to set
                     * @returns {md.maib.app.profile.DepositAccount} DepositAccount instance
                     */
                    DepositAccount.create = function create(properties) {
                        return new DepositAccount(properties);
                    };

                    /**
                     * Encodes the specified DepositAccount message. Does not implicitly {@link md.maib.app.profile.DepositAccount.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.DepositAccount
                     * @static
                     * @param {md.maib.app.profile.IDepositAccount} message DepositAccount message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DepositAccount.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
                        if (message.dateStart != null && Object.hasOwnProperty.call(message, "dateStart"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.dateStart);
                        if (message.dateEnd != null && Object.hasOwnProperty.call(message, "dateEnd"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.dateEnd);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.amount);
                        if (message.currency != null && Object.hasOwnProperty.call(message, "currency"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.currency);
                        if (message.minimalAmount != null && Object.hasOwnProperty.call(message, "minimalAmount"))
                            writer.uint32(/* id 6, wireType 1 =*/49).double(message.minimalAmount);
                        if (message.blockedAmount != null && Object.hasOwnProperty.call(message, "blockedAmount"))
                            writer.uint32(/* id 7, wireType 1 =*/57).double(message.blockedAmount);
                        if (message.permitAdd != null && Object.hasOwnProperty.call(message, "permitAdd"))
                            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.permitAdd);
                        if (message.permitPay != null && Object.hasOwnProperty.call(message, "permitPay"))
                            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.permitPay);
                        if (message.isActive != null && Object.hasOwnProperty.call(message, "isActive"))
                            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.isActive);
                        if (message.visibility != null && Object.hasOwnProperty.call(message, "visibility"))
                            $root.md.maib.app.profile.VisibilitySetting.encode(message.visibility, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.iban != null && Object.hasOwnProperty.call(message, "iban"))
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.iban);
                        if (message.bic != null && Object.hasOwnProperty.call(message, "bic"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.bic);
                        if (message.depositName != null && Object.hasOwnProperty.call(message, "depositName"))
                            writer.uint32(/* id 14, wireType 2 =*/114).string(message.depositName);
                        if (message.accountName != null && Object.hasOwnProperty.call(message, "accountName"))
                            writer.uint32(/* id 15, wireType 2 =*/122).string(message.accountName);
                        return writer;
                    };

                    /**
                     * Encodes the specified DepositAccount message, length delimited. Does not implicitly {@link md.maib.app.profile.DepositAccount.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.DepositAccount
                     * @static
                     * @param {md.maib.app.profile.IDepositAccount} message DepositAccount message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DepositAccount.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a DepositAccount message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.DepositAccount
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.DepositAccount} DepositAccount
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DepositAccount.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.DepositAccount();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.account = reader.string();
                                break;
                            case 2:
                                message.dateStart = reader.int64();
                                break;
                            case 3:
                                message.dateEnd = reader.int64();
                                break;
                            case 4:
                                message.amount = reader.double();
                                break;
                            case 5:
                                message.currency = reader.string();
                                break;
                            case 6:
                                message.minimalAmount = reader.double();
                                break;
                            case 7:
                                message.blockedAmount = reader.double();
                                break;
                            case 8:
                                message.permitAdd = reader.bool();
                                break;
                            case 9:
                                message.permitPay = reader.bool();
                                break;
                            case 10:
                                message.isActive = reader.bool();
                                break;
                            case 11:
                                message.visibility = $root.md.maib.app.profile.VisibilitySetting.decode(reader, reader.uint32());
                                break;
                            case 12:
                                message.iban = reader.string();
                                break;
                            case 13:
                                message.bic = reader.string();
                                break;
                            case 14:
                                message.depositName = reader.string();
                                break;
                            case 15:
                                message.accountName = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a DepositAccount message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.DepositAccount
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.DepositAccount} DepositAccount
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DepositAccount.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a DepositAccount message.
                     * @function verify
                     * @memberof md.maib.app.profile.DepositAccount
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DepositAccount.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.account != null && message.hasOwnProperty("account"))
                            if (!$util.isString(message.account))
                                return "account: string expected";
                        if (message.dateStart != null && message.hasOwnProperty("dateStart"))
                            if (!$util.isInteger(message.dateStart) && !(message.dateStart && $util.isInteger(message.dateStart.low) && $util.isInteger(message.dateStart.high)))
                                return "dateStart: integer|Long expected";
                        if (message.dateEnd != null && message.hasOwnProperty("dateEnd"))
                            if (!$util.isInteger(message.dateEnd) && !(message.dateEnd && $util.isInteger(message.dateEnd.low) && $util.isInteger(message.dateEnd.high)))
                                return "dateEnd: integer|Long expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (typeof message.amount !== "number")
                                return "amount: number expected";
                        if (message.currency != null && message.hasOwnProperty("currency"))
                            if (!$util.isString(message.currency))
                                return "currency: string expected";
                        if (message.minimalAmount != null && message.hasOwnProperty("minimalAmount"))
                            if (typeof message.minimalAmount !== "number")
                                return "minimalAmount: number expected";
                        if (message.blockedAmount != null && message.hasOwnProperty("blockedAmount"))
                            if (typeof message.blockedAmount !== "number")
                                return "blockedAmount: number expected";
                        if (message.permitAdd != null && message.hasOwnProperty("permitAdd"))
                            if (typeof message.permitAdd !== "boolean")
                                return "permitAdd: boolean expected";
                        if (message.permitPay != null && message.hasOwnProperty("permitPay"))
                            if (typeof message.permitPay !== "boolean")
                                return "permitPay: boolean expected";
                        if (message.isActive != null && message.hasOwnProperty("isActive"))
                            if (typeof message.isActive !== "boolean")
                                return "isActive: boolean expected";
                        if (message.visibility != null && message.hasOwnProperty("visibility")) {
                            let error = $root.md.maib.app.profile.VisibilitySetting.verify(message.visibility);
                            if (error)
                                return "visibility." + error;
                        }
                        if (message.iban != null && message.hasOwnProperty("iban"))
                            if (!$util.isString(message.iban))
                                return "iban: string expected";
                        if (message.bic != null && message.hasOwnProperty("bic"))
                            if (!$util.isString(message.bic))
                                return "bic: string expected";
                        if (message.depositName != null && message.hasOwnProperty("depositName"))
                            if (!$util.isString(message.depositName))
                                return "depositName: string expected";
                        if (message.accountName != null && message.hasOwnProperty("accountName"))
                            if (!$util.isString(message.accountName))
                                return "accountName: string expected";
                        return null;
                    };

                    /**
                     * Creates a DepositAccount message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.DepositAccount
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.DepositAccount} DepositAccount
                     */
                    DepositAccount.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.DepositAccount)
                            return object;
                        let message = new $root.md.maib.app.profile.DepositAccount();
                        if (object.account != null)
                            message.account = String(object.account);
                        if (object.dateStart != null)
                            if ($util.Long)
                                (message.dateStart = $util.Long.fromValue(object.dateStart)).unsigned = false;
                            else if (typeof object.dateStart === "string")
                                message.dateStart = parseInt(object.dateStart, 10);
                            else if (typeof object.dateStart === "number")
                                message.dateStart = object.dateStart;
                            else if (typeof object.dateStart === "object")
                                message.dateStart = new $util.LongBits(object.dateStart.low >>> 0, object.dateStart.high >>> 0).toNumber();
                        if (object.dateEnd != null)
                            if ($util.Long)
                                (message.dateEnd = $util.Long.fromValue(object.dateEnd)).unsigned = false;
                            else if (typeof object.dateEnd === "string")
                                message.dateEnd = parseInt(object.dateEnd, 10);
                            else if (typeof object.dateEnd === "number")
                                message.dateEnd = object.dateEnd;
                            else if (typeof object.dateEnd === "object")
                                message.dateEnd = new $util.LongBits(object.dateEnd.low >>> 0, object.dateEnd.high >>> 0).toNumber();
                        if (object.amount != null)
                            message.amount = Number(object.amount);
                        if (object.currency != null)
                            message.currency = String(object.currency);
                        if (object.minimalAmount != null)
                            message.minimalAmount = Number(object.minimalAmount);
                        if (object.blockedAmount != null)
                            message.blockedAmount = Number(object.blockedAmount);
                        if (object.permitAdd != null)
                            message.permitAdd = Boolean(object.permitAdd);
                        if (object.permitPay != null)
                            message.permitPay = Boolean(object.permitPay);
                        if (object.isActive != null)
                            message.isActive = Boolean(object.isActive);
                        if (object.visibility != null) {
                            if (typeof object.visibility !== "object")
                                throw TypeError(".md.maib.app.profile.DepositAccount.visibility: object expected");
                            message.visibility = $root.md.maib.app.profile.VisibilitySetting.fromObject(object.visibility);
                        }
                        if (object.iban != null)
                            message.iban = String(object.iban);
                        if (object.bic != null)
                            message.bic = String(object.bic);
                        if (object.depositName != null)
                            message.depositName = String(object.depositName);
                        if (object.accountName != null)
                            message.accountName = String(object.accountName);
                        return message;
                    };

                    /**
                     * Creates a plain object from a DepositAccount message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.DepositAccount
                     * @static
                     * @param {md.maib.app.profile.DepositAccount} message DepositAccount
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DepositAccount.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.account = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.dateStart = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.dateStart = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.dateEnd = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.dateEnd = options.longs === String ? "0" : 0;
                            object.amount = 0;
                            object.currency = "";
                            object.minimalAmount = 0;
                            object.blockedAmount = 0;
                            object.permitAdd = false;
                            object.permitPay = false;
                            object.isActive = false;
                            object.visibility = null;
                            object.iban = "";
                            object.bic = "";
                            object.depositName = "";
                            object.accountName = "";
                        }
                        if (message.account != null && message.hasOwnProperty("account"))
                            object.account = message.account;
                        if (message.dateStart != null && message.hasOwnProperty("dateStart"))
                            if (typeof message.dateStart === "number")
                                object.dateStart = options.longs === String ? String(message.dateStart) : message.dateStart;
                            else
                                object.dateStart = options.longs === String ? $util.Long.prototype.toString.call(message.dateStart) : options.longs === Number ? new $util.LongBits(message.dateStart.low >>> 0, message.dateStart.high >>> 0).toNumber() : message.dateStart;
                        if (message.dateEnd != null && message.hasOwnProperty("dateEnd"))
                            if (typeof message.dateEnd === "number")
                                object.dateEnd = options.longs === String ? String(message.dateEnd) : message.dateEnd;
                            else
                                object.dateEnd = options.longs === String ? $util.Long.prototype.toString.call(message.dateEnd) : options.longs === Number ? new $util.LongBits(message.dateEnd.low >>> 0, message.dateEnd.high >>> 0).toNumber() : message.dateEnd;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                        if (message.currency != null && message.hasOwnProperty("currency"))
                            object.currency = message.currency;
                        if (message.minimalAmount != null && message.hasOwnProperty("minimalAmount"))
                            object.minimalAmount = options.json && !isFinite(message.minimalAmount) ? String(message.minimalAmount) : message.minimalAmount;
                        if (message.blockedAmount != null && message.hasOwnProperty("blockedAmount"))
                            object.blockedAmount = options.json && !isFinite(message.blockedAmount) ? String(message.blockedAmount) : message.blockedAmount;
                        if (message.permitAdd != null && message.hasOwnProperty("permitAdd"))
                            object.permitAdd = message.permitAdd;
                        if (message.permitPay != null && message.hasOwnProperty("permitPay"))
                            object.permitPay = message.permitPay;
                        if (message.isActive != null && message.hasOwnProperty("isActive"))
                            object.isActive = message.isActive;
                        if (message.visibility != null && message.hasOwnProperty("visibility"))
                            object.visibility = $root.md.maib.app.profile.VisibilitySetting.toObject(message.visibility, options);
                        if (message.iban != null && message.hasOwnProperty("iban"))
                            object.iban = message.iban;
                        if (message.bic != null && message.hasOwnProperty("bic"))
                            object.bic = message.bic;
                        if (message.depositName != null && message.hasOwnProperty("depositName"))
                            object.depositName = message.depositName;
                        if (message.accountName != null && message.hasOwnProperty("accountName"))
                            object.accountName = message.accountName;
                        return object;
                    };

                    /**
                     * Converts this DepositAccount to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.DepositAccount
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DepositAccount.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return DepositAccount;
                })();

                profile.CreditAccount = (function() {

                    /**
                     * Properties of a CreditAccount.
                     * @memberof md.maib.app.profile
                     * @interface ICreditAccount
                     * @property {string|null} [account] CreditAccount account
                     * @property {number|null} [amount] CreditAccount amount
                     * @property {number|null} [actualAmount] CreditAccount actualAmount
                     * @property {string|null} [currency] CreditAccount currency
                     * @property {number|null} [overdueAmount] CreditAccount overdueAmount
                     * @property {number|Long|null} [agreeDate] CreditAccount agreeDate
                     * @property {number|Long|null} [endDate] CreditAccount endDate
                     * @property {number|Long|null} [dueDate] CreditAccount dueDate
                     * @property {md.maib.app.profile.IVisibilitySetting|null} [visibility] CreditAccount visibility
                     * @property {string|null} [iban] CreditAccount iban
                     * @property {string|null} [bic] CreditAccount bic
                     * @property {number|null} [period] CreditAccount period
                     * @property {string|null} [name] CreditAccount name
                     * @property {boolean|null} [openedInApp] CreditAccount openedInApp
                     * @property {string|null} [interestAccount] CreditAccount interestAccount
                     * @property {string|null} [interestIban] CreditAccount interestIban
                     * @property {number|null} [totalDebtAmount] CreditAccount totalDebtAmount
                     * @property {number|null} [baseDebtAmount] CreditAccount baseDebtAmount
                     * @property {number|null} [interestDebtAmount] CreditAccount interestDebtAmount
                     * @property {number|null} [penaltyDebtAmount] CreditAccount penaltyDebtAmount
                     * @property {boolean|null} [hasDebt] CreditAccount hasDebt
                     * @property {number|null} [penaltyDaysCount] CreditAccount penaltyDaysCount
                     */

                    /**
                     * Constructs a new CreditAccount.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a CreditAccount.
                     * @implements ICreditAccount
                     * @constructor
                     * @param {md.maib.app.profile.ICreditAccount=} [properties] Properties to set
                     */
                    function CreditAccount(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CreditAccount account.
                     * @member {string} account
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.account = "";

                    /**
                     * CreditAccount amount.
                     * @member {number} amount
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.amount = 0;

                    /**
                     * CreditAccount actualAmount.
                     * @member {number} actualAmount
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.actualAmount = 0;

                    /**
                     * CreditAccount currency.
                     * @member {string} currency
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.currency = "";

                    /**
                     * CreditAccount overdueAmount.
                     * @member {number} overdueAmount
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.overdueAmount = 0;

                    /**
                     * CreditAccount agreeDate.
                     * @member {number|Long} agreeDate
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.agreeDate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * CreditAccount endDate.
                     * @member {number|Long} endDate
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.endDate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * CreditAccount dueDate.
                     * @member {number|Long} dueDate
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.dueDate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * CreditAccount visibility.
                     * @member {md.maib.app.profile.IVisibilitySetting|null|undefined} visibility
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.visibility = null;

                    /**
                     * CreditAccount iban.
                     * @member {string} iban
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.iban = "";

                    /**
                     * CreditAccount bic.
                     * @member {string} bic
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.bic = "";

                    /**
                     * CreditAccount period.
                     * @member {number} period
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.period = 0;

                    /**
                     * CreditAccount name.
                     * @member {string} name
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.name = "";

                    /**
                     * CreditAccount openedInApp.
                     * @member {boolean} openedInApp
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.openedInApp = false;

                    /**
                     * CreditAccount interestAccount.
                     * @member {string} interestAccount
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.interestAccount = "";

                    /**
                     * CreditAccount interestIban.
                     * @member {string} interestIban
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.interestIban = "";

                    /**
                     * CreditAccount totalDebtAmount.
                     * @member {number} totalDebtAmount
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.totalDebtAmount = 0;

                    /**
                     * CreditAccount baseDebtAmount.
                     * @member {number} baseDebtAmount
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.baseDebtAmount = 0;

                    /**
                     * CreditAccount interestDebtAmount.
                     * @member {number} interestDebtAmount
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.interestDebtAmount = 0;

                    /**
                     * CreditAccount penaltyDebtAmount.
                     * @member {number} penaltyDebtAmount
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.penaltyDebtAmount = 0;

                    /**
                     * CreditAccount hasDebt.
                     * @member {boolean} hasDebt
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.hasDebt = false;

                    /**
                     * CreditAccount penaltyDaysCount.
                     * @member {number} penaltyDaysCount
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     */
                    CreditAccount.prototype.penaltyDaysCount = 0;

                    /**
                     * Creates a new CreditAccount instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.CreditAccount
                     * @static
                     * @param {md.maib.app.profile.ICreditAccount=} [properties] Properties to set
                     * @returns {md.maib.app.profile.CreditAccount} CreditAccount instance
                     */
                    CreditAccount.create = function create(properties) {
                        return new CreditAccount(properties);
                    };

                    /**
                     * Encodes the specified CreditAccount message. Does not implicitly {@link md.maib.app.profile.CreditAccount.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.CreditAccount
                     * @static
                     * @param {md.maib.app.profile.ICreditAccount} message CreditAccount message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreditAccount.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.amount);
                        if (message.actualAmount != null && Object.hasOwnProperty.call(message, "actualAmount"))
                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.actualAmount);
                        if (message.currency != null && Object.hasOwnProperty.call(message, "currency"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.currency);
                        if (message.overdueAmount != null && Object.hasOwnProperty.call(message, "overdueAmount"))
                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.overdueAmount);
                        if (message.agreeDate != null && Object.hasOwnProperty.call(message, "agreeDate"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.agreeDate);
                        if (message.endDate != null && Object.hasOwnProperty.call(message, "endDate"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.endDate);
                        if (message.dueDate != null && Object.hasOwnProperty.call(message, "dueDate"))
                            writer.uint32(/* id 8, wireType 0 =*/64).int64(message.dueDate);
                        if (message.visibility != null && Object.hasOwnProperty.call(message, "visibility"))
                            $root.md.maib.app.profile.VisibilitySetting.encode(message.visibility, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.iban != null && Object.hasOwnProperty.call(message, "iban"))
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.iban);
                        if (message.bic != null && Object.hasOwnProperty.call(message, "bic"))
                            writer.uint32(/* id 11, wireType 2 =*/90).string(message.bic);
                        if (message.period != null && Object.hasOwnProperty.call(message, "period"))
                            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.period);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.name);
                        if (message.openedInApp != null && Object.hasOwnProperty.call(message, "openedInApp"))
                            writer.uint32(/* id 14, wireType 0 =*/112).bool(message.openedInApp);
                        if (message.interestAccount != null && Object.hasOwnProperty.call(message, "interestAccount"))
                            writer.uint32(/* id 15, wireType 2 =*/122).string(message.interestAccount);
                        if (message.interestIban != null && Object.hasOwnProperty.call(message, "interestIban"))
                            writer.uint32(/* id 16, wireType 2 =*/130).string(message.interestIban);
                        if (message.totalDebtAmount != null && Object.hasOwnProperty.call(message, "totalDebtAmount"))
                            writer.uint32(/* id 17, wireType 1 =*/137).double(message.totalDebtAmount);
                        if (message.baseDebtAmount != null && Object.hasOwnProperty.call(message, "baseDebtAmount"))
                            writer.uint32(/* id 18, wireType 1 =*/145).double(message.baseDebtAmount);
                        if (message.interestDebtAmount != null && Object.hasOwnProperty.call(message, "interestDebtAmount"))
                            writer.uint32(/* id 19, wireType 1 =*/153).double(message.interestDebtAmount);
                        if (message.penaltyDebtAmount != null && Object.hasOwnProperty.call(message, "penaltyDebtAmount"))
                            writer.uint32(/* id 20, wireType 1 =*/161).double(message.penaltyDebtAmount);
                        if (message.hasDebt != null && Object.hasOwnProperty.call(message, "hasDebt"))
                            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.hasDebt);
                        if (message.penaltyDaysCount != null && Object.hasOwnProperty.call(message, "penaltyDaysCount"))
                            writer.uint32(/* id 22, wireType 0 =*/176).int32(message.penaltyDaysCount);
                        return writer;
                    };

                    /**
                     * Encodes the specified CreditAccount message, length delimited. Does not implicitly {@link md.maib.app.profile.CreditAccount.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.CreditAccount
                     * @static
                     * @param {md.maib.app.profile.ICreditAccount} message CreditAccount message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreditAccount.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CreditAccount message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.CreditAccount
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.CreditAccount} CreditAccount
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreditAccount.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.CreditAccount();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.account = reader.string();
                                break;
                            case 2:
                                message.amount = reader.double();
                                break;
                            case 3:
                                message.actualAmount = reader.double();
                                break;
                            case 4:
                                message.currency = reader.string();
                                break;
                            case 5:
                                message.overdueAmount = reader.double();
                                break;
                            case 6:
                                message.agreeDate = reader.int64();
                                break;
                            case 7:
                                message.endDate = reader.int64();
                                break;
                            case 8:
                                message.dueDate = reader.int64();
                                break;
                            case 9:
                                message.visibility = $root.md.maib.app.profile.VisibilitySetting.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.iban = reader.string();
                                break;
                            case 11:
                                message.bic = reader.string();
                                break;
                            case 12:
                                message.period = reader.int32();
                                break;
                            case 13:
                                message.name = reader.string();
                                break;
                            case 14:
                                message.openedInApp = reader.bool();
                                break;
                            case 15:
                                message.interestAccount = reader.string();
                                break;
                            case 16:
                                message.interestIban = reader.string();
                                break;
                            case 17:
                                message.totalDebtAmount = reader.double();
                                break;
                            case 18:
                                message.baseDebtAmount = reader.double();
                                break;
                            case 19:
                                message.interestDebtAmount = reader.double();
                                break;
                            case 20:
                                message.penaltyDebtAmount = reader.double();
                                break;
                            case 21:
                                message.hasDebt = reader.bool();
                                break;
                            case 22:
                                message.penaltyDaysCount = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CreditAccount message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.CreditAccount
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.CreditAccount} CreditAccount
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreditAccount.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CreditAccount message.
                     * @function verify
                     * @memberof md.maib.app.profile.CreditAccount
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreditAccount.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.account != null && message.hasOwnProperty("account"))
                            if (!$util.isString(message.account))
                                return "account: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (typeof message.amount !== "number")
                                return "amount: number expected";
                        if (message.actualAmount != null && message.hasOwnProperty("actualAmount"))
                            if (typeof message.actualAmount !== "number")
                                return "actualAmount: number expected";
                        if (message.currency != null && message.hasOwnProperty("currency"))
                            if (!$util.isString(message.currency))
                                return "currency: string expected";
                        if (message.overdueAmount != null && message.hasOwnProperty("overdueAmount"))
                            if (typeof message.overdueAmount !== "number")
                                return "overdueAmount: number expected";
                        if (message.agreeDate != null && message.hasOwnProperty("agreeDate"))
                            if (!$util.isInteger(message.agreeDate) && !(message.agreeDate && $util.isInteger(message.agreeDate.low) && $util.isInteger(message.agreeDate.high)))
                                return "agreeDate: integer|Long expected";
                        if (message.endDate != null && message.hasOwnProperty("endDate"))
                            if (!$util.isInteger(message.endDate) && !(message.endDate && $util.isInteger(message.endDate.low) && $util.isInteger(message.endDate.high)))
                                return "endDate: integer|Long expected";
                        if (message.dueDate != null && message.hasOwnProperty("dueDate"))
                            if (!$util.isInteger(message.dueDate) && !(message.dueDate && $util.isInteger(message.dueDate.low) && $util.isInteger(message.dueDate.high)))
                                return "dueDate: integer|Long expected";
                        if (message.visibility != null && message.hasOwnProperty("visibility")) {
                            let error = $root.md.maib.app.profile.VisibilitySetting.verify(message.visibility);
                            if (error)
                                return "visibility." + error;
                        }
                        if (message.iban != null && message.hasOwnProperty("iban"))
                            if (!$util.isString(message.iban))
                                return "iban: string expected";
                        if (message.bic != null && message.hasOwnProperty("bic"))
                            if (!$util.isString(message.bic))
                                return "bic: string expected";
                        if (message.period != null && message.hasOwnProperty("period"))
                            if (!$util.isInteger(message.period))
                                return "period: integer expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.openedInApp != null && message.hasOwnProperty("openedInApp"))
                            if (typeof message.openedInApp !== "boolean")
                                return "openedInApp: boolean expected";
                        if (message.interestAccount != null && message.hasOwnProperty("interestAccount"))
                            if (!$util.isString(message.interestAccount))
                                return "interestAccount: string expected";
                        if (message.interestIban != null && message.hasOwnProperty("interestIban"))
                            if (!$util.isString(message.interestIban))
                                return "interestIban: string expected";
                        if (message.totalDebtAmount != null && message.hasOwnProperty("totalDebtAmount"))
                            if (typeof message.totalDebtAmount !== "number")
                                return "totalDebtAmount: number expected";
                        if (message.baseDebtAmount != null && message.hasOwnProperty("baseDebtAmount"))
                            if (typeof message.baseDebtAmount !== "number")
                                return "baseDebtAmount: number expected";
                        if (message.interestDebtAmount != null && message.hasOwnProperty("interestDebtAmount"))
                            if (typeof message.interestDebtAmount !== "number")
                                return "interestDebtAmount: number expected";
                        if (message.penaltyDebtAmount != null && message.hasOwnProperty("penaltyDebtAmount"))
                            if (typeof message.penaltyDebtAmount !== "number")
                                return "penaltyDebtAmount: number expected";
                        if (message.hasDebt != null && message.hasOwnProperty("hasDebt"))
                            if (typeof message.hasDebt !== "boolean")
                                return "hasDebt: boolean expected";
                        if (message.penaltyDaysCount != null && message.hasOwnProperty("penaltyDaysCount"))
                            if (!$util.isInteger(message.penaltyDaysCount))
                                return "penaltyDaysCount: integer expected";
                        return null;
                    };

                    /**
                     * Creates a CreditAccount message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.CreditAccount
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.CreditAccount} CreditAccount
                     */
                    CreditAccount.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.CreditAccount)
                            return object;
                        let message = new $root.md.maib.app.profile.CreditAccount();
                        if (object.account != null)
                            message.account = String(object.account);
                        if (object.amount != null)
                            message.amount = Number(object.amount);
                        if (object.actualAmount != null)
                            message.actualAmount = Number(object.actualAmount);
                        if (object.currency != null)
                            message.currency = String(object.currency);
                        if (object.overdueAmount != null)
                            message.overdueAmount = Number(object.overdueAmount);
                        if (object.agreeDate != null)
                            if ($util.Long)
                                (message.agreeDate = $util.Long.fromValue(object.agreeDate)).unsigned = false;
                            else if (typeof object.agreeDate === "string")
                                message.agreeDate = parseInt(object.agreeDate, 10);
                            else if (typeof object.agreeDate === "number")
                                message.agreeDate = object.agreeDate;
                            else if (typeof object.agreeDate === "object")
                                message.agreeDate = new $util.LongBits(object.agreeDate.low >>> 0, object.agreeDate.high >>> 0).toNumber();
                        if (object.endDate != null)
                            if ($util.Long)
                                (message.endDate = $util.Long.fromValue(object.endDate)).unsigned = false;
                            else if (typeof object.endDate === "string")
                                message.endDate = parseInt(object.endDate, 10);
                            else if (typeof object.endDate === "number")
                                message.endDate = object.endDate;
                            else if (typeof object.endDate === "object")
                                message.endDate = new $util.LongBits(object.endDate.low >>> 0, object.endDate.high >>> 0).toNumber();
                        if (object.dueDate != null)
                            if ($util.Long)
                                (message.dueDate = $util.Long.fromValue(object.dueDate)).unsigned = false;
                            else if (typeof object.dueDate === "string")
                                message.dueDate = parseInt(object.dueDate, 10);
                            else if (typeof object.dueDate === "number")
                                message.dueDate = object.dueDate;
                            else if (typeof object.dueDate === "object")
                                message.dueDate = new $util.LongBits(object.dueDate.low >>> 0, object.dueDate.high >>> 0).toNumber();
                        if (object.visibility != null) {
                            if (typeof object.visibility !== "object")
                                throw TypeError(".md.maib.app.profile.CreditAccount.visibility: object expected");
                            message.visibility = $root.md.maib.app.profile.VisibilitySetting.fromObject(object.visibility);
                        }
                        if (object.iban != null)
                            message.iban = String(object.iban);
                        if (object.bic != null)
                            message.bic = String(object.bic);
                        if (object.period != null)
                            message.period = object.period | 0;
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.openedInApp != null)
                            message.openedInApp = Boolean(object.openedInApp);
                        if (object.interestAccount != null)
                            message.interestAccount = String(object.interestAccount);
                        if (object.interestIban != null)
                            message.interestIban = String(object.interestIban);
                        if (object.totalDebtAmount != null)
                            message.totalDebtAmount = Number(object.totalDebtAmount);
                        if (object.baseDebtAmount != null)
                            message.baseDebtAmount = Number(object.baseDebtAmount);
                        if (object.interestDebtAmount != null)
                            message.interestDebtAmount = Number(object.interestDebtAmount);
                        if (object.penaltyDebtAmount != null)
                            message.penaltyDebtAmount = Number(object.penaltyDebtAmount);
                        if (object.hasDebt != null)
                            message.hasDebt = Boolean(object.hasDebt);
                        if (object.penaltyDaysCount != null)
                            message.penaltyDaysCount = object.penaltyDaysCount | 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a CreditAccount message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.CreditAccount
                     * @static
                     * @param {md.maib.app.profile.CreditAccount} message CreditAccount
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreditAccount.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.account = "";
                            object.amount = 0;
                            object.actualAmount = 0;
                            object.currency = "";
                            object.overdueAmount = 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.agreeDate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.agreeDate = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.endDate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.endDate = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.dueDate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.dueDate = options.longs === String ? "0" : 0;
                            object.visibility = null;
                            object.iban = "";
                            object.bic = "";
                            object.period = 0;
                            object.name = "";
                            object.openedInApp = false;
                            object.interestAccount = "";
                            object.interestIban = "";
                            object.totalDebtAmount = 0;
                            object.baseDebtAmount = 0;
                            object.interestDebtAmount = 0;
                            object.penaltyDebtAmount = 0;
                            object.hasDebt = false;
                            object.penaltyDaysCount = 0;
                        }
                        if (message.account != null && message.hasOwnProperty("account"))
                            object.account = message.account;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                        if (message.actualAmount != null && message.hasOwnProperty("actualAmount"))
                            object.actualAmount = options.json && !isFinite(message.actualAmount) ? String(message.actualAmount) : message.actualAmount;
                        if (message.currency != null && message.hasOwnProperty("currency"))
                            object.currency = message.currency;
                        if (message.overdueAmount != null && message.hasOwnProperty("overdueAmount"))
                            object.overdueAmount = options.json && !isFinite(message.overdueAmount) ? String(message.overdueAmount) : message.overdueAmount;
                        if (message.agreeDate != null && message.hasOwnProperty("agreeDate"))
                            if (typeof message.agreeDate === "number")
                                object.agreeDate = options.longs === String ? String(message.agreeDate) : message.agreeDate;
                            else
                                object.agreeDate = options.longs === String ? $util.Long.prototype.toString.call(message.agreeDate) : options.longs === Number ? new $util.LongBits(message.agreeDate.low >>> 0, message.agreeDate.high >>> 0).toNumber() : message.agreeDate;
                        if (message.endDate != null && message.hasOwnProperty("endDate"))
                            if (typeof message.endDate === "number")
                                object.endDate = options.longs === String ? String(message.endDate) : message.endDate;
                            else
                                object.endDate = options.longs === String ? $util.Long.prototype.toString.call(message.endDate) : options.longs === Number ? new $util.LongBits(message.endDate.low >>> 0, message.endDate.high >>> 0).toNumber() : message.endDate;
                        if (message.dueDate != null && message.hasOwnProperty("dueDate"))
                            if (typeof message.dueDate === "number")
                                object.dueDate = options.longs === String ? String(message.dueDate) : message.dueDate;
                            else
                                object.dueDate = options.longs === String ? $util.Long.prototype.toString.call(message.dueDate) : options.longs === Number ? new $util.LongBits(message.dueDate.low >>> 0, message.dueDate.high >>> 0).toNumber() : message.dueDate;
                        if (message.visibility != null && message.hasOwnProperty("visibility"))
                            object.visibility = $root.md.maib.app.profile.VisibilitySetting.toObject(message.visibility, options);
                        if (message.iban != null && message.hasOwnProperty("iban"))
                            object.iban = message.iban;
                        if (message.bic != null && message.hasOwnProperty("bic"))
                            object.bic = message.bic;
                        if (message.period != null && message.hasOwnProperty("period"))
                            object.period = message.period;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.openedInApp != null && message.hasOwnProperty("openedInApp"))
                            object.openedInApp = message.openedInApp;
                        if (message.interestAccount != null && message.hasOwnProperty("interestAccount"))
                            object.interestAccount = message.interestAccount;
                        if (message.interestIban != null && message.hasOwnProperty("interestIban"))
                            object.interestIban = message.interestIban;
                        if (message.totalDebtAmount != null && message.hasOwnProperty("totalDebtAmount"))
                            object.totalDebtAmount = options.json && !isFinite(message.totalDebtAmount) ? String(message.totalDebtAmount) : message.totalDebtAmount;
                        if (message.baseDebtAmount != null && message.hasOwnProperty("baseDebtAmount"))
                            object.baseDebtAmount = options.json && !isFinite(message.baseDebtAmount) ? String(message.baseDebtAmount) : message.baseDebtAmount;
                        if (message.interestDebtAmount != null && message.hasOwnProperty("interestDebtAmount"))
                            object.interestDebtAmount = options.json && !isFinite(message.interestDebtAmount) ? String(message.interestDebtAmount) : message.interestDebtAmount;
                        if (message.penaltyDebtAmount != null && message.hasOwnProperty("penaltyDebtAmount"))
                            object.penaltyDebtAmount = options.json && !isFinite(message.penaltyDebtAmount) ? String(message.penaltyDebtAmount) : message.penaltyDebtAmount;
                        if (message.hasDebt != null && message.hasOwnProperty("hasDebt"))
                            object.hasDebt = message.hasDebt;
                        if (message.penaltyDaysCount != null && message.hasOwnProperty("penaltyDaysCount"))
                            object.penaltyDaysCount = message.penaltyDaysCount;
                        return object;
                    };

                    /**
                     * Converts this CreditAccount to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.CreditAccount
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreditAccount.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CreditAccount;
                })();

                profile.CardCreditAccount = (function() {

                    /**
                     * Properties of a CardCreditAccount.
                     * @memberof md.maib.app.profile
                     * @interface ICardCreditAccount
                     * @property {string|null} [account] CardCreditAccount account
                     * @property {number|null} [amount] CardCreditAccount amount
                     * @property {string|null} [currency] CardCreditAccount currency
                     * @property {number|null} [actualLimit] CardCreditAccount actualLimit
                     * @property {number|Long|null} [agreeDate] CardCreditAccount agreeDate
                     * @property {number|Long|null} [endDate] CardCreditAccount endDate
                     * @property {md.maib.app.profile.IVisibilitySetting|null} [visibility] CardCreditAccount visibility
                     * @property {string|null} [iban] CardCreditAccount iban
                     * @property {string|null} [bic] CardCreditAccount bic
                     * @property {string|null} [name] CardCreditAccount name
                     */

                    /**
                     * Constructs a new CardCreditAccount.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a CardCreditAccount.
                     * @implements ICardCreditAccount
                     * @constructor
                     * @param {md.maib.app.profile.ICardCreditAccount=} [properties] Properties to set
                     */
                    function CardCreditAccount(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CardCreditAccount account.
                     * @member {string} account
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     */
                    CardCreditAccount.prototype.account = "";

                    /**
                     * CardCreditAccount amount.
                     * @member {number} amount
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     */
                    CardCreditAccount.prototype.amount = 0;

                    /**
                     * CardCreditAccount currency.
                     * @member {string} currency
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     */
                    CardCreditAccount.prototype.currency = "";

                    /**
                     * CardCreditAccount actualLimit.
                     * @member {number} actualLimit
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     */
                    CardCreditAccount.prototype.actualLimit = 0;

                    /**
                     * CardCreditAccount agreeDate.
                     * @member {number|Long} agreeDate
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     */
                    CardCreditAccount.prototype.agreeDate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * CardCreditAccount endDate.
                     * @member {number|Long} endDate
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     */
                    CardCreditAccount.prototype.endDate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * CardCreditAccount visibility.
                     * @member {md.maib.app.profile.IVisibilitySetting|null|undefined} visibility
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     */
                    CardCreditAccount.prototype.visibility = null;

                    /**
                     * CardCreditAccount iban.
                     * @member {string} iban
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     */
                    CardCreditAccount.prototype.iban = "";

                    /**
                     * CardCreditAccount bic.
                     * @member {string} bic
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     */
                    CardCreditAccount.prototype.bic = "";

                    /**
                     * CardCreditAccount name.
                     * @member {string} name
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     */
                    CardCreditAccount.prototype.name = "";

                    /**
                     * Creates a new CardCreditAccount instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @static
                     * @param {md.maib.app.profile.ICardCreditAccount=} [properties] Properties to set
                     * @returns {md.maib.app.profile.CardCreditAccount} CardCreditAccount instance
                     */
                    CardCreditAccount.create = function create(properties) {
                        return new CardCreditAccount(properties);
                    };

                    /**
                     * Encodes the specified CardCreditAccount message. Does not implicitly {@link md.maib.app.profile.CardCreditAccount.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @static
                     * @param {md.maib.app.profile.ICardCreditAccount} message CardCreditAccount message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CardCreditAccount.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.amount);
                        if (message.currency != null && Object.hasOwnProperty.call(message, "currency"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.currency);
                        if (message.actualLimit != null && Object.hasOwnProperty.call(message, "actualLimit"))
                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.actualLimit);
                        if (message.agreeDate != null && Object.hasOwnProperty.call(message, "agreeDate"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.agreeDate);
                        if (message.endDate != null && Object.hasOwnProperty.call(message, "endDate"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.endDate);
                        if (message.visibility != null && Object.hasOwnProperty.call(message, "visibility"))
                            $root.md.maib.app.profile.VisibilitySetting.encode(message.visibility, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.iban != null && Object.hasOwnProperty.call(message, "iban"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.iban);
                        if (message.bic != null && Object.hasOwnProperty.call(message, "bic"))
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.bic);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.name);
                        return writer;
                    };

                    /**
                     * Encodes the specified CardCreditAccount message, length delimited. Does not implicitly {@link md.maib.app.profile.CardCreditAccount.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @static
                     * @param {md.maib.app.profile.ICardCreditAccount} message CardCreditAccount message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CardCreditAccount.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CardCreditAccount message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.CardCreditAccount} CardCreditAccount
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CardCreditAccount.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.CardCreditAccount();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.account = reader.string();
                                break;
                            case 2:
                                message.amount = reader.double();
                                break;
                            case 3:
                                message.currency = reader.string();
                                break;
                            case 4:
                                message.actualLimit = reader.double();
                                break;
                            case 5:
                                message.agreeDate = reader.int64();
                                break;
                            case 6:
                                message.endDate = reader.int64();
                                break;
                            case 7:
                                message.visibility = $root.md.maib.app.profile.VisibilitySetting.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.iban = reader.string();
                                break;
                            case 9:
                                message.bic = reader.string();
                                break;
                            case 10:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CardCreditAccount message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.CardCreditAccount} CardCreditAccount
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CardCreditAccount.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CardCreditAccount message.
                     * @function verify
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CardCreditAccount.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.account != null && message.hasOwnProperty("account"))
                            if (!$util.isString(message.account))
                                return "account: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (typeof message.amount !== "number")
                                return "amount: number expected";
                        if (message.currency != null && message.hasOwnProperty("currency"))
                            if (!$util.isString(message.currency))
                                return "currency: string expected";
                        if (message.actualLimit != null && message.hasOwnProperty("actualLimit"))
                            if (typeof message.actualLimit !== "number")
                                return "actualLimit: number expected";
                        if (message.agreeDate != null && message.hasOwnProperty("agreeDate"))
                            if (!$util.isInteger(message.agreeDate) && !(message.agreeDate && $util.isInteger(message.agreeDate.low) && $util.isInteger(message.agreeDate.high)))
                                return "agreeDate: integer|Long expected";
                        if (message.endDate != null && message.hasOwnProperty("endDate"))
                            if (!$util.isInteger(message.endDate) && !(message.endDate && $util.isInteger(message.endDate.low) && $util.isInteger(message.endDate.high)))
                                return "endDate: integer|Long expected";
                        if (message.visibility != null && message.hasOwnProperty("visibility")) {
                            let error = $root.md.maib.app.profile.VisibilitySetting.verify(message.visibility);
                            if (error)
                                return "visibility." + error;
                        }
                        if (message.iban != null && message.hasOwnProperty("iban"))
                            if (!$util.isString(message.iban))
                                return "iban: string expected";
                        if (message.bic != null && message.hasOwnProperty("bic"))
                            if (!$util.isString(message.bic))
                                return "bic: string expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };

                    /**
                     * Creates a CardCreditAccount message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.CardCreditAccount} CardCreditAccount
                     */
                    CardCreditAccount.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.CardCreditAccount)
                            return object;
                        let message = new $root.md.maib.app.profile.CardCreditAccount();
                        if (object.account != null)
                            message.account = String(object.account);
                        if (object.amount != null)
                            message.amount = Number(object.amount);
                        if (object.currency != null)
                            message.currency = String(object.currency);
                        if (object.actualLimit != null)
                            message.actualLimit = Number(object.actualLimit);
                        if (object.agreeDate != null)
                            if ($util.Long)
                                (message.agreeDate = $util.Long.fromValue(object.agreeDate)).unsigned = false;
                            else if (typeof object.agreeDate === "string")
                                message.agreeDate = parseInt(object.agreeDate, 10);
                            else if (typeof object.agreeDate === "number")
                                message.agreeDate = object.agreeDate;
                            else if (typeof object.agreeDate === "object")
                                message.agreeDate = new $util.LongBits(object.agreeDate.low >>> 0, object.agreeDate.high >>> 0).toNumber();
                        if (object.endDate != null)
                            if ($util.Long)
                                (message.endDate = $util.Long.fromValue(object.endDate)).unsigned = false;
                            else if (typeof object.endDate === "string")
                                message.endDate = parseInt(object.endDate, 10);
                            else if (typeof object.endDate === "number")
                                message.endDate = object.endDate;
                            else if (typeof object.endDate === "object")
                                message.endDate = new $util.LongBits(object.endDate.low >>> 0, object.endDate.high >>> 0).toNumber();
                        if (object.visibility != null) {
                            if (typeof object.visibility !== "object")
                                throw TypeError(".md.maib.app.profile.CardCreditAccount.visibility: object expected");
                            message.visibility = $root.md.maib.app.profile.VisibilitySetting.fromObject(object.visibility);
                        }
                        if (object.iban != null)
                            message.iban = String(object.iban);
                        if (object.bic != null)
                            message.bic = String(object.bic);
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CardCreditAccount message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @static
                     * @param {md.maib.app.profile.CardCreditAccount} message CardCreditAccount
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CardCreditAccount.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.account = "";
                            object.amount = 0;
                            object.currency = "";
                            object.actualLimit = 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.agreeDate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.agreeDate = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.endDate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.endDate = options.longs === String ? "0" : 0;
                            object.visibility = null;
                            object.iban = "";
                            object.bic = "";
                            object.name = "";
                        }
                        if (message.account != null && message.hasOwnProperty("account"))
                            object.account = message.account;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                        if (message.currency != null && message.hasOwnProperty("currency"))
                            object.currency = message.currency;
                        if (message.actualLimit != null && message.hasOwnProperty("actualLimit"))
                            object.actualLimit = options.json && !isFinite(message.actualLimit) ? String(message.actualLimit) : message.actualLimit;
                        if (message.agreeDate != null && message.hasOwnProperty("agreeDate"))
                            if (typeof message.agreeDate === "number")
                                object.agreeDate = options.longs === String ? String(message.agreeDate) : message.agreeDate;
                            else
                                object.agreeDate = options.longs === String ? $util.Long.prototype.toString.call(message.agreeDate) : options.longs === Number ? new $util.LongBits(message.agreeDate.low >>> 0, message.agreeDate.high >>> 0).toNumber() : message.agreeDate;
                        if (message.endDate != null && message.hasOwnProperty("endDate"))
                            if (typeof message.endDate === "number")
                                object.endDate = options.longs === String ? String(message.endDate) : message.endDate;
                            else
                                object.endDate = options.longs === String ? $util.Long.prototype.toString.call(message.endDate) : options.longs === Number ? new $util.LongBits(message.endDate.low >>> 0, message.endDate.high >>> 0).toNumber() : message.endDate;
                        if (message.visibility != null && message.hasOwnProperty("visibility"))
                            object.visibility = $root.md.maib.app.profile.VisibilitySetting.toObject(message.visibility, options);
                        if (message.iban != null && message.hasOwnProperty("iban"))
                            object.iban = message.iban;
                        if (message.bic != null && message.hasOwnProperty("bic"))
                            object.bic = message.bic;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };

                    /**
                     * Converts this CardCreditAccount to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.CardCreditAccount
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CardCreditAccount.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CardCreditAccount;
                })();

                profile.CreditInfo = (function() {

                    /**
                     * Properties of a CreditInfo.
                     * @memberof md.maib.app.profile
                     * @interface ICreditInfo
                     * @property {boolean|null} [offerExist] CreditInfo offerExist
                     * @property {number|Long|null} [offerId] CreditInfo offerId
                     * @property {number|null} [maxAmountLimit] CreditInfo maxAmountLimit
                     * @property {string|null} [ccy] CreditInfo ccy
                     * @property {md.maib.app.predefinedCredit.IBannerSettings|null} [banner] CreditInfo banner
                     */

                    /**
                     * Constructs a new CreditInfo.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a CreditInfo.
                     * @implements ICreditInfo
                     * @constructor
                     * @param {md.maib.app.profile.ICreditInfo=} [properties] Properties to set
                     */
                    function CreditInfo(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CreditInfo offerExist.
                     * @member {boolean} offerExist
                     * @memberof md.maib.app.profile.CreditInfo
                     * @instance
                     */
                    CreditInfo.prototype.offerExist = false;

                    /**
                     * CreditInfo offerId.
                     * @member {number|Long} offerId
                     * @memberof md.maib.app.profile.CreditInfo
                     * @instance
                     */
                    CreditInfo.prototype.offerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * CreditInfo maxAmountLimit.
                     * @member {number} maxAmountLimit
                     * @memberof md.maib.app.profile.CreditInfo
                     * @instance
                     */
                    CreditInfo.prototype.maxAmountLimit = 0;

                    /**
                     * CreditInfo ccy.
                     * @member {string} ccy
                     * @memberof md.maib.app.profile.CreditInfo
                     * @instance
                     */
                    CreditInfo.prototype.ccy = "";

                    /**
                     * CreditInfo banner.
                     * @member {md.maib.app.predefinedCredit.IBannerSettings|null|undefined} banner
                     * @memberof md.maib.app.profile.CreditInfo
                     * @instance
                     */
                    CreditInfo.prototype.banner = null;

                    /**
                     * Creates a new CreditInfo instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.CreditInfo
                     * @static
                     * @param {md.maib.app.profile.ICreditInfo=} [properties] Properties to set
                     * @returns {md.maib.app.profile.CreditInfo} CreditInfo instance
                     */
                    CreditInfo.create = function create(properties) {
                        return new CreditInfo(properties);
                    };

                    /**
                     * Encodes the specified CreditInfo message. Does not implicitly {@link md.maib.app.profile.CreditInfo.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.CreditInfo
                     * @static
                     * @param {md.maib.app.profile.ICreditInfo} message CreditInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreditInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.offerExist != null && Object.hasOwnProperty.call(message, "offerExist"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.offerExist);
                        if (message.offerId != null && Object.hasOwnProperty.call(message, "offerId"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.offerId);
                        if (message.maxAmountLimit != null && Object.hasOwnProperty.call(message, "maxAmountLimit"))
                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.maxAmountLimit);
                        if (message.ccy != null && Object.hasOwnProperty.call(message, "ccy"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.ccy);
                        if (message.banner != null && Object.hasOwnProperty.call(message, "banner"))
                            $root.md.maib.app.predefinedCredit.BannerSettings.encode(message.banner, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified CreditInfo message, length delimited. Does not implicitly {@link md.maib.app.profile.CreditInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.CreditInfo
                     * @static
                     * @param {md.maib.app.profile.ICreditInfo} message CreditInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreditInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CreditInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.CreditInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.CreditInfo} CreditInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreditInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.CreditInfo();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.offerExist = reader.bool();
                                break;
                            case 2:
                                message.offerId = reader.int64();
                                break;
                            case 3:
                                message.maxAmountLimit = reader.double();
                                break;
                            case 4:
                                message.ccy = reader.string();
                                break;
                            case 5:
                                message.banner = $root.md.maib.app.predefinedCredit.BannerSettings.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CreditInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.CreditInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.CreditInfo} CreditInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreditInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CreditInfo message.
                     * @function verify
                     * @memberof md.maib.app.profile.CreditInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreditInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.offerExist != null && message.hasOwnProperty("offerExist"))
                            if (typeof message.offerExist !== "boolean")
                                return "offerExist: boolean expected";
                        if (message.offerId != null && message.hasOwnProperty("offerId"))
                            if (!$util.isInteger(message.offerId) && !(message.offerId && $util.isInteger(message.offerId.low) && $util.isInteger(message.offerId.high)))
                                return "offerId: integer|Long expected";
                        if (message.maxAmountLimit != null && message.hasOwnProperty("maxAmountLimit"))
                            if (typeof message.maxAmountLimit !== "number")
                                return "maxAmountLimit: number expected";
                        if (message.ccy != null && message.hasOwnProperty("ccy"))
                            if (!$util.isString(message.ccy))
                                return "ccy: string expected";
                        if (message.banner != null && message.hasOwnProperty("banner")) {
                            let error = $root.md.maib.app.predefinedCredit.BannerSettings.verify(message.banner);
                            if (error)
                                return "banner." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a CreditInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.CreditInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.CreditInfo} CreditInfo
                     */
                    CreditInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.CreditInfo)
                            return object;
                        let message = new $root.md.maib.app.profile.CreditInfo();
                        if (object.offerExist != null)
                            message.offerExist = Boolean(object.offerExist);
                        if (object.offerId != null)
                            if ($util.Long)
                                (message.offerId = $util.Long.fromValue(object.offerId)).unsigned = false;
                            else if (typeof object.offerId === "string")
                                message.offerId = parseInt(object.offerId, 10);
                            else if (typeof object.offerId === "number")
                                message.offerId = object.offerId;
                            else if (typeof object.offerId === "object")
                                message.offerId = new $util.LongBits(object.offerId.low >>> 0, object.offerId.high >>> 0).toNumber();
                        if (object.maxAmountLimit != null)
                            message.maxAmountLimit = Number(object.maxAmountLimit);
                        if (object.ccy != null)
                            message.ccy = String(object.ccy);
                        if (object.banner != null) {
                            if (typeof object.banner !== "object")
                                throw TypeError(".md.maib.app.profile.CreditInfo.banner: object expected");
                            message.banner = $root.md.maib.app.predefinedCredit.BannerSettings.fromObject(object.banner);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a CreditInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.CreditInfo
                     * @static
                     * @param {md.maib.app.profile.CreditInfo} message CreditInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreditInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.offerExist = false;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.offerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.offerId = options.longs === String ? "0" : 0;
                            object.maxAmountLimit = 0;
                            object.ccy = "";
                            object.banner = null;
                        }
                        if (message.offerExist != null && message.hasOwnProperty("offerExist"))
                            object.offerExist = message.offerExist;
                        if (message.offerId != null && message.hasOwnProperty("offerId"))
                            if (typeof message.offerId === "number")
                                object.offerId = options.longs === String ? String(message.offerId) : message.offerId;
                            else
                                object.offerId = options.longs === String ? $util.Long.prototype.toString.call(message.offerId) : options.longs === Number ? new $util.LongBits(message.offerId.low >>> 0, message.offerId.high >>> 0).toNumber() : message.offerId;
                        if (message.maxAmountLimit != null && message.hasOwnProperty("maxAmountLimit"))
                            object.maxAmountLimit = options.json && !isFinite(message.maxAmountLimit) ? String(message.maxAmountLimit) : message.maxAmountLimit;
                        if (message.ccy != null && message.hasOwnProperty("ccy"))
                            object.ccy = message.ccy;
                        if (message.banner != null && message.hasOwnProperty("banner"))
                            object.banner = $root.md.maib.app.predefinedCredit.BannerSettings.toObject(message.banner, options);
                        return object;
                    };

                    /**
                     * Converts this CreditInfo to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.CreditInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreditInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CreditInfo;
                })();

                profile.RenameAccountRequest = (function() {

                    /**
                     * Properties of a RenameAccountRequest.
                     * @memberof md.maib.app.profile
                     * @interface IRenameAccountRequest
                     * @property {string|null} [account] RenameAccountRequest account
                     * @property {string|null} [newName] RenameAccountRequest newName
                     */

                    /**
                     * Constructs a new RenameAccountRequest.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a RenameAccountRequest.
                     * @implements IRenameAccountRequest
                     * @constructor
                     * @param {md.maib.app.profile.IRenameAccountRequest=} [properties] Properties to set
                     */
                    function RenameAccountRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * RenameAccountRequest account.
                     * @member {string} account
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @instance
                     */
                    RenameAccountRequest.prototype.account = "";

                    /**
                     * RenameAccountRequest newName.
                     * @member {string} newName
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @instance
                     */
                    RenameAccountRequest.prototype.newName = "";

                    /**
                     * Creates a new RenameAccountRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @static
                     * @param {md.maib.app.profile.IRenameAccountRequest=} [properties] Properties to set
                     * @returns {md.maib.app.profile.RenameAccountRequest} RenameAccountRequest instance
                     */
                    RenameAccountRequest.create = function create(properties) {
                        return new RenameAccountRequest(properties);
                    };

                    /**
                     * Encodes the specified RenameAccountRequest message. Does not implicitly {@link md.maib.app.profile.RenameAccountRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @static
                     * @param {md.maib.app.profile.IRenameAccountRequest} message RenameAccountRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RenameAccountRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
                        if (message.newName != null && Object.hasOwnProperty.call(message, "newName"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.newName);
                        return writer;
                    };

                    /**
                     * Encodes the specified RenameAccountRequest message, length delimited. Does not implicitly {@link md.maib.app.profile.RenameAccountRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @static
                     * @param {md.maib.app.profile.IRenameAccountRequest} message RenameAccountRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RenameAccountRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a RenameAccountRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.RenameAccountRequest} RenameAccountRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RenameAccountRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.RenameAccountRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.account = reader.string();
                                break;
                            case 2:
                                message.newName = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a RenameAccountRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.RenameAccountRequest} RenameAccountRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RenameAccountRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a RenameAccountRequest message.
                     * @function verify
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RenameAccountRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.account != null && message.hasOwnProperty("account"))
                            if (!$util.isString(message.account))
                                return "account: string expected";
                        if (message.newName != null && message.hasOwnProperty("newName"))
                            if (!$util.isString(message.newName))
                                return "newName: string expected";
                        return null;
                    };

                    /**
                     * Creates a RenameAccountRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.RenameAccountRequest} RenameAccountRequest
                     */
                    RenameAccountRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.RenameAccountRequest)
                            return object;
                        let message = new $root.md.maib.app.profile.RenameAccountRequest();
                        if (object.account != null)
                            message.account = String(object.account);
                        if (object.newName != null)
                            message.newName = String(object.newName);
                        return message;
                    };

                    /**
                     * Creates a plain object from a RenameAccountRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @static
                     * @param {md.maib.app.profile.RenameAccountRequest} message RenameAccountRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RenameAccountRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.account = "";
                            object.newName = "";
                        }
                        if (message.account != null && message.hasOwnProperty("account"))
                            object.account = message.account;
                        if (message.newName != null && message.hasOwnProperty("newName"))
                            object.newName = message.newName;
                        return object;
                    };

                    /**
                     * Converts this RenameAccountRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.RenameAccountRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RenameAccountRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return RenameAccountRequest;
                })();

                profile.RenameAccountResponse = (function() {

                    /**
                     * Properties of a RenameAccountResponse.
                     * @memberof md.maib.app.profile
                     * @interface IRenameAccountResponse
                     * @property {md.maib.app.profile.RenameAccountResponse.Result|null} [result] RenameAccountResponse result
                     */

                    /**
                     * Constructs a new RenameAccountResponse.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a RenameAccountResponse.
                     * @implements IRenameAccountResponse
                     * @constructor
                     * @param {md.maib.app.profile.IRenameAccountResponse=} [properties] Properties to set
                     */
                    function RenameAccountResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * RenameAccountResponse result.
                     * @member {md.maib.app.profile.RenameAccountResponse.Result} result
                     * @memberof md.maib.app.profile.RenameAccountResponse
                     * @instance
                     */
                    RenameAccountResponse.prototype.result = 0;

                    /**
                     * Creates a new RenameAccountResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.RenameAccountResponse
                     * @static
                     * @param {md.maib.app.profile.IRenameAccountResponse=} [properties] Properties to set
                     * @returns {md.maib.app.profile.RenameAccountResponse} RenameAccountResponse instance
                     */
                    RenameAccountResponse.create = function create(properties) {
                        return new RenameAccountResponse(properties);
                    };

                    /**
                     * Encodes the specified RenameAccountResponse message. Does not implicitly {@link md.maib.app.profile.RenameAccountResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.RenameAccountResponse
                     * @static
                     * @param {md.maib.app.profile.IRenameAccountResponse} message RenameAccountResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RenameAccountResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified RenameAccountResponse message, length delimited. Does not implicitly {@link md.maib.app.profile.RenameAccountResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.RenameAccountResponse
                     * @static
                     * @param {md.maib.app.profile.IRenameAccountResponse} message RenameAccountResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RenameAccountResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a RenameAccountResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.RenameAccountResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.RenameAccountResponse} RenameAccountResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RenameAccountResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.RenameAccountResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.result = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a RenameAccountResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.RenameAccountResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.RenameAccountResponse} RenameAccountResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RenameAccountResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a RenameAccountResponse message.
                     * @function verify
                     * @memberof md.maib.app.profile.RenameAccountResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RenameAccountResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a RenameAccountResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.RenameAccountResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.RenameAccountResponse} RenameAccountResponse
                     */
                    RenameAccountResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.RenameAccountResponse)
                            return object;
                        let message = new $root.md.maib.app.profile.RenameAccountResponse();
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "WRONG_INPUT":
                        case 2:
                            message.result = 2;
                            break;
                        case "UNSUPPORTED_TYPE":
                        case 3:
                            message.result = 3;
                            break;
                        case "NOT_FOUND":
                        case 4:
                            message.result = 4;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a RenameAccountResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.RenameAccountResponse
                     * @static
                     * @param {md.maib.app.profile.RenameAccountResponse} message RenameAccountResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RenameAccountResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.profile.RenameAccountResponse.Result[message.result] : message.result;
                        return object;
                    };

                    /**
                     * Converts this RenameAccountResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.RenameAccountResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RenameAccountResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.profile.RenameAccountResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} WRONG_INPUT=2 WRONG_INPUT value
                     * @property {number} UNSUPPORTED_TYPE=3 UNSUPPORTED_TYPE value
                     * @property {number} NOT_FOUND=4 NOT_FOUND value
                     */
                    RenameAccountResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "WRONG_INPUT"] = 2;
                        values[valuesById[3] = "UNSUPPORTED_TYPE"] = 3;
                        values[valuesById[4] = "NOT_FOUND"] = 4;
                        return values;
                    })();

                    return RenameAccountResponse;
                })();

                /**
                 * AccountType enum.
                 * @name md.maib.app.profile.AccountType
                 * @enum {number}
                 * @property {number} ACC_TYPE_UNKNOWN=0 ACC_TYPE_UNKNOWN value
                 * @property {number} CURRENT=1 CURRENT value
                 * @property {number} DEPOSIT=2 DEPOSIT value
                 * @property {number} CREDIT=3 CREDIT value
                 * @property {number} CREDIT_CARD=4 CREDIT_CARD value
                 */
                profile.AccountType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ACC_TYPE_UNKNOWN"] = 0;
                    values[valuesById[1] = "CURRENT"] = 1;
                    values[valuesById[2] = "DEPOSIT"] = 2;
                    values[valuesById[3] = "CREDIT"] = 3;
                    values[valuesById[4] = "CREDIT_CARD"] = 4;
                    return values;
                })();

                /**
                 * CardType enum.
                 * @name md.maib.app.profile.CardType
                 * @enum {number}
                 * @property {number} VISA=0 VISA value
                 * @property {number} MASTERCARD=1 MASTERCARD value
                 * @property {number} MAESTRO=2 MAESTRO value
                 * @property {number} ELECTRON=3 ELECTRON value
                 * @property {number} DISCOVER=4 DISCOVER value
                 * @property {number} DINERS=5 DINERS value
                 * @property {number} UNIONPAY=6 UNIONPAY value
                 * @property {number} AMERICAN_EXPRESS=7 AMERICAN_EXPRESS value
                 * @property {number} UNKNOWN=8 UNKNOWN value
                 * @property {number} CIRRUS=9 CIRRUS value
                 * @property {number} LUNCH=10 LUNCH value
                 */
                profile.CardType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "VISA"] = 0;
                    values[valuesById[1] = "MASTERCARD"] = 1;
                    values[valuesById[2] = "MAESTRO"] = 2;
                    values[valuesById[3] = "ELECTRON"] = 3;
                    values[valuesById[4] = "DISCOVER"] = 4;
                    values[valuesById[5] = "DINERS"] = 5;
                    values[valuesById[6] = "UNIONPAY"] = 6;
                    values[valuesById[7] = "AMERICAN_EXPRESS"] = 7;
                    values[valuesById[8] = "UNKNOWN"] = 8;
                    values[valuesById[9] = "CIRRUS"] = 9;
                    values[valuesById[10] = "LUNCH"] = 10;
                    return values;
                })();

                profile.Pin5ChangeRequest = (function() {

                    /**
                     * Properties of a Pin5ChangeRequest.
                     * @memberof md.maib.app.profile
                     * @interface IPin5ChangeRequest
                     * @property {string|null} [oldPin5] Pin5ChangeRequest oldPin5
                     * @property {string|null} [newPin5] Pin5ChangeRequest newPin5
                     */

                    /**
                     * Constructs a new Pin5ChangeRequest.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a Pin5ChangeRequest.
                     * @implements IPin5ChangeRequest
                     * @constructor
                     * @param {md.maib.app.profile.IPin5ChangeRequest=} [properties] Properties to set
                     */
                    function Pin5ChangeRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Pin5ChangeRequest oldPin5.
                     * @member {string} oldPin5
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @instance
                     */
                    Pin5ChangeRequest.prototype.oldPin5 = "";

                    /**
                     * Pin5ChangeRequest newPin5.
                     * @member {string} newPin5
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @instance
                     */
                    Pin5ChangeRequest.prototype.newPin5 = "";

                    /**
                     * Creates a new Pin5ChangeRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @static
                     * @param {md.maib.app.profile.IPin5ChangeRequest=} [properties] Properties to set
                     * @returns {md.maib.app.profile.Pin5ChangeRequest} Pin5ChangeRequest instance
                     */
                    Pin5ChangeRequest.create = function create(properties) {
                        return new Pin5ChangeRequest(properties);
                    };

                    /**
                     * Encodes the specified Pin5ChangeRequest message. Does not implicitly {@link md.maib.app.profile.Pin5ChangeRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @static
                     * @param {md.maib.app.profile.IPin5ChangeRequest} message Pin5ChangeRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pin5ChangeRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.oldPin5 != null && Object.hasOwnProperty.call(message, "oldPin5"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.oldPin5);
                        if (message.newPin5 != null && Object.hasOwnProperty.call(message, "newPin5"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.newPin5);
                        return writer;
                    };

                    /**
                     * Encodes the specified Pin5ChangeRequest message, length delimited. Does not implicitly {@link md.maib.app.profile.Pin5ChangeRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @static
                     * @param {md.maib.app.profile.IPin5ChangeRequest} message Pin5ChangeRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pin5ChangeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Pin5ChangeRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.Pin5ChangeRequest} Pin5ChangeRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pin5ChangeRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.Pin5ChangeRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.oldPin5 = reader.string();
                                break;
                            case 2:
                                message.newPin5 = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Pin5ChangeRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.Pin5ChangeRequest} Pin5ChangeRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pin5ChangeRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Pin5ChangeRequest message.
                     * @function verify
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Pin5ChangeRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.oldPin5 != null && message.hasOwnProperty("oldPin5"))
                            if (!$util.isString(message.oldPin5))
                                return "oldPin5: string expected";
                        if (message.newPin5 != null && message.hasOwnProperty("newPin5"))
                            if (!$util.isString(message.newPin5))
                                return "newPin5: string expected";
                        return null;
                    };

                    /**
                     * Creates a Pin5ChangeRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.Pin5ChangeRequest} Pin5ChangeRequest
                     */
                    Pin5ChangeRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.Pin5ChangeRequest)
                            return object;
                        let message = new $root.md.maib.app.profile.Pin5ChangeRequest();
                        if (object.oldPin5 != null)
                            message.oldPin5 = String(object.oldPin5);
                        if (object.newPin5 != null)
                            message.newPin5 = String(object.newPin5);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Pin5ChangeRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @static
                     * @param {md.maib.app.profile.Pin5ChangeRequest} message Pin5ChangeRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Pin5ChangeRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.oldPin5 = "";
                            object.newPin5 = "";
                        }
                        if (message.oldPin5 != null && message.hasOwnProperty("oldPin5"))
                            object.oldPin5 = message.oldPin5;
                        if (message.newPin5 != null && message.hasOwnProperty("newPin5"))
                            object.newPin5 = message.newPin5;
                        return object;
                    };

                    /**
                     * Converts this Pin5ChangeRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.Pin5ChangeRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Pin5ChangeRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Pin5ChangeRequest;
                })();

                profile.Pin5ChangeResponse = (function() {

                    /**
                     * Properties of a Pin5ChangeResponse.
                     * @memberof md.maib.app.profile
                     * @interface IPin5ChangeResponse
                     * @property {md.maib.app.profile.Pin5ChangeResponse.Result|null} [result] Pin5ChangeResponse result
                     */

                    /**
                     * Constructs a new Pin5ChangeResponse.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a Pin5ChangeResponse.
                     * @implements IPin5ChangeResponse
                     * @constructor
                     * @param {md.maib.app.profile.IPin5ChangeResponse=} [properties] Properties to set
                     */
                    function Pin5ChangeResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Pin5ChangeResponse result.
                     * @member {md.maib.app.profile.Pin5ChangeResponse.Result} result
                     * @memberof md.maib.app.profile.Pin5ChangeResponse
                     * @instance
                     */
                    Pin5ChangeResponse.prototype.result = 0;

                    /**
                     * Creates a new Pin5ChangeResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.Pin5ChangeResponse
                     * @static
                     * @param {md.maib.app.profile.IPin5ChangeResponse=} [properties] Properties to set
                     * @returns {md.maib.app.profile.Pin5ChangeResponse} Pin5ChangeResponse instance
                     */
                    Pin5ChangeResponse.create = function create(properties) {
                        return new Pin5ChangeResponse(properties);
                    };

                    /**
                     * Encodes the specified Pin5ChangeResponse message. Does not implicitly {@link md.maib.app.profile.Pin5ChangeResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.Pin5ChangeResponse
                     * @static
                     * @param {md.maib.app.profile.IPin5ChangeResponse} message Pin5ChangeResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pin5ChangeResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified Pin5ChangeResponse message, length delimited. Does not implicitly {@link md.maib.app.profile.Pin5ChangeResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.Pin5ChangeResponse
                     * @static
                     * @param {md.maib.app.profile.IPin5ChangeResponse} message Pin5ChangeResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pin5ChangeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Pin5ChangeResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.Pin5ChangeResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.Pin5ChangeResponse} Pin5ChangeResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pin5ChangeResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.Pin5ChangeResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.result = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Pin5ChangeResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.Pin5ChangeResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.Pin5ChangeResponse} Pin5ChangeResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pin5ChangeResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Pin5ChangeResponse message.
                     * @function verify
                     * @memberof md.maib.app.profile.Pin5ChangeResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Pin5ChangeResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a Pin5ChangeResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.Pin5ChangeResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.Pin5ChangeResponse} Pin5ChangeResponse
                     */
                    Pin5ChangeResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.Pin5ChangeResponse)
                            return object;
                        let message = new $root.md.maib.app.profile.Pin5ChangeResponse();
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "WRONG_INPUT":
                        case 2:
                            message.result = 2;
                            break;
                        case "SERVER_ERROR":
                        case 3:
                            message.result = 3;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Pin5ChangeResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.Pin5ChangeResponse
                     * @static
                     * @param {md.maib.app.profile.Pin5ChangeResponse} message Pin5ChangeResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Pin5ChangeResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.profile.Pin5ChangeResponse.Result[message.result] : message.result;
                        return object;
                    };

                    /**
                     * Converts this Pin5ChangeResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.Pin5ChangeResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Pin5ChangeResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.profile.Pin5ChangeResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} WRONG_INPUT=2 WRONG_INPUT value
                     * @property {number} SERVER_ERROR=3 SERVER_ERROR value
                     */
                    Pin5ChangeResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "WRONG_INPUT"] = 2;
                        values[valuesById[3] = "SERVER_ERROR"] = 3;
                        return values;
                    })();

                    return Pin5ChangeResponse;
                })();

                profile.AccountVisibilityRequest = (function() {

                    /**
                     * Properties of an AccountVisibilityRequest.
                     * @memberof md.maib.app.profile
                     * @interface IAccountVisibilityRequest
                     * @property {boolean|null} [dummyTrue] AccountVisibilityRequest dummyTrue
                     * @property {Array.<md.maib.app.profile.IVisibilitySetting>|null} [cardSettings] AccountVisibilityRequest cardSettings
                     * @property {Array.<md.maib.app.profile.IVisibilitySetting>|null} [currentAccountSettings] AccountVisibilityRequest currentAccountSettings
                     * @property {Array.<md.maib.app.profile.IVisibilitySetting>|null} [depositAccountSettings] AccountVisibilityRequest depositAccountSettings
                     * @property {Array.<md.maib.app.profile.IVisibilitySetting>|null} [creditAccountSettings] AccountVisibilityRequest creditAccountSettings
                     * @property {Array.<md.maib.app.profile.IVisibilitySetting>|null} [creditCardAccountSettings] AccountVisibilityRequest creditCardAccountSettings
                     */

                    /**
                     * Constructs a new AccountVisibilityRequest.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents an AccountVisibilityRequest.
                     * @implements IAccountVisibilityRequest
                     * @constructor
                     * @param {md.maib.app.profile.IAccountVisibilityRequest=} [properties] Properties to set
                     */
                    function AccountVisibilityRequest(properties) {
                        this.cardSettings = [];
                        this.currentAccountSettings = [];
                        this.depositAccountSettings = [];
                        this.creditAccountSettings = [];
                        this.creditCardAccountSettings = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AccountVisibilityRequest dummyTrue.
                     * @member {boolean} dummyTrue
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @instance
                     */
                    AccountVisibilityRequest.prototype.dummyTrue = false;

                    /**
                     * AccountVisibilityRequest cardSettings.
                     * @member {Array.<md.maib.app.profile.IVisibilitySetting>} cardSettings
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @instance
                     */
                    AccountVisibilityRequest.prototype.cardSettings = $util.emptyArray;

                    /**
                     * AccountVisibilityRequest currentAccountSettings.
                     * @member {Array.<md.maib.app.profile.IVisibilitySetting>} currentAccountSettings
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @instance
                     */
                    AccountVisibilityRequest.prototype.currentAccountSettings = $util.emptyArray;

                    /**
                     * AccountVisibilityRequest depositAccountSettings.
                     * @member {Array.<md.maib.app.profile.IVisibilitySetting>} depositAccountSettings
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @instance
                     */
                    AccountVisibilityRequest.prototype.depositAccountSettings = $util.emptyArray;

                    /**
                     * AccountVisibilityRequest creditAccountSettings.
                     * @member {Array.<md.maib.app.profile.IVisibilitySetting>} creditAccountSettings
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @instance
                     */
                    AccountVisibilityRequest.prototype.creditAccountSettings = $util.emptyArray;

                    /**
                     * AccountVisibilityRequest creditCardAccountSettings.
                     * @member {Array.<md.maib.app.profile.IVisibilitySetting>} creditCardAccountSettings
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @instance
                     */
                    AccountVisibilityRequest.prototype.creditCardAccountSettings = $util.emptyArray;

                    /**
                     * Creates a new AccountVisibilityRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @static
                     * @param {md.maib.app.profile.IAccountVisibilityRequest=} [properties] Properties to set
                     * @returns {md.maib.app.profile.AccountVisibilityRequest} AccountVisibilityRequest instance
                     */
                    AccountVisibilityRequest.create = function create(properties) {
                        return new AccountVisibilityRequest(properties);
                    };

                    /**
                     * Encodes the specified AccountVisibilityRequest message. Does not implicitly {@link md.maib.app.profile.AccountVisibilityRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @static
                     * @param {md.maib.app.profile.IAccountVisibilityRequest} message AccountVisibilityRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountVisibilityRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.dummyTrue != null && Object.hasOwnProperty.call(message, "dummyTrue"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.dummyTrue);
                        if (message.cardSettings != null && message.cardSettings.length)
                            for (let i = 0; i < message.cardSettings.length; ++i)
                                $root.md.maib.app.profile.VisibilitySetting.encode(message.cardSettings[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.currentAccountSettings != null && message.currentAccountSettings.length)
                            for (let i = 0; i < message.currentAccountSettings.length; ++i)
                                $root.md.maib.app.profile.VisibilitySetting.encode(message.currentAccountSettings[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.depositAccountSettings != null && message.depositAccountSettings.length)
                            for (let i = 0; i < message.depositAccountSettings.length; ++i)
                                $root.md.maib.app.profile.VisibilitySetting.encode(message.depositAccountSettings[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.creditAccountSettings != null && message.creditAccountSettings.length)
                            for (let i = 0; i < message.creditAccountSettings.length; ++i)
                                $root.md.maib.app.profile.VisibilitySetting.encode(message.creditAccountSettings[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.creditCardAccountSettings != null && message.creditCardAccountSettings.length)
                            for (let i = 0; i < message.creditCardAccountSettings.length; ++i)
                                $root.md.maib.app.profile.VisibilitySetting.encode(message.creditCardAccountSettings[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified AccountVisibilityRequest message, length delimited. Does not implicitly {@link md.maib.app.profile.AccountVisibilityRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @static
                     * @param {md.maib.app.profile.IAccountVisibilityRequest} message AccountVisibilityRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountVisibilityRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AccountVisibilityRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.AccountVisibilityRequest} AccountVisibilityRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountVisibilityRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.AccountVisibilityRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.dummyTrue = reader.bool();
                                break;
                            case 2:
                                if (!(message.cardSettings && message.cardSettings.length))
                                    message.cardSettings = [];
                                message.cardSettings.push($root.md.maib.app.profile.VisibilitySetting.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                if (!(message.currentAccountSettings && message.currentAccountSettings.length))
                                    message.currentAccountSettings = [];
                                message.currentAccountSettings.push($root.md.maib.app.profile.VisibilitySetting.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                if (!(message.depositAccountSettings && message.depositAccountSettings.length))
                                    message.depositAccountSettings = [];
                                message.depositAccountSettings.push($root.md.maib.app.profile.VisibilitySetting.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                if (!(message.creditAccountSettings && message.creditAccountSettings.length))
                                    message.creditAccountSettings = [];
                                message.creditAccountSettings.push($root.md.maib.app.profile.VisibilitySetting.decode(reader, reader.uint32()));
                                break;
                            case 6:
                                if (!(message.creditCardAccountSettings && message.creditCardAccountSettings.length))
                                    message.creditCardAccountSettings = [];
                                message.creditCardAccountSettings.push($root.md.maib.app.profile.VisibilitySetting.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AccountVisibilityRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.AccountVisibilityRequest} AccountVisibilityRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountVisibilityRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AccountVisibilityRequest message.
                     * @function verify
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AccountVisibilityRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.dummyTrue != null && message.hasOwnProperty("dummyTrue"))
                            if (typeof message.dummyTrue !== "boolean")
                                return "dummyTrue: boolean expected";
                        if (message.cardSettings != null && message.hasOwnProperty("cardSettings")) {
                            if (!Array.isArray(message.cardSettings))
                                return "cardSettings: array expected";
                            for (let i = 0; i < message.cardSettings.length; ++i) {
                                let error = $root.md.maib.app.profile.VisibilitySetting.verify(message.cardSettings[i]);
                                if (error)
                                    return "cardSettings." + error;
                            }
                        }
                        if (message.currentAccountSettings != null && message.hasOwnProperty("currentAccountSettings")) {
                            if (!Array.isArray(message.currentAccountSettings))
                                return "currentAccountSettings: array expected";
                            for (let i = 0; i < message.currentAccountSettings.length; ++i) {
                                let error = $root.md.maib.app.profile.VisibilitySetting.verify(message.currentAccountSettings[i]);
                                if (error)
                                    return "currentAccountSettings." + error;
                            }
                        }
                        if (message.depositAccountSettings != null && message.hasOwnProperty("depositAccountSettings")) {
                            if (!Array.isArray(message.depositAccountSettings))
                                return "depositAccountSettings: array expected";
                            for (let i = 0; i < message.depositAccountSettings.length; ++i) {
                                let error = $root.md.maib.app.profile.VisibilitySetting.verify(message.depositAccountSettings[i]);
                                if (error)
                                    return "depositAccountSettings." + error;
                            }
                        }
                        if (message.creditAccountSettings != null && message.hasOwnProperty("creditAccountSettings")) {
                            if (!Array.isArray(message.creditAccountSettings))
                                return "creditAccountSettings: array expected";
                            for (let i = 0; i < message.creditAccountSettings.length; ++i) {
                                let error = $root.md.maib.app.profile.VisibilitySetting.verify(message.creditAccountSettings[i]);
                                if (error)
                                    return "creditAccountSettings." + error;
                            }
                        }
                        if (message.creditCardAccountSettings != null && message.hasOwnProperty("creditCardAccountSettings")) {
                            if (!Array.isArray(message.creditCardAccountSettings))
                                return "creditCardAccountSettings: array expected";
                            for (let i = 0; i < message.creditCardAccountSettings.length; ++i) {
                                let error = $root.md.maib.app.profile.VisibilitySetting.verify(message.creditCardAccountSettings[i]);
                                if (error)
                                    return "creditCardAccountSettings." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an AccountVisibilityRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.AccountVisibilityRequest} AccountVisibilityRequest
                     */
                    AccountVisibilityRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.AccountVisibilityRequest)
                            return object;
                        let message = new $root.md.maib.app.profile.AccountVisibilityRequest();
                        if (object.dummyTrue != null)
                            message.dummyTrue = Boolean(object.dummyTrue);
                        if (object.cardSettings) {
                            if (!Array.isArray(object.cardSettings))
                                throw TypeError(".md.maib.app.profile.AccountVisibilityRequest.cardSettings: array expected");
                            message.cardSettings = [];
                            for (let i = 0; i < object.cardSettings.length; ++i) {
                                if (typeof object.cardSettings[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.AccountVisibilityRequest.cardSettings: object expected");
                                message.cardSettings[i] = $root.md.maib.app.profile.VisibilitySetting.fromObject(object.cardSettings[i]);
                            }
                        }
                        if (object.currentAccountSettings) {
                            if (!Array.isArray(object.currentAccountSettings))
                                throw TypeError(".md.maib.app.profile.AccountVisibilityRequest.currentAccountSettings: array expected");
                            message.currentAccountSettings = [];
                            for (let i = 0; i < object.currentAccountSettings.length; ++i) {
                                if (typeof object.currentAccountSettings[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.AccountVisibilityRequest.currentAccountSettings: object expected");
                                message.currentAccountSettings[i] = $root.md.maib.app.profile.VisibilitySetting.fromObject(object.currentAccountSettings[i]);
                            }
                        }
                        if (object.depositAccountSettings) {
                            if (!Array.isArray(object.depositAccountSettings))
                                throw TypeError(".md.maib.app.profile.AccountVisibilityRequest.depositAccountSettings: array expected");
                            message.depositAccountSettings = [];
                            for (let i = 0; i < object.depositAccountSettings.length; ++i) {
                                if (typeof object.depositAccountSettings[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.AccountVisibilityRequest.depositAccountSettings: object expected");
                                message.depositAccountSettings[i] = $root.md.maib.app.profile.VisibilitySetting.fromObject(object.depositAccountSettings[i]);
                            }
                        }
                        if (object.creditAccountSettings) {
                            if (!Array.isArray(object.creditAccountSettings))
                                throw TypeError(".md.maib.app.profile.AccountVisibilityRequest.creditAccountSettings: array expected");
                            message.creditAccountSettings = [];
                            for (let i = 0; i < object.creditAccountSettings.length; ++i) {
                                if (typeof object.creditAccountSettings[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.AccountVisibilityRequest.creditAccountSettings: object expected");
                                message.creditAccountSettings[i] = $root.md.maib.app.profile.VisibilitySetting.fromObject(object.creditAccountSettings[i]);
                            }
                        }
                        if (object.creditCardAccountSettings) {
                            if (!Array.isArray(object.creditCardAccountSettings))
                                throw TypeError(".md.maib.app.profile.AccountVisibilityRequest.creditCardAccountSettings: array expected");
                            message.creditCardAccountSettings = [];
                            for (let i = 0; i < object.creditCardAccountSettings.length; ++i) {
                                if (typeof object.creditCardAccountSettings[i] !== "object")
                                    throw TypeError(".md.maib.app.profile.AccountVisibilityRequest.creditCardAccountSettings: object expected");
                                message.creditCardAccountSettings[i] = $root.md.maib.app.profile.VisibilitySetting.fromObject(object.creditCardAccountSettings[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AccountVisibilityRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @static
                     * @param {md.maib.app.profile.AccountVisibilityRequest} message AccountVisibilityRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AccountVisibilityRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.cardSettings = [];
                            object.currentAccountSettings = [];
                            object.depositAccountSettings = [];
                            object.creditAccountSettings = [];
                            object.creditCardAccountSettings = [];
                        }
                        if (options.defaults)
                            object.dummyTrue = false;
                        if (message.dummyTrue != null && message.hasOwnProperty("dummyTrue"))
                            object.dummyTrue = message.dummyTrue;
                        if (message.cardSettings && message.cardSettings.length) {
                            object.cardSettings = [];
                            for (let j = 0; j < message.cardSettings.length; ++j)
                                object.cardSettings[j] = $root.md.maib.app.profile.VisibilitySetting.toObject(message.cardSettings[j], options);
                        }
                        if (message.currentAccountSettings && message.currentAccountSettings.length) {
                            object.currentAccountSettings = [];
                            for (let j = 0; j < message.currentAccountSettings.length; ++j)
                                object.currentAccountSettings[j] = $root.md.maib.app.profile.VisibilitySetting.toObject(message.currentAccountSettings[j], options);
                        }
                        if (message.depositAccountSettings && message.depositAccountSettings.length) {
                            object.depositAccountSettings = [];
                            for (let j = 0; j < message.depositAccountSettings.length; ++j)
                                object.depositAccountSettings[j] = $root.md.maib.app.profile.VisibilitySetting.toObject(message.depositAccountSettings[j], options);
                        }
                        if (message.creditAccountSettings && message.creditAccountSettings.length) {
                            object.creditAccountSettings = [];
                            for (let j = 0; j < message.creditAccountSettings.length; ++j)
                                object.creditAccountSettings[j] = $root.md.maib.app.profile.VisibilitySetting.toObject(message.creditAccountSettings[j], options);
                        }
                        if (message.creditCardAccountSettings && message.creditCardAccountSettings.length) {
                            object.creditCardAccountSettings = [];
                            for (let j = 0; j < message.creditCardAccountSettings.length; ++j)
                                object.creditCardAccountSettings[j] = $root.md.maib.app.profile.VisibilitySetting.toObject(message.creditCardAccountSettings[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this AccountVisibilityRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.AccountVisibilityRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AccountVisibilityRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return AccountVisibilityRequest;
                })();

                profile.VisibilitySetting = (function() {

                    /**
                     * Properties of a VisibilitySetting.
                     * @memberof md.maib.app.profile
                     * @interface IVisibilitySetting
                     * @property {string|null} [id] VisibilitySetting id
                     * @property {boolean|null} [visibleForOperations] VisibilitySetting visibleForOperations
                     * @property {boolean|null} [visibleStatement] VisibilitySetting visibleStatement
                     */

                    /**
                     * Constructs a new VisibilitySetting.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a VisibilitySetting.
                     * @implements IVisibilitySetting
                     * @constructor
                     * @param {md.maib.app.profile.IVisibilitySetting=} [properties] Properties to set
                     */
                    function VisibilitySetting(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * VisibilitySetting id.
                     * @member {string} id
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @instance
                     */
                    VisibilitySetting.prototype.id = "";

                    /**
                     * VisibilitySetting visibleForOperations.
                     * @member {boolean} visibleForOperations
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @instance
                     */
                    VisibilitySetting.prototype.visibleForOperations = false;

                    /**
                     * VisibilitySetting visibleStatement.
                     * @member {boolean} visibleStatement
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @instance
                     */
                    VisibilitySetting.prototype.visibleStatement = false;

                    /**
                     * Creates a new VisibilitySetting instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @static
                     * @param {md.maib.app.profile.IVisibilitySetting=} [properties] Properties to set
                     * @returns {md.maib.app.profile.VisibilitySetting} VisibilitySetting instance
                     */
                    VisibilitySetting.create = function create(properties) {
                        return new VisibilitySetting(properties);
                    };

                    /**
                     * Encodes the specified VisibilitySetting message. Does not implicitly {@link md.maib.app.profile.VisibilitySetting.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @static
                     * @param {md.maib.app.profile.IVisibilitySetting} message VisibilitySetting message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VisibilitySetting.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.visibleForOperations != null && Object.hasOwnProperty.call(message, "visibleForOperations"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.visibleForOperations);
                        if (message.visibleStatement != null && Object.hasOwnProperty.call(message, "visibleStatement"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.visibleStatement);
                        return writer;
                    };

                    /**
                     * Encodes the specified VisibilitySetting message, length delimited. Does not implicitly {@link md.maib.app.profile.VisibilitySetting.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @static
                     * @param {md.maib.app.profile.IVisibilitySetting} message VisibilitySetting message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VisibilitySetting.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a VisibilitySetting message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.VisibilitySetting} VisibilitySetting
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VisibilitySetting.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.VisibilitySetting();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.visibleForOperations = reader.bool();
                                break;
                            case 3:
                                message.visibleStatement = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a VisibilitySetting message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.VisibilitySetting} VisibilitySetting
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VisibilitySetting.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a VisibilitySetting message.
                     * @function verify
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    VisibilitySetting.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.visibleForOperations != null && message.hasOwnProperty("visibleForOperations"))
                            if (typeof message.visibleForOperations !== "boolean")
                                return "visibleForOperations: boolean expected";
                        if (message.visibleStatement != null && message.hasOwnProperty("visibleStatement"))
                            if (typeof message.visibleStatement !== "boolean")
                                return "visibleStatement: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a VisibilitySetting message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.VisibilitySetting} VisibilitySetting
                     */
                    VisibilitySetting.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.VisibilitySetting)
                            return object;
                        let message = new $root.md.maib.app.profile.VisibilitySetting();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.visibleForOperations != null)
                            message.visibleForOperations = Boolean(object.visibleForOperations);
                        if (object.visibleStatement != null)
                            message.visibleStatement = Boolean(object.visibleStatement);
                        return message;
                    };

                    /**
                     * Creates a plain object from a VisibilitySetting message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @static
                     * @param {md.maib.app.profile.VisibilitySetting} message VisibilitySetting
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    VisibilitySetting.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.visibleForOperations = false;
                            object.visibleStatement = false;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.visibleForOperations != null && message.hasOwnProperty("visibleForOperations"))
                            object.visibleForOperations = message.visibleForOperations;
                        if (message.visibleStatement != null && message.hasOwnProperty("visibleStatement"))
                            object.visibleStatement = message.visibleStatement;
                        return object;
                    };

                    /**
                     * Converts this VisibilitySetting to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.VisibilitySetting
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    VisibilitySetting.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return VisibilitySetting;
                })();

                profile.BiometricSettingsRequest = (function() {

                    /**
                     * Properties of a BiometricSettingsRequest.
                     * @memberof md.maib.app.profile
                     * @interface IBiometricSettingsRequest
                     * @property {boolean|null} [isBiometricsEnabled] BiometricSettingsRequest isBiometricsEnabled
                     */

                    /**
                     * Constructs a new BiometricSettingsRequest.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a BiometricSettingsRequest.
                     * @implements IBiometricSettingsRequest
                     * @constructor
                     * @param {md.maib.app.profile.IBiometricSettingsRequest=} [properties] Properties to set
                     */
                    function BiometricSettingsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * BiometricSettingsRequest isBiometricsEnabled.
                     * @member {boolean} isBiometricsEnabled
                     * @memberof md.maib.app.profile.BiometricSettingsRequest
                     * @instance
                     */
                    BiometricSettingsRequest.prototype.isBiometricsEnabled = false;

                    /**
                     * Creates a new BiometricSettingsRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.BiometricSettingsRequest
                     * @static
                     * @param {md.maib.app.profile.IBiometricSettingsRequest=} [properties] Properties to set
                     * @returns {md.maib.app.profile.BiometricSettingsRequest} BiometricSettingsRequest instance
                     */
                    BiometricSettingsRequest.create = function create(properties) {
                        return new BiometricSettingsRequest(properties);
                    };

                    /**
                     * Encodes the specified BiometricSettingsRequest message. Does not implicitly {@link md.maib.app.profile.BiometricSettingsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.BiometricSettingsRequest
                     * @static
                     * @param {md.maib.app.profile.IBiometricSettingsRequest} message BiometricSettingsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BiometricSettingsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.isBiometricsEnabled != null && Object.hasOwnProperty.call(message, "isBiometricsEnabled"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isBiometricsEnabled);
                        return writer;
                    };

                    /**
                     * Encodes the specified BiometricSettingsRequest message, length delimited. Does not implicitly {@link md.maib.app.profile.BiometricSettingsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.BiometricSettingsRequest
                     * @static
                     * @param {md.maib.app.profile.IBiometricSettingsRequest} message BiometricSettingsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BiometricSettingsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a BiometricSettingsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.BiometricSettingsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.BiometricSettingsRequest} BiometricSettingsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BiometricSettingsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.BiometricSettingsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.isBiometricsEnabled = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a BiometricSettingsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.BiometricSettingsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.BiometricSettingsRequest} BiometricSettingsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BiometricSettingsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a BiometricSettingsRequest message.
                     * @function verify
                     * @memberof md.maib.app.profile.BiometricSettingsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BiometricSettingsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.isBiometricsEnabled != null && message.hasOwnProperty("isBiometricsEnabled"))
                            if (typeof message.isBiometricsEnabled !== "boolean")
                                return "isBiometricsEnabled: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a BiometricSettingsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.BiometricSettingsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.BiometricSettingsRequest} BiometricSettingsRequest
                     */
                    BiometricSettingsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.BiometricSettingsRequest)
                            return object;
                        let message = new $root.md.maib.app.profile.BiometricSettingsRequest();
                        if (object.isBiometricsEnabled != null)
                            message.isBiometricsEnabled = Boolean(object.isBiometricsEnabled);
                        return message;
                    };

                    /**
                     * Creates a plain object from a BiometricSettingsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.BiometricSettingsRequest
                     * @static
                     * @param {md.maib.app.profile.BiometricSettingsRequest} message BiometricSettingsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BiometricSettingsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.isBiometricsEnabled = false;
                        if (message.isBiometricsEnabled != null && message.hasOwnProperty("isBiometricsEnabled"))
                            object.isBiometricsEnabled = message.isBiometricsEnabled;
                        return object;
                    };

                    /**
                     * Converts this BiometricSettingsRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.BiometricSettingsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BiometricSettingsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return BiometricSettingsRequest;
                })();

                profile.SaveLanguageRequest = (function() {

                    /**
                     * Properties of a SaveLanguageRequest.
                     * @memberof md.maib.app.profile
                     * @interface ISaveLanguageRequest
                     * @property {md.maib.app.profile.ISettingsLanguage|null} [language] SaveLanguageRequest language
                     */

                    /**
                     * Constructs a new SaveLanguageRequest.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a SaveLanguageRequest.
                     * @implements ISaveLanguageRequest
                     * @constructor
                     * @param {md.maib.app.profile.ISaveLanguageRequest=} [properties] Properties to set
                     */
                    function SaveLanguageRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SaveLanguageRequest language.
                     * @member {md.maib.app.profile.ISettingsLanguage|null|undefined} language
                     * @memberof md.maib.app.profile.SaveLanguageRequest
                     * @instance
                     */
                    SaveLanguageRequest.prototype.language = null;

                    /**
                     * Creates a new SaveLanguageRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.SaveLanguageRequest
                     * @static
                     * @param {md.maib.app.profile.ISaveLanguageRequest=} [properties] Properties to set
                     * @returns {md.maib.app.profile.SaveLanguageRequest} SaveLanguageRequest instance
                     */
                    SaveLanguageRequest.create = function create(properties) {
                        return new SaveLanguageRequest(properties);
                    };

                    /**
                     * Encodes the specified SaveLanguageRequest message. Does not implicitly {@link md.maib.app.profile.SaveLanguageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.SaveLanguageRequest
                     * @static
                     * @param {md.maib.app.profile.ISaveLanguageRequest} message SaveLanguageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SaveLanguageRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                            $root.md.maib.app.profile.SettingsLanguage.encode(message.language, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified SaveLanguageRequest message, length delimited. Does not implicitly {@link md.maib.app.profile.SaveLanguageRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.SaveLanguageRequest
                     * @static
                     * @param {md.maib.app.profile.ISaveLanguageRequest} message SaveLanguageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SaveLanguageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SaveLanguageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.SaveLanguageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.SaveLanguageRequest} SaveLanguageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SaveLanguageRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.SaveLanguageRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.language = $root.md.maib.app.profile.SettingsLanguage.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SaveLanguageRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.SaveLanguageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.SaveLanguageRequest} SaveLanguageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SaveLanguageRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SaveLanguageRequest message.
                     * @function verify
                     * @memberof md.maib.app.profile.SaveLanguageRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SaveLanguageRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.language != null && message.hasOwnProperty("language")) {
                            let error = $root.md.maib.app.profile.SettingsLanguage.verify(message.language);
                            if (error)
                                return "language." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a SaveLanguageRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.SaveLanguageRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.SaveLanguageRequest} SaveLanguageRequest
                     */
                    SaveLanguageRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.SaveLanguageRequest)
                            return object;
                        let message = new $root.md.maib.app.profile.SaveLanguageRequest();
                        if (object.language != null) {
                            if (typeof object.language !== "object")
                                throw TypeError(".md.maib.app.profile.SaveLanguageRequest.language: object expected");
                            message.language = $root.md.maib.app.profile.SettingsLanguage.fromObject(object.language);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SaveLanguageRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.SaveLanguageRequest
                     * @static
                     * @param {md.maib.app.profile.SaveLanguageRequest} message SaveLanguageRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SaveLanguageRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.language = null;
                        if (message.language != null && message.hasOwnProperty("language"))
                            object.language = $root.md.maib.app.profile.SettingsLanguage.toObject(message.language, options);
                        return object;
                    };

                    /**
                     * Converts this SaveLanguageRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.SaveLanguageRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SaveLanguageRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SaveLanguageRequest;
                })();

                profile.SettingsLanguage = (function() {

                    /**
                     * Properties of a SettingsLanguage.
                     * @memberof md.maib.app.profile
                     * @interface ISettingsLanguage
                     * @property {md.maib.app.profile.SettingsLanguage.Language|null} [language] SettingsLanguage language
                     */

                    /**
                     * Constructs a new SettingsLanguage.
                     * @memberof md.maib.app.profile
                     * @classdesc Represents a SettingsLanguage.
                     * @implements ISettingsLanguage
                     * @constructor
                     * @param {md.maib.app.profile.ISettingsLanguage=} [properties] Properties to set
                     */
                    function SettingsLanguage(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SettingsLanguage language.
                     * @member {md.maib.app.profile.SettingsLanguage.Language} language
                     * @memberof md.maib.app.profile.SettingsLanguage
                     * @instance
                     */
                    SettingsLanguage.prototype.language = 0;

                    /**
                     * Creates a new SettingsLanguage instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.profile.SettingsLanguage
                     * @static
                     * @param {md.maib.app.profile.ISettingsLanguage=} [properties] Properties to set
                     * @returns {md.maib.app.profile.SettingsLanguage} SettingsLanguage instance
                     */
                    SettingsLanguage.create = function create(properties) {
                        return new SettingsLanguage(properties);
                    };

                    /**
                     * Encodes the specified SettingsLanguage message. Does not implicitly {@link md.maib.app.profile.SettingsLanguage.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.profile.SettingsLanguage
                     * @static
                     * @param {md.maib.app.profile.ISettingsLanguage} message SettingsLanguage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SettingsLanguage.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.language);
                        return writer;
                    };

                    /**
                     * Encodes the specified SettingsLanguage message, length delimited. Does not implicitly {@link md.maib.app.profile.SettingsLanguage.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.profile.SettingsLanguage
                     * @static
                     * @param {md.maib.app.profile.ISettingsLanguage} message SettingsLanguage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SettingsLanguage.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SettingsLanguage message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.profile.SettingsLanguage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.profile.SettingsLanguage} SettingsLanguage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SettingsLanguage.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.profile.SettingsLanguage();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.language = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SettingsLanguage message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.profile.SettingsLanguage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.profile.SettingsLanguage} SettingsLanguage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SettingsLanguage.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SettingsLanguage message.
                     * @function verify
                     * @memberof md.maib.app.profile.SettingsLanguage
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SettingsLanguage.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.language != null && message.hasOwnProperty("language"))
                            switch (message.language) {
                            default:
                                return "language: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a SettingsLanguage message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.profile.SettingsLanguage
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.profile.SettingsLanguage} SettingsLanguage
                     */
                    SettingsLanguage.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.profile.SettingsLanguage)
                            return object;
                        let message = new $root.md.maib.app.profile.SettingsLanguage();
                        switch (object.language) {
                        case "UNKNOWN":
                        case 0:
                            message.language = 0;
                            break;
                        case "RO":
                        case 1:
                            message.language = 1;
                            break;
                        case "RU":
                        case 2:
                            message.language = 2;
                            break;
                        case "EN":
                        case 3:
                            message.language = 3;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SettingsLanguage message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.profile.SettingsLanguage
                     * @static
                     * @param {md.maib.app.profile.SettingsLanguage} message SettingsLanguage
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SettingsLanguage.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.language = options.enums === String ? "UNKNOWN" : 0;
                        if (message.language != null && message.hasOwnProperty("language"))
                            object.language = options.enums === String ? $root.md.maib.app.profile.SettingsLanguage.Language[message.language] : message.language;
                        return object;
                    };

                    /**
                     * Converts this SettingsLanguage to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.profile.SettingsLanguage
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SettingsLanguage.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Language enum.
                     * @name md.maib.app.profile.SettingsLanguage.Language
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} RO=1 RO value
                     * @property {number} RU=2 RU value
                     * @property {number} EN=3 EN value
                     */
                    SettingsLanguage.Language = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "RO"] = 1;
                        values[valuesById[2] = "RU"] = 2;
                        values[valuesById[3] = "EN"] = 3;
                        return values;
                    })();

                    return SettingsLanguage;
                })();

                return profile;
            })();

            app.predefinedCredit = (function() {

                /**
                 * Namespace predefinedCredit.
                 * @memberof md.maib.app
                 * @namespace
                 */
                const predefinedCredit = {};

                predefinedCredit.OfferInfoResponse = (function() {

                    /**
                     * Properties of an OfferInfoResponse.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface IOfferInfoResponse
                     * @property {number|Long|null} [creditRequestId] OfferInfoResponse creditRequestId
                     * @property {string|null} [productName] OfferInfoResponse productName
                     * @property {string|null} [creditCcy] OfferInfoResponse creditCcy
                     * @property {number|null} [minLimitAmount] OfferInfoResponse minLimitAmount
                     * @property {number|null} [maxLimitAmount] OfferInfoResponse maxLimitAmount
                     * @property {number|null} [minTerm] OfferInfoResponse minTerm
                     * @property {number|null} [maxTerm] OfferInfoResponse maxTerm
                     * @property {number|null} [interestRate] OfferInfoResponse interestRate
                     * @property {number|null} [maxAvailableMonthPay] OfferInfoResponse maxAvailableMonthPay
                     * @property {md.maib.app.predefinedCredit.IBannerSettings|null} [banner] OfferInfoResponse banner
                     * @property {number|Long|null} [dateFirstPay] OfferInfoResponse dateFirstPay
                     * @property {md.maib.app.predefinedCredit.ICreditCalcInfo|null} [calcInfo] OfferInfoResponse calcInfo
                     * @property {string|null} [errorMessage] OfferInfoResponse errorMessage
                     * @property {md.maib.app.predefinedCredit.OfferInfoResponse.Result|null} [result] OfferInfoResponse result
                     * @property {Array.<string>|null} [availableBins] OfferInfoResponse availableBins
                     */

                    /**
                     * Constructs a new OfferInfoResponse.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents an OfferInfoResponse.
                     * @implements IOfferInfoResponse
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.IOfferInfoResponse=} [properties] Properties to set
                     */
                    function OfferInfoResponse(properties) {
                        this.availableBins = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * OfferInfoResponse creditRequestId.
                     * @member {number|Long} creditRequestId
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.creditRequestId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * OfferInfoResponse productName.
                     * @member {string} productName
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.productName = "";

                    /**
                     * OfferInfoResponse creditCcy.
                     * @member {string} creditCcy
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.creditCcy = "";

                    /**
                     * OfferInfoResponse minLimitAmount.
                     * @member {number} minLimitAmount
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.minLimitAmount = 0;

                    /**
                     * OfferInfoResponse maxLimitAmount.
                     * @member {number} maxLimitAmount
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.maxLimitAmount = 0;

                    /**
                     * OfferInfoResponse minTerm.
                     * @member {number} minTerm
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.minTerm = 0;

                    /**
                     * OfferInfoResponse maxTerm.
                     * @member {number} maxTerm
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.maxTerm = 0;

                    /**
                     * OfferInfoResponse interestRate.
                     * @member {number} interestRate
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.interestRate = 0;

                    /**
                     * OfferInfoResponse maxAvailableMonthPay.
                     * @member {number} maxAvailableMonthPay
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.maxAvailableMonthPay = 0;

                    /**
                     * OfferInfoResponse banner.
                     * @member {md.maib.app.predefinedCredit.IBannerSettings|null|undefined} banner
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.banner = null;

                    /**
                     * OfferInfoResponse dateFirstPay.
                     * @member {number|Long} dateFirstPay
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.dateFirstPay = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * OfferInfoResponse calcInfo.
                     * @member {md.maib.app.predefinedCredit.ICreditCalcInfo|null|undefined} calcInfo
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.calcInfo = null;

                    /**
                     * OfferInfoResponse errorMessage.
                     * @member {string} errorMessage
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.errorMessage = "";

                    /**
                     * OfferInfoResponse result.
                     * @member {md.maib.app.predefinedCredit.OfferInfoResponse.Result} result
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.result = 0;

                    /**
                     * OfferInfoResponse availableBins.
                     * @member {Array.<string>} availableBins
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     */
                    OfferInfoResponse.prototype.availableBins = $util.emptyArray;

                    /**
                     * Creates a new OfferInfoResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.IOfferInfoResponse=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.OfferInfoResponse} OfferInfoResponse instance
                     */
                    OfferInfoResponse.create = function create(properties) {
                        return new OfferInfoResponse(properties);
                    };

                    /**
                     * Encodes the specified OfferInfoResponse message. Does not implicitly {@link md.maib.app.predefinedCredit.OfferInfoResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.IOfferInfoResponse} message OfferInfoResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OfferInfoResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.creditRequestId != null && Object.hasOwnProperty.call(message, "creditRequestId"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.creditRequestId);
                        if (message.productName != null && Object.hasOwnProperty.call(message, "productName"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.productName);
                        if (message.creditCcy != null && Object.hasOwnProperty.call(message, "creditCcy"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.creditCcy);
                        if (message.minLimitAmount != null && Object.hasOwnProperty.call(message, "minLimitAmount"))
                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.minLimitAmount);
                        if (message.maxLimitAmount != null && Object.hasOwnProperty.call(message, "maxLimitAmount"))
                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.maxLimitAmount);
                        if (message.minTerm != null && Object.hasOwnProperty.call(message, "minTerm"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.minTerm);
                        if (message.maxTerm != null && Object.hasOwnProperty.call(message, "maxTerm"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.maxTerm);
                        if (message.interestRate != null && Object.hasOwnProperty.call(message, "interestRate"))
                            writer.uint32(/* id 8, wireType 5 =*/69).float(message.interestRate);
                        if (message.maxAvailableMonthPay != null && Object.hasOwnProperty.call(message, "maxAvailableMonthPay"))
                            writer.uint32(/* id 9, wireType 1 =*/73).double(message.maxAvailableMonthPay);
                        if (message.banner != null && Object.hasOwnProperty.call(message, "banner"))
                            $root.md.maib.app.predefinedCredit.BannerSettings.encode(message.banner, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.dateFirstPay != null && Object.hasOwnProperty.call(message, "dateFirstPay"))
                            writer.uint32(/* id 11, wireType 0 =*/88).int64(message.dateFirstPay);
                        if (message.calcInfo != null && Object.hasOwnProperty.call(message, "calcInfo"))
                            $root.md.maib.app.predefinedCredit.CreditCalcInfo.encode(message.calcInfo, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                        if (message.errorMessage != null && Object.hasOwnProperty.call(message, "errorMessage"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.errorMessage);
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.result);
                        if (message.availableBins != null && message.availableBins.length)
                            for (let i = 0; i < message.availableBins.length; ++i)
                                writer.uint32(/* id 15, wireType 2 =*/122).string(message.availableBins[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified OfferInfoResponse message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.OfferInfoResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.IOfferInfoResponse} message OfferInfoResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OfferInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an OfferInfoResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.OfferInfoResponse} OfferInfoResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OfferInfoResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.OfferInfoResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.creditRequestId = reader.int64();
                                break;
                            case 2:
                                message.productName = reader.string();
                                break;
                            case 3:
                                message.creditCcy = reader.string();
                                break;
                            case 4:
                                message.minLimitAmount = reader.double();
                                break;
                            case 5:
                                message.maxLimitAmount = reader.double();
                                break;
                            case 6:
                                message.minTerm = reader.int32();
                                break;
                            case 7:
                                message.maxTerm = reader.int32();
                                break;
                            case 8:
                                message.interestRate = reader.float();
                                break;
                            case 9:
                                message.maxAvailableMonthPay = reader.double();
                                break;
                            case 10:
                                message.banner = $root.md.maib.app.predefinedCredit.BannerSettings.decode(reader, reader.uint32());
                                break;
                            case 11:
                                message.dateFirstPay = reader.int64();
                                break;
                            case 12:
                                message.calcInfo = $root.md.maib.app.predefinedCredit.CreditCalcInfo.decode(reader, reader.uint32());
                                break;
                            case 13:
                                message.errorMessage = reader.string();
                                break;
                            case 14:
                                message.result = reader.int32();
                                break;
                            case 15:
                                if (!(message.availableBins && message.availableBins.length))
                                    message.availableBins = [];
                                message.availableBins.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an OfferInfoResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.OfferInfoResponse} OfferInfoResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OfferInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an OfferInfoResponse message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OfferInfoResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.creditRequestId != null && message.hasOwnProperty("creditRequestId"))
                            if (!$util.isInteger(message.creditRequestId) && !(message.creditRequestId && $util.isInteger(message.creditRequestId.low) && $util.isInteger(message.creditRequestId.high)))
                                return "creditRequestId: integer|Long expected";
                        if (message.productName != null && message.hasOwnProperty("productName"))
                            if (!$util.isString(message.productName))
                                return "productName: string expected";
                        if (message.creditCcy != null && message.hasOwnProperty("creditCcy"))
                            if (!$util.isString(message.creditCcy))
                                return "creditCcy: string expected";
                        if (message.minLimitAmount != null && message.hasOwnProperty("minLimitAmount"))
                            if (typeof message.minLimitAmount !== "number")
                                return "minLimitAmount: number expected";
                        if (message.maxLimitAmount != null && message.hasOwnProperty("maxLimitAmount"))
                            if (typeof message.maxLimitAmount !== "number")
                                return "maxLimitAmount: number expected";
                        if (message.minTerm != null && message.hasOwnProperty("minTerm"))
                            if (!$util.isInteger(message.minTerm))
                                return "minTerm: integer expected";
                        if (message.maxTerm != null && message.hasOwnProperty("maxTerm"))
                            if (!$util.isInteger(message.maxTerm))
                                return "maxTerm: integer expected";
                        if (message.interestRate != null && message.hasOwnProperty("interestRate"))
                            if (typeof message.interestRate !== "number")
                                return "interestRate: number expected";
                        if (message.maxAvailableMonthPay != null && message.hasOwnProperty("maxAvailableMonthPay"))
                            if (typeof message.maxAvailableMonthPay !== "number")
                                return "maxAvailableMonthPay: number expected";
                        if (message.banner != null && message.hasOwnProperty("banner")) {
                            let error = $root.md.maib.app.predefinedCredit.BannerSettings.verify(message.banner);
                            if (error)
                                return "banner." + error;
                        }
                        if (message.dateFirstPay != null && message.hasOwnProperty("dateFirstPay"))
                            if (!$util.isInteger(message.dateFirstPay) && !(message.dateFirstPay && $util.isInteger(message.dateFirstPay.low) && $util.isInteger(message.dateFirstPay.high)))
                                return "dateFirstPay: integer|Long expected";
                        if (message.calcInfo != null && message.hasOwnProperty("calcInfo")) {
                            let error = $root.md.maib.app.predefinedCredit.CreditCalcInfo.verify(message.calcInfo);
                            if (error)
                                return "calcInfo." + error;
                        }
                        if (message.errorMessage != null && message.hasOwnProperty("errorMessage"))
                            if (!$util.isString(message.errorMessage))
                                return "errorMessage: string expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.availableBins != null && message.hasOwnProperty("availableBins")) {
                            if (!Array.isArray(message.availableBins))
                                return "availableBins: array expected";
                            for (let i = 0; i < message.availableBins.length; ++i)
                                if (!$util.isString(message.availableBins[i]))
                                    return "availableBins: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates an OfferInfoResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.OfferInfoResponse} OfferInfoResponse
                     */
                    OfferInfoResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.OfferInfoResponse)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.OfferInfoResponse();
                        if (object.creditRequestId != null)
                            if ($util.Long)
                                (message.creditRequestId = $util.Long.fromValue(object.creditRequestId)).unsigned = false;
                            else if (typeof object.creditRequestId === "string")
                                message.creditRequestId = parseInt(object.creditRequestId, 10);
                            else if (typeof object.creditRequestId === "number")
                                message.creditRequestId = object.creditRequestId;
                            else if (typeof object.creditRequestId === "object")
                                message.creditRequestId = new $util.LongBits(object.creditRequestId.low >>> 0, object.creditRequestId.high >>> 0).toNumber();
                        if (object.productName != null)
                            message.productName = String(object.productName);
                        if (object.creditCcy != null)
                            message.creditCcy = String(object.creditCcy);
                        if (object.minLimitAmount != null)
                            message.minLimitAmount = Number(object.minLimitAmount);
                        if (object.maxLimitAmount != null)
                            message.maxLimitAmount = Number(object.maxLimitAmount);
                        if (object.minTerm != null)
                            message.minTerm = object.minTerm | 0;
                        if (object.maxTerm != null)
                            message.maxTerm = object.maxTerm | 0;
                        if (object.interestRate != null)
                            message.interestRate = Number(object.interestRate);
                        if (object.maxAvailableMonthPay != null)
                            message.maxAvailableMonthPay = Number(object.maxAvailableMonthPay);
                        if (object.banner != null) {
                            if (typeof object.banner !== "object")
                                throw TypeError(".md.maib.app.predefinedCredit.OfferInfoResponse.banner: object expected");
                            message.banner = $root.md.maib.app.predefinedCredit.BannerSettings.fromObject(object.banner);
                        }
                        if (object.dateFirstPay != null)
                            if ($util.Long)
                                (message.dateFirstPay = $util.Long.fromValue(object.dateFirstPay)).unsigned = false;
                            else if (typeof object.dateFirstPay === "string")
                                message.dateFirstPay = parseInt(object.dateFirstPay, 10);
                            else if (typeof object.dateFirstPay === "number")
                                message.dateFirstPay = object.dateFirstPay;
                            else if (typeof object.dateFirstPay === "object")
                                message.dateFirstPay = new $util.LongBits(object.dateFirstPay.low >>> 0, object.dateFirstPay.high >>> 0).toNumber();
                        if (object.calcInfo != null) {
                            if (typeof object.calcInfo !== "object")
                                throw TypeError(".md.maib.app.predefinedCredit.OfferInfoResponse.calcInfo: object expected");
                            message.calcInfo = $root.md.maib.app.predefinedCredit.CreditCalcInfo.fromObject(object.calcInfo);
                        }
                        if (object.errorMessage != null)
                            message.errorMessage = String(object.errorMessage);
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "NOT_FOUND":
                        case 2:
                            message.result = 2;
                            break;
                        case "OFFER_IS_NOT_ACTIVE":
                        case 4:
                            message.result = 4;
                            break;
                        case "CALC_ERROR":
                        case 5:
                            message.result = 5;
                            break;
                        case "USER_CANT_TAKE_CREDIT":
                        case 6:
                            message.result = 6;
                            break;
                        case "TODAY_IS_NOT_OPER_DAY":
                        case 7:
                            message.result = 7;
                            break;
                        case "SERVER_ERROR":
                        case 8:
                            message.result = 8;
                            break;
                        case "EXCEEDED_PAY_MONTH":
                        case 9:
                            message.result = 9;
                            break;
                        }
                        if (object.availableBins) {
                            if (!Array.isArray(object.availableBins))
                                throw TypeError(".md.maib.app.predefinedCredit.OfferInfoResponse.availableBins: array expected");
                            message.availableBins = [];
                            for (let i = 0; i < object.availableBins.length; ++i)
                                message.availableBins[i] = String(object.availableBins[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an OfferInfoResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.OfferInfoResponse} message OfferInfoResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OfferInfoResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.availableBins = [];
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.creditRequestId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.creditRequestId = options.longs === String ? "0" : 0;
                            object.productName = "";
                            object.creditCcy = "";
                            object.minLimitAmount = 0;
                            object.maxLimitAmount = 0;
                            object.minTerm = 0;
                            object.maxTerm = 0;
                            object.interestRate = 0;
                            object.maxAvailableMonthPay = 0;
                            object.banner = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.dateFirstPay = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.dateFirstPay = options.longs === String ? "0" : 0;
                            object.calcInfo = null;
                            object.errorMessage = "";
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                        }
                        if (message.creditRequestId != null && message.hasOwnProperty("creditRequestId"))
                            if (typeof message.creditRequestId === "number")
                                object.creditRequestId = options.longs === String ? String(message.creditRequestId) : message.creditRequestId;
                            else
                                object.creditRequestId = options.longs === String ? $util.Long.prototype.toString.call(message.creditRequestId) : options.longs === Number ? new $util.LongBits(message.creditRequestId.low >>> 0, message.creditRequestId.high >>> 0).toNumber() : message.creditRequestId;
                        if (message.productName != null && message.hasOwnProperty("productName"))
                            object.productName = message.productName;
                        if (message.creditCcy != null && message.hasOwnProperty("creditCcy"))
                            object.creditCcy = message.creditCcy;
                        if (message.minLimitAmount != null && message.hasOwnProperty("minLimitAmount"))
                            object.minLimitAmount = options.json && !isFinite(message.minLimitAmount) ? String(message.minLimitAmount) : message.minLimitAmount;
                        if (message.maxLimitAmount != null && message.hasOwnProperty("maxLimitAmount"))
                            object.maxLimitAmount = options.json && !isFinite(message.maxLimitAmount) ? String(message.maxLimitAmount) : message.maxLimitAmount;
                        if (message.minTerm != null && message.hasOwnProperty("minTerm"))
                            object.minTerm = message.minTerm;
                        if (message.maxTerm != null && message.hasOwnProperty("maxTerm"))
                            object.maxTerm = message.maxTerm;
                        if (message.interestRate != null && message.hasOwnProperty("interestRate"))
                            object.interestRate = options.json && !isFinite(message.interestRate) ? String(message.interestRate) : message.interestRate;
                        if (message.maxAvailableMonthPay != null && message.hasOwnProperty("maxAvailableMonthPay"))
                            object.maxAvailableMonthPay = options.json && !isFinite(message.maxAvailableMonthPay) ? String(message.maxAvailableMonthPay) : message.maxAvailableMonthPay;
                        if (message.banner != null && message.hasOwnProperty("banner"))
                            object.banner = $root.md.maib.app.predefinedCredit.BannerSettings.toObject(message.banner, options);
                        if (message.dateFirstPay != null && message.hasOwnProperty("dateFirstPay"))
                            if (typeof message.dateFirstPay === "number")
                                object.dateFirstPay = options.longs === String ? String(message.dateFirstPay) : message.dateFirstPay;
                            else
                                object.dateFirstPay = options.longs === String ? $util.Long.prototype.toString.call(message.dateFirstPay) : options.longs === Number ? new $util.LongBits(message.dateFirstPay.low >>> 0, message.dateFirstPay.high >>> 0).toNumber() : message.dateFirstPay;
                        if (message.calcInfo != null && message.hasOwnProperty("calcInfo"))
                            object.calcInfo = $root.md.maib.app.predefinedCredit.CreditCalcInfo.toObject(message.calcInfo, options);
                        if (message.errorMessage != null && message.hasOwnProperty("errorMessage"))
                            object.errorMessage = message.errorMessage;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.predefinedCredit.OfferInfoResponse.Result[message.result] : message.result;
                        if (message.availableBins && message.availableBins.length) {
                            object.availableBins = [];
                            for (let j = 0; j < message.availableBins.length; ++j)
                                object.availableBins[j] = message.availableBins[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this OfferInfoResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.OfferInfoResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OfferInfoResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.predefinedCredit.OfferInfoResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} NOT_FOUND=2 NOT_FOUND value
                     * @property {number} OFFER_IS_NOT_ACTIVE=4 OFFER_IS_NOT_ACTIVE value
                     * @property {number} CALC_ERROR=5 CALC_ERROR value
                     * @property {number} USER_CANT_TAKE_CREDIT=6 USER_CANT_TAKE_CREDIT value
                     * @property {number} TODAY_IS_NOT_OPER_DAY=7 TODAY_IS_NOT_OPER_DAY value
                     * @property {number} SERVER_ERROR=8 SERVER_ERROR value
                     * @property {number} EXCEEDED_PAY_MONTH=9 EXCEEDED_PAY_MONTH value
                     */
                    OfferInfoResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "NOT_FOUND"] = 2;
                        values[valuesById[4] = "OFFER_IS_NOT_ACTIVE"] = 4;
                        values[valuesById[5] = "CALC_ERROR"] = 5;
                        values[valuesById[6] = "USER_CANT_TAKE_CREDIT"] = 6;
                        values[valuesById[7] = "TODAY_IS_NOT_OPER_DAY"] = 7;
                        values[valuesById[8] = "SERVER_ERROR"] = 8;
                        values[valuesById[9] = "EXCEEDED_PAY_MONTH"] = 9;
                        return values;
                    })();

                    return OfferInfoResponse;
                })();

                predefinedCredit.BannerSettings = (function() {

                    /**
                     * Properties of a BannerSettings.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface IBannerSettings
                     * @property {Uint8Array|null} [image] BannerSettings image
                     * @property {string|null} [text] BannerSettings text
                     * @property {number|null} [textSize] BannerSettings textSize
                     * @property {string|null} [textColor] BannerSettings textColor
                     * @property {string|null} [navigationBarColor] BannerSettings navigationBarColor
                     * @property {string|null} [bottomText] BannerSettings bottomText
                     * @property {number|null} [bottomTextSize] BannerSettings bottomTextSize
                     * @property {string|null} [bottomTextColor] BannerSettings bottomTextColor
                     */

                    /**
                     * Constructs a new BannerSettings.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents a BannerSettings.
                     * @implements IBannerSettings
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.IBannerSettings=} [properties] Properties to set
                     */
                    function BannerSettings(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * BannerSettings image.
                     * @member {Uint8Array} image
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @instance
                     */
                    BannerSettings.prototype.image = $util.newBuffer([]);

                    /**
                     * BannerSettings text.
                     * @member {string} text
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @instance
                     */
                    BannerSettings.prototype.text = "";

                    /**
                     * BannerSettings textSize.
                     * @member {number} textSize
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @instance
                     */
                    BannerSettings.prototype.textSize = 0;

                    /**
                     * BannerSettings textColor.
                     * @member {string} textColor
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @instance
                     */
                    BannerSettings.prototype.textColor = "";

                    /**
                     * BannerSettings navigationBarColor.
                     * @member {string} navigationBarColor
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @instance
                     */
                    BannerSettings.prototype.navigationBarColor = "";

                    /**
                     * BannerSettings bottomText.
                     * @member {string} bottomText
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @instance
                     */
                    BannerSettings.prototype.bottomText = "";

                    /**
                     * BannerSettings bottomTextSize.
                     * @member {number} bottomTextSize
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @instance
                     */
                    BannerSettings.prototype.bottomTextSize = 0;

                    /**
                     * BannerSettings bottomTextColor.
                     * @member {string} bottomTextColor
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @instance
                     */
                    BannerSettings.prototype.bottomTextColor = "";

                    /**
                     * Creates a new BannerSettings instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @static
                     * @param {md.maib.app.predefinedCredit.IBannerSettings=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.BannerSettings} BannerSettings instance
                     */
                    BannerSettings.create = function create(properties) {
                        return new BannerSettings(properties);
                    };

                    /**
                     * Encodes the specified BannerSettings message. Does not implicitly {@link md.maib.app.predefinedCredit.BannerSettings.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @static
                     * @param {md.maib.app.predefinedCredit.IBannerSettings} message BannerSettings message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BannerSettings.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.image);
                        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                        if (message.textSize != null && Object.hasOwnProperty.call(message, "textSize"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.textSize);
                        if (message.textColor != null && Object.hasOwnProperty.call(message, "textColor"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.textColor);
                        if (message.navigationBarColor != null && Object.hasOwnProperty.call(message, "navigationBarColor"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.navigationBarColor);
                        if (message.bottomText != null && Object.hasOwnProperty.call(message, "bottomText"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.bottomText);
                        if (message.bottomTextSize != null && Object.hasOwnProperty.call(message, "bottomTextSize"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.bottomTextSize);
                        if (message.bottomTextColor != null && Object.hasOwnProperty.call(message, "bottomTextColor"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.bottomTextColor);
                        return writer;
                    };

                    /**
                     * Encodes the specified BannerSettings message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.BannerSettings.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @static
                     * @param {md.maib.app.predefinedCredit.IBannerSettings} message BannerSettings message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BannerSettings.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a BannerSettings message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.BannerSettings} BannerSettings
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BannerSettings.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.BannerSettings();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.image = reader.bytes();
                                break;
                            case 2:
                                message.text = reader.string();
                                break;
                            case 3:
                                message.textSize = reader.int32();
                                break;
                            case 4:
                                message.textColor = reader.string();
                                break;
                            case 5:
                                message.navigationBarColor = reader.string();
                                break;
                            case 6:
                                message.bottomText = reader.string();
                                break;
                            case 7:
                                message.bottomTextSize = reader.int32();
                                break;
                            case 8:
                                message.bottomTextColor = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a BannerSettings message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.BannerSettings} BannerSettings
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BannerSettings.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a BannerSettings message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BannerSettings.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.image != null && message.hasOwnProperty("image"))
                            if (!(message.image && typeof message.image.length === "number" || $util.isString(message.image)))
                                return "image: buffer expected";
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        if (message.textSize != null && message.hasOwnProperty("textSize"))
                            if (!$util.isInteger(message.textSize))
                                return "textSize: integer expected";
                        if (message.textColor != null && message.hasOwnProperty("textColor"))
                            if (!$util.isString(message.textColor))
                                return "textColor: string expected";
                        if (message.navigationBarColor != null && message.hasOwnProperty("navigationBarColor"))
                            if (!$util.isString(message.navigationBarColor))
                                return "navigationBarColor: string expected";
                        if (message.bottomText != null && message.hasOwnProperty("bottomText"))
                            if (!$util.isString(message.bottomText))
                                return "bottomText: string expected";
                        if (message.bottomTextSize != null && message.hasOwnProperty("bottomTextSize"))
                            if (!$util.isInteger(message.bottomTextSize))
                                return "bottomTextSize: integer expected";
                        if (message.bottomTextColor != null && message.hasOwnProperty("bottomTextColor"))
                            if (!$util.isString(message.bottomTextColor))
                                return "bottomTextColor: string expected";
                        return null;
                    };

                    /**
                     * Creates a BannerSettings message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.BannerSettings} BannerSettings
                     */
                    BannerSettings.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.BannerSettings)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.BannerSettings();
                        if (object.image != null)
                            if (typeof object.image === "string")
                                $util.base64.decode(object.image, message.image = $util.newBuffer($util.base64.length(object.image)), 0);
                            else if (object.image.length)
                                message.image = object.image;
                        if (object.text != null)
                            message.text = String(object.text);
                        if (object.textSize != null)
                            message.textSize = object.textSize | 0;
                        if (object.textColor != null)
                            message.textColor = String(object.textColor);
                        if (object.navigationBarColor != null)
                            message.navigationBarColor = String(object.navigationBarColor);
                        if (object.bottomText != null)
                            message.bottomText = String(object.bottomText);
                        if (object.bottomTextSize != null)
                            message.bottomTextSize = object.bottomTextSize | 0;
                        if (object.bottomTextColor != null)
                            message.bottomTextColor = String(object.bottomTextColor);
                        return message;
                    };

                    /**
                     * Creates a plain object from a BannerSettings message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @static
                     * @param {md.maib.app.predefinedCredit.BannerSettings} message BannerSettings
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BannerSettings.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.image = "";
                            else {
                                object.image = [];
                                if (options.bytes !== Array)
                                    object.image = $util.newBuffer(object.image);
                            }
                            object.text = "";
                            object.textSize = 0;
                            object.textColor = "";
                            object.navigationBarColor = "";
                            object.bottomText = "";
                            object.bottomTextSize = 0;
                            object.bottomTextColor = "";
                        }
                        if (message.image != null && message.hasOwnProperty("image"))
                            object.image = options.bytes === String ? $util.base64.encode(message.image, 0, message.image.length) : options.bytes === Array ? Array.prototype.slice.call(message.image) : message.image;
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        if (message.textSize != null && message.hasOwnProperty("textSize"))
                            object.textSize = message.textSize;
                        if (message.textColor != null && message.hasOwnProperty("textColor"))
                            object.textColor = message.textColor;
                        if (message.navigationBarColor != null && message.hasOwnProperty("navigationBarColor"))
                            object.navigationBarColor = message.navigationBarColor;
                        if (message.bottomText != null && message.hasOwnProperty("bottomText"))
                            object.bottomText = message.bottomText;
                        if (message.bottomTextSize != null && message.hasOwnProperty("bottomTextSize"))
                            object.bottomTextSize = message.bottomTextSize;
                        if (message.bottomTextColor != null && message.hasOwnProperty("bottomTextColor"))
                            object.bottomTextColor = message.bottomTextColor;
                        return object;
                    };

                    /**
                     * Converts this BannerSettings to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.BannerSettings
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BannerSettings.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return BannerSettings;
                })();

                predefinedCredit.CreditCalcRequest = (function() {

                    /**
                     * Properties of a CreditCalcRequest.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface ICreditCalcRequest
                     * @property {number|Long|null} [requestId] CreditCalcRequest requestId
                     * @property {number|null} [amount] CreditCalcRequest amount
                     * @property {number|null} [period] CreditCalcRequest period
                     * @property {number|Long|null} [dateFirstPay] CreditCalcRequest dateFirstPay
                     */

                    /**
                     * Constructs a new CreditCalcRequest.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents a CreditCalcRequest.
                     * @implements ICreditCalcRequest
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.ICreditCalcRequest=} [properties] Properties to set
                     */
                    function CreditCalcRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CreditCalcRequest requestId.
                     * @member {number|Long} requestId
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @instance
                     */
                    CreditCalcRequest.prototype.requestId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * CreditCalcRequest amount.
                     * @member {number} amount
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @instance
                     */
                    CreditCalcRequest.prototype.amount = 0;

                    /**
                     * CreditCalcRequest period.
                     * @member {number} period
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @instance
                     */
                    CreditCalcRequest.prototype.period = 0;

                    /**
                     * CreditCalcRequest dateFirstPay.
                     * @member {number|Long} dateFirstPay
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @instance
                     */
                    CreditCalcRequest.prototype.dateFirstPay = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * Creates a new CreditCalcRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.ICreditCalcRequest=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.CreditCalcRequest} CreditCalcRequest instance
                     */
                    CreditCalcRequest.create = function create(properties) {
                        return new CreditCalcRequest(properties);
                    };

                    /**
                     * Encodes the specified CreditCalcRequest message. Does not implicitly {@link md.maib.app.predefinedCredit.CreditCalcRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.ICreditCalcRequest} message CreditCalcRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreditCalcRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.requestId);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.amount);
                        if (message.period != null && Object.hasOwnProperty.call(message, "period"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.period);
                        if (message.dateFirstPay != null && Object.hasOwnProperty.call(message, "dateFirstPay"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.dateFirstPay);
                        return writer;
                    };

                    /**
                     * Encodes the specified CreditCalcRequest message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.CreditCalcRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.ICreditCalcRequest} message CreditCalcRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreditCalcRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CreditCalcRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.CreditCalcRequest} CreditCalcRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreditCalcRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.CreditCalcRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.requestId = reader.int64();
                                break;
                            case 2:
                                message.amount = reader.double();
                                break;
                            case 3:
                                message.period = reader.int32();
                                break;
                            case 4:
                                message.dateFirstPay = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CreditCalcRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.CreditCalcRequest} CreditCalcRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreditCalcRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CreditCalcRequest message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreditCalcRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            if (!$util.isInteger(message.requestId) && !(message.requestId && $util.isInteger(message.requestId.low) && $util.isInteger(message.requestId.high)))
                                return "requestId: integer|Long expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (typeof message.amount !== "number")
                                return "amount: number expected";
                        if (message.period != null && message.hasOwnProperty("period"))
                            if (!$util.isInteger(message.period))
                                return "period: integer expected";
                        if (message.dateFirstPay != null && message.hasOwnProperty("dateFirstPay"))
                            if (!$util.isInteger(message.dateFirstPay) && !(message.dateFirstPay && $util.isInteger(message.dateFirstPay.low) && $util.isInteger(message.dateFirstPay.high)))
                                return "dateFirstPay: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a CreditCalcRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.CreditCalcRequest} CreditCalcRequest
                     */
                    CreditCalcRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.CreditCalcRequest)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.CreditCalcRequest();
                        if (object.requestId != null)
                            if ($util.Long)
                                (message.requestId = $util.Long.fromValue(object.requestId)).unsigned = false;
                            else if (typeof object.requestId === "string")
                                message.requestId = parseInt(object.requestId, 10);
                            else if (typeof object.requestId === "number")
                                message.requestId = object.requestId;
                            else if (typeof object.requestId === "object")
                                message.requestId = new $util.LongBits(object.requestId.low >>> 0, object.requestId.high >>> 0).toNumber();
                        if (object.amount != null)
                            message.amount = Number(object.amount);
                        if (object.period != null)
                            message.period = object.period | 0;
                        if (object.dateFirstPay != null)
                            if ($util.Long)
                                (message.dateFirstPay = $util.Long.fromValue(object.dateFirstPay)).unsigned = false;
                            else if (typeof object.dateFirstPay === "string")
                                message.dateFirstPay = parseInt(object.dateFirstPay, 10);
                            else if (typeof object.dateFirstPay === "number")
                                message.dateFirstPay = object.dateFirstPay;
                            else if (typeof object.dateFirstPay === "object")
                                message.dateFirstPay = new $util.LongBits(object.dateFirstPay.low >>> 0, object.dateFirstPay.high >>> 0).toNumber();
                        return message;
                    };

                    /**
                     * Creates a plain object from a CreditCalcRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.CreditCalcRequest} message CreditCalcRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreditCalcRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.requestId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.requestId = options.longs === String ? "0" : 0;
                            object.amount = 0;
                            object.period = 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.dateFirstPay = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.dateFirstPay = options.longs === String ? "0" : 0;
                        }
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            if (typeof message.requestId === "number")
                                object.requestId = options.longs === String ? String(message.requestId) : message.requestId;
                            else
                                object.requestId = options.longs === String ? $util.Long.prototype.toString.call(message.requestId) : options.longs === Number ? new $util.LongBits(message.requestId.low >>> 0, message.requestId.high >>> 0).toNumber() : message.requestId;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                        if (message.period != null && message.hasOwnProperty("period"))
                            object.period = message.period;
                        if (message.dateFirstPay != null && message.hasOwnProperty("dateFirstPay"))
                            if (typeof message.dateFirstPay === "number")
                                object.dateFirstPay = options.longs === String ? String(message.dateFirstPay) : message.dateFirstPay;
                            else
                                object.dateFirstPay = options.longs === String ? $util.Long.prototype.toString.call(message.dateFirstPay) : options.longs === Number ? new $util.LongBits(message.dateFirstPay.low >>> 0, message.dateFirstPay.high >>> 0).toNumber() : message.dateFirstPay;
                        return object;
                    };

                    /**
                     * Converts this CreditCalcRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.CreditCalcRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreditCalcRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CreditCalcRequest;
                })();

                predefinedCredit.CreditCalcResponse = (function() {

                    /**
                     * Properties of a CreditCalcResponse.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface ICreditCalcResponse
                     * @property {md.maib.app.predefinedCredit.ICreditCalcInfo|null} [calcInfo] CreditCalcResponse calcInfo
                     * @property {md.maib.app.predefinedCredit.CreditCalcResponse.Result|null} [result] CreditCalcResponse result
                     */

                    /**
                     * Constructs a new CreditCalcResponse.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents a CreditCalcResponse.
                     * @implements ICreditCalcResponse
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.ICreditCalcResponse=} [properties] Properties to set
                     */
                    function CreditCalcResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CreditCalcResponse calcInfo.
                     * @member {md.maib.app.predefinedCredit.ICreditCalcInfo|null|undefined} calcInfo
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @instance
                     */
                    CreditCalcResponse.prototype.calcInfo = null;

                    /**
                     * CreditCalcResponse result.
                     * @member {md.maib.app.predefinedCredit.CreditCalcResponse.Result} result
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @instance
                     */
                    CreditCalcResponse.prototype.result = 0;

                    /**
                     * Creates a new CreditCalcResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.ICreditCalcResponse=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.CreditCalcResponse} CreditCalcResponse instance
                     */
                    CreditCalcResponse.create = function create(properties) {
                        return new CreditCalcResponse(properties);
                    };

                    /**
                     * Encodes the specified CreditCalcResponse message. Does not implicitly {@link md.maib.app.predefinedCredit.CreditCalcResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.ICreditCalcResponse} message CreditCalcResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreditCalcResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.calcInfo != null && Object.hasOwnProperty.call(message, "calcInfo"))
                            $root.md.maib.app.predefinedCredit.CreditCalcInfo.encode(message.calcInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified CreditCalcResponse message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.CreditCalcResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.ICreditCalcResponse} message CreditCalcResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreditCalcResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CreditCalcResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.CreditCalcResponse} CreditCalcResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreditCalcResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.CreditCalcResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.calcInfo = $root.md.maib.app.predefinedCredit.CreditCalcInfo.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.result = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CreditCalcResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.CreditCalcResponse} CreditCalcResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreditCalcResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CreditCalcResponse message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreditCalcResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.calcInfo != null && message.hasOwnProperty("calcInfo")) {
                            let error = $root.md.maib.app.predefinedCredit.CreditCalcInfo.verify(message.calcInfo);
                            if (error)
                                return "calcInfo." + error;
                        }
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a CreditCalcResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.CreditCalcResponse} CreditCalcResponse
                     */
                    CreditCalcResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.CreditCalcResponse)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.CreditCalcResponse();
                        if (object.calcInfo != null) {
                            if (typeof object.calcInfo !== "object")
                                throw TypeError(".md.maib.app.predefinedCredit.CreditCalcResponse.calcInfo: object expected");
                            message.calcInfo = $root.md.maib.app.predefinedCredit.CreditCalcInfo.fromObject(object.calcInfo);
                        }
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "NOT_FOUND":
                        case 2:
                            message.result = 2;
                            break;
                        case "WRONG_INPUT":
                        case 3:
                            message.result = 3;
                            break;
                        case "EXCEEDED_PAY_MONTH":
                        case 4:
                            message.result = 4;
                            break;
                        case "SERVER_ERROR":
                        case 5:
                            message.result = 5;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a CreditCalcResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.CreditCalcResponse} message CreditCalcResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreditCalcResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.calcInfo = null;
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                        }
                        if (message.calcInfo != null && message.hasOwnProperty("calcInfo"))
                            object.calcInfo = $root.md.maib.app.predefinedCredit.CreditCalcInfo.toObject(message.calcInfo, options);
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.predefinedCredit.CreditCalcResponse.Result[message.result] : message.result;
                        return object;
                    };

                    /**
                     * Converts this CreditCalcResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.CreditCalcResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreditCalcResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.predefinedCredit.CreditCalcResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} NOT_FOUND=2 NOT_FOUND value
                     * @property {number} WRONG_INPUT=3 WRONG_INPUT value
                     * @property {number} EXCEEDED_PAY_MONTH=4 EXCEEDED_PAY_MONTH value
                     * @property {number} SERVER_ERROR=5 SERVER_ERROR value
                     */
                    CreditCalcResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "NOT_FOUND"] = 2;
                        values[valuesById[3] = "WRONG_INPUT"] = 3;
                        values[valuesById[4] = "EXCEEDED_PAY_MONTH"] = 4;
                        values[valuesById[5] = "SERVER_ERROR"] = 5;
                        return values;
                    })();

                    return CreditCalcResponse;
                })();

                predefinedCredit.CreditCalcInfo = (function() {

                    /**
                     * Properties of a CreditCalcInfo.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface ICreditCalcInfo
                     * @property {number|null} [daeRate] CreditCalcInfo daeRate
                     * @property {number|null} [ordinaryAmountFee] CreditCalcInfo ordinaryAmountFee
                     * @property {number|null} [maxMonthPay] CreditCalcInfo maxMonthPay
                     * @property {number|null} [amountCreditCard] CreditCalcInfo amountCreditCard
                     * @property {number|null} [totalPaymentCredit] CreditCalcInfo totalPaymentCredit
                     */

                    /**
                     * Constructs a new CreditCalcInfo.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents a CreditCalcInfo.
                     * @implements ICreditCalcInfo
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.ICreditCalcInfo=} [properties] Properties to set
                     */
                    function CreditCalcInfo(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CreditCalcInfo daeRate.
                     * @member {number} daeRate
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @instance
                     */
                    CreditCalcInfo.prototype.daeRate = 0;

                    /**
                     * CreditCalcInfo ordinaryAmountFee.
                     * @member {number} ordinaryAmountFee
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @instance
                     */
                    CreditCalcInfo.prototype.ordinaryAmountFee = 0;

                    /**
                     * CreditCalcInfo maxMonthPay.
                     * @member {number} maxMonthPay
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @instance
                     */
                    CreditCalcInfo.prototype.maxMonthPay = 0;

                    /**
                     * CreditCalcInfo amountCreditCard.
                     * @member {number} amountCreditCard
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @instance
                     */
                    CreditCalcInfo.prototype.amountCreditCard = 0;

                    /**
                     * CreditCalcInfo totalPaymentCredit.
                     * @member {number} totalPaymentCredit
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @instance
                     */
                    CreditCalcInfo.prototype.totalPaymentCredit = 0;

                    /**
                     * Creates a new CreditCalcInfo instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @static
                     * @param {md.maib.app.predefinedCredit.ICreditCalcInfo=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.CreditCalcInfo} CreditCalcInfo instance
                     */
                    CreditCalcInfo.create = function create(properties) {
                        return new CreditCalcInfo(properties);
                    };

                    /**
                     * Encodes the specified CreditCalcInfo message. Does not implicitly {@link md.maib.app.predefinedCredit.CreditCalcInfo.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @static
                     * @param {md.maib.app.predefinedCredit.ICreditCalcInfo} message CreditCalcInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreditCalcInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.daeRate != null && Object.hasOwnProperty.call(message, "daeRate"))
                            writer.uint32(/* id 1, wireType 5 =*/13).float(message.daeRate);
                        if (message.ordinaryAmountFee != null && Object.hasOwnProperty.call(message, "ordinaryAmountFee"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.ordinaryAmountFee);
                        if (message.maxMonthPay != null && Object.hasOwnProperty.call(message, "maxMonthPay"))
                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.maxMonthPay);
                        if (message.amountCreditCard != null && Object.hasOwnProperty.call(message, "amountCreditCard"))
                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.amountCreditCard);
                        if (message.totalPaymentCredit != null && Object.hasOwnProperty.call(message, "totalPaymentCredit"))
                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.totalPaymentCredit);
                        return writer;
                    };

                    /**
                     * Encodes the specified CreditCalcInfo message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.CreditCalcInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @static
                     * @param {md.maib.app.predefinedCredit.ICreditCalcInfo} message CreditCalcInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreditCalcInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CreditCalcInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.CreditCalcInfo} CreditCalcInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreditCalcInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.CreditCalcInfo();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.daeRate = reader.float();
                                break;
                            case 2:
                                message.ordinaryAmountFee = reader.double();
                                break;
                            case 3:
                                message.maxMonthPay = reader.double();
                                break;
                            case 4:
                                message.amountCreditCard = reader.double();
                                break;
                            case 5:
                                message.totalPaymentCredit = reader.double();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CreditCalcInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.CreditCalcInfo} CreditCalcInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreditCalcInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CreditCalcInfo message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreditCalcInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.daeRate != null && message.hasOwnProperty("daeRate"))
                            if (typeof message.daeRate !== "number")
                                return "daeRate: number expected";
                        if (message.ordinaryAmountFee != null && message.hasOwnProperty("ordinaryAmountFee"))
                            if (typeof message.ordinaryAmountFee !== "number")
                                return "ordinaryAmountFee: number expected";
                        if (message.maxMonthPay != null && message.hasOwnProperty("maxMonthPay"))
                            if (typeof message.maxMonthPay !== "number")
                                return "maxMonthPay: number expected";
                        if (message.amountCreditCard != null && message.hasOwnProperty("amountCreditCard"))
                            if (typeof message.amountCreditCard !== "number")
                                return "amountCreditCard: number expected";
                        if (message.totalPaymentCredit != null && message.hasOwnProperty("totalPaymentCredit"))
                            if (typeof message.totalPaymentCredit !== "number")
                                return "totalPaymentCredit: number expected";
                        return null;
                    };

                    /**
                     * Creates a CreditCalcInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.CreditCalcInfo} CreditCalcInfo
                     */
                    CreditCalcInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.CreditCalcInfo)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.CreditCalcInfo();
                        if (object.daeRate != null)
                            message.daeRate = Number(object.daeRate);
                        if (object.ordinaryAmountFee != null)
                            message.ordinaryAmountFee = Number(object.ordinaryAmountFee);
                        if (object.maxMonthPay != null)
                            message.maxMonthPay = Number(object.maxMonthPay);
                        if (object.amountCreditCard != null)
                            message.amountCreditCard = Number(object.amountCreditCard);
                        if (object.totalPaymentCredit != null)
                            message.totalPaymentCredit = Number(object.totalPaymentCredit);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CreditCalcInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @static
                     * @param {md.maib.app.predefinedCredit.CreditCalcInfo} message CreditCalcInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreditCalcInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.daeRate = 0;
                            object.ordinaryAmountFee = 0;
                            object.maxMonthPay = 0;
                            object.amountCreditCard = 0;
                            object.totalPaymentCredit = 0;
                        }
                        if (message.daeRate != null && message.hasOwnProperty("daeRate"))
                            object.daeRate = options.json && !isFinite(message.daeRate) ? String(message.daeRate) : message.daeRate;
                        if (message.ordinaryAmountFee != null && message.hasOwnProperty("ordinaryAmountFee"))
                            object.ordinaryAmountFee = options.json && !isFinite(message.ordinaryAmountFee) ? String(message.ordinaryAmountFee) : message.ordinaryAmountFee;
                        if (message.maxMonthPay != null && message.hasOwnProperty("maxMonthPay"))
                            object.maxMonthPay = options.json && !isFinite(message.maxMonthPay) ? String(message.maxMonthPay) : message.maxMonthPay;
                        if (message.amountCreditCard != null && message.hasOwnProperty("amountCreditCard"))
                            object.amountCreditCard = options.json && !isFinite(message.amountCreditCard) ? String(message.amountCreditCard) : message.amountCreditCard;
                        if (message.totalPaymentCredit != null && message.hasOwnProperty("totalPaymentCredit"))
                            object.totalPaymentCredit = options.json && !isFinite(message.totalPaymentCredit) ? String(message.totalPaymentCredit) : message.totalPaymentCredit;
                        return object;
                    };

                    /**
                     * Converts this CreditCalcInfo to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.CreditCalcInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreditCalcInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CreditCalcInfo;
                })();

                predefinedCredit.PreContractResponse = (function() {

                    /**
                     * Properties of a PreContractResponse.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface IPreContractResponse
                     * @property {Uint8Array|null} [preContract] PreContractResponse preContract
                     * @property {md.maib.app.predefinedCredit.PreContractResponse.Result|null} [result] PreContractResponse result
                     */

                    /**
                     * Constructs a new PreContractResponse.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents a PreContractResponse.
                     * @implements IPreContractResponse
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.IPreContractResponse=} [properties] Properties to set
                     */
                    function PreContractResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PreContractResponse preContract.
                     * @member {Uint8Array} preContract
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @instance
                     */
                    PreContractResponse.prototype.preContract = $util.newBuffer([]);

                    /**
                     * PreContractResponse result.
                     * @member {md.maib.app.predefinedCredit.PreContractResponse.Result} result
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @instance
                     */
                    PreContractResponse.prototype.result = 0;

                    /**
                     * Creates a new PreContractResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.IPreContractResponse=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.PreContractResponse} PreContractResponse instance
                     */
                    PreContractResponse.create = function create(properties) {
                        return new PreContractResponse(properties);
                    };

                    /**
                     * Encodes the specified PreContractResponse message. Does not implicitly {@link md.maib.app.predefinedCredit.PreContractResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.IPreContractResponse} message PreContractResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PreContractResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.preContract != null && Object.hasOwnProperty.call(message, "preContract"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.preContract);
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified PreContractResponse message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.PreContractResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.IPreContractResponse} message PreContractResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PreContractResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PreContractResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.PreContractResponse} PreContractResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PreContractResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.PreContractResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.preContract = reader.bytes();
                                break;
                            case 2:
                                message.result = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PreContractResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.PreContractResponse} PreContractResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PreContractResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PreContractResponse message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PreContractResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.preContract != null && message.hasOwnProperty("preContract"))
                            if (!(message.preContract && typeof message.preContract.length === "number" || $util.isString(message.preContract)))
                                return "preContract: buffer expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a PreContractResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.PreContractResponse} PreContractResponse
                     */
                    PreContractResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.PreContractResponse)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.PreContractResponse();
                        if (object.preContract != null)
                            if (typeof object.preContract === "string")
                                $util.base64.decode(object.preContract, message.preContract = $util.newBuffer($util.base64.length(object.preContract)), 0);
                            else if (object.preContract.length)
                                message.preContract = object.preContract;
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "NOT_FOUND":
                        case 2:
                            message.result = 2;
                            break;
                        case "SERVER_ERROR":
                        case 3:
                            message.result = 3;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a PreContractResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.PreContractResponse} message PreContractResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PreContractResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.preContract = "";
                            else {
                                object.preContract = [];
                                if (options.bytes !== Array)
                                    object.preContract = $util.newBuffer(object.preContract);
                            }
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                        }
                        if (message.preContract != null && message.hasOwnProperty("preContract"))
                            object.preContract = options.bytes === String ? $util.base64.encode(message.preContract, 0, message.preContract.length) : options.bytes === Array ? Array.prototype.slice.call(message.preContract) : message.preContract;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.predefinedCredit.PreContractResponse.Result[message.result] : message.result;
                        return object;
                    };

                    /**
                     * Converts this PreContractResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.PreContractResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PreContractResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.predefinedCredit.PreContractResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} NOT_FOUND=2 NOT_FOUND value
                     * @property {number} SERVER_ERROR=3 SERVER_ERROR value
                     */
                    PreContractResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "NOT_FOUND"] = 2;
                        values[valuesById[3] = "SERVER_ERROR"] = 3;
                        return values;
                    })();

                    return PreContractResponse;
                })();

                predefinedCredit.TakeCreditInitRequest = (function() {

                    /**
                     * Properties of a TakeCreditInitRequest.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface ITakeCreditInitRequest
                     * @property {number|Long|null} [requestId] TakeCreditInitRequest requestId
                     * @property {string|null} [cardAccount] TakeCreditInitRequest cardAccount
                     * @property {number|Long|null} [cardId] TakeCreditInitRequest cardId
                     * @property {string|null} [interestAccount] TakeCreditInitRequest interestAccount
                     * @property {boolean|null} [confirmPreContract] TakeCreditInitRequest confirmPreContract
                     * @property {boolean|null} [confirmConsentBIC] TakeCreditInitRequest confirmConsentBIC
                     * @property {string|null} [promoCode] TakeCreditInitRequest promoCode
                     */

                    /**
                     * Constructs a new TakeCreditInitRequest.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents a TakeCreditInitRequest.
                     * @implements ITakeCreditInitRequest
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.ITakeCreditInitRequest=} [properties] Properties to set
                     */
                    function TakeCreditInitRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TakeCreditInitRequest requestId.
                     * @member {number|Long} requestId
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @instance
                     */
                    TakeCreditInitRequest.prototype.requestId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * TakeCreditInitRequest cardAccount.
                     * @member {string} cardAccount
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @instance
                     */
                    TakeCreditInitRequest.prototype.cardAccount = "";

                    /**
                     * TakeCreditInitRequest cardId.
                     * @member {number|Long} cardId
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @instance
                     */
                    TakeCreditInitRequest.prototype.cardId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * TakeCreditInitRequest interestAccount.
                     * @member {string} interestAccount
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @instance
                     */
                    TakeCreditInitRequest.prototype.interestAccount = "";

                    /**
                     * TakeCreditInitRequest confirmPreContract.
                     * @member {boolean} confirmPreContract
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @instance
                     */
                    TakeCreditInitRequest.prototype.confirmPreContract = false;

                    /**
                     * TakeCreditInitRequest confirmConsentBIC.
                     * @member {boolean} confirmConsentBIC
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @instance
                     */
                    TakeCreditInitRequest.prototype.confirmConsentBIC = false;

                    /**
                     * TakeCreditInitRequest promoCode.
                     * @member {string} promoCode
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @instance
                     */
                    TakeCreditInitRequest.prototype.promoCode = "";

                    /**
                     * Creates a new TakeCreditInitRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditInitRequest=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.TakeCreditInitRequest} TakeCreditInitRequest instance
                     */
                    TakeCreditInitRequest.create = function create(properties) {
                        return new TakeCreditInitRequest(properties);
                    };

                    /**
                     * Encodes the specified TakeCreditInitRequest message. Does not implicitly {@link md.maib.app.predefinedCredit.TakeCreditInitRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditInitRequest} message TakeCreditInitRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TakeCreditInitRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.requestId);
                        if (message.cardAccount != null && Object.hasOwnProperty.call(message, "cardAccount"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.cardAccount);
                        if (message.cardId != null && Object.hasOwnProperty.call(message, "cardId"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.cardId);
                        if (message.interestAccount != null && Object.hasOwnProperty.call(message, "interestAccount"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.interestAccount);
                        if (message.confirmPreContract != null && Object.hasOwnProperty.call(message, "confirmPreContract"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.confirmPreContract);
                        if (message.confirmConsentBIC != null && Object.hasOwnProperty.call(message, "confirmConsentBIC"))
                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.confirmConsentBIC);
                        if (message.promoCode != null && Object.hasOwnProperty.call(message, "promoCode"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.promoCode);
                        return writer;
                    };

                    /**
                     * Encodes the specified TakeCreditInitRequest message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.TakeCreditInitRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditInitRequest} message TakeCreditInitRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TakeCreditInitRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TakeCreditInitRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.TakeCreditInitRequest} TakeCreditInitRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TakeCreditInitRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.TakeCreditInitRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.requestId = reader.int64();
                                break;
                            case 2:
                                message.cardAccount = reader.string();
                                break;
                            case 3:
                                message.cardId = reader.int64();
                                break;
                            case 4:
                                message.interestAccount = reader.string();
                                break;
                            case 5:
                                message.confirmPreContract = reader.bool();
                                break;
                            case 6:
                                message.confirmConsentBIC = reader.bool();
                                break;
                            case 7:
                                message.promoCode = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TakeCreditInitRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.TakeCreditInitRequest} TakeCreditInitRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TakeCreditInitRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TakeCreditInitRequest message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TakeCreditInitRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            if (!$util.isInteger(message.requestId) && !(message.requestId && $util.isInteger(message.requestId.low) && $util.isInteger(message.requestId.high)))
                                return "requestId: integer|Long expected";
                        if (message.cardAccount != null && message.hasOwnProperty("cardAccount"))
                            if (!$util.isString(message.cardAccount))
                                return "cardAccount: string expected";
                        if (message.cardId != null && message.hasOwnProperty("cardId"))
                            if (!$util.isInteger(message.cardId) && !(message.cardId && $util.isInteger(message.cardId.low) && $util.isInteger(message.cardId.high)))
                                return "cardId: integer|Long expected";
                        if (message.interestAccount != null && message.hasOwnProperty("interestAccount"))
                            if (!$util.isString(message.interestAccount))
                                return "interestAccount: string expected";
                        if (message.confirmPreContract != null && message.hasOwnProperty("confirmPreContract"))
                            if (typeof message.confirmPreContract !== "boolean")
                                return "confirmPreContract: boolean expected";
                        if (message.confirmConsentBIC != null && message.hasOwnProperty("confirmConsentBIC"))
                            if (typeof message.confirmConsentBIC !== "boolean")
                                return "confirmConsentBIC: boolean expected";
                        if (message.promoCode != null && message.hasOwnProperty("promoCode"))
                            if (!$util.isString(message.promoCode))
                                return "promoCode: string expected";
                        return null;
                    };

                    /**
                     * Creates a TakeCreditInitRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.TakeCreditInitRequest} TakeCreditInitRequest
                     */
                    TakeCreditInitRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.TakeCreditInitRequest)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.TakeCreditInitRequest();
                        if (object.requestId != null)
                            if ($util.Long)
                                (message.requestId = $util.Long.fromValue(object.requestId)).unsigned = false;
                            else if (typeof object.requestId === "string")
                                message.requestId = parseInt(object.requestId, 10);
                            else if (typeof object.requestId === "number")
                                message.requestId = object.requestId;
                            else if (typeof object.requestId === "object")
                                message.requestId = new $util.LongBits(object.requestId.low >>> 0, object.requestId.high >>> 0).toNumber();
                        if (object.cardAccount != null)
                            message.cardAccount = String(object.cardAccount);
                        if (object.cardId != null)
                            if ($util.Long)
                                (message.cardId = $util.Long.fromValue(object.cardId)).unsigned = false;
                            else if (typeof object.cardId === "string")
                                message.cardId = parseInt(object.cardId, 10);
                            else if (typeof object.cardId === "number")
                                message.cardId = object.cardId;
                            else if (typeof object.cardId === "object")
                                message.cardId = new $util.LongBits(object.cardId.low >>> 0, object.cardId.high >>> 0).toNumber();
                        if (object.interestAccount != null)
                            message.interestAccount = String(object.interestAccount);
                        if (object.confirmPreContract != null)
                            message.confirmPreContract = Boolean(object.confirmPreContract);
                        if (object.confirmConsentBIC != null)
                            message.confirmConsentBIC = Boolean(object.confirmConsentBIC);
                        if (object.promoCode != null)
                            message.promoCode = String(object.promoCode);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TakeCreditInitRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.TakeCreditInitRequest} message TakeCreditInitRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TakeCreditInitRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.requestId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.requestId = options.longs === String ? "0" : 0;
                            object.cardAccount = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.cardId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.cardId = options.longs === String ? "0" : 0;
                            object.interestAccount = "";
                            object.confirmPreContract = false;
                            object.confirmConsentBIC = false;
                            object.promoCode = "";
                        }
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            if (typeof message.requestId === "number")
                                object.requestId = options.longs === String ? String(message.requestId) : message.requestId;
                            else
                                object.requestId = options.longs === String ? $util.Long.prototype.toString.call(message.requestId) : options.longs === Number ? new $util.LongBits(message.requestId.low >>> 0, message.requestId.high >>> 0).toNumber() : message.requestId;
                        if (message.cardAccount != null && message.hasOwnProperty("cardAccount"))
                            object.cardAccount = message.cardAccount;
                        if (message.cardId != null && message.hasOwnProperty("cardId"))
                            if (typeof message.cardId === "number")
                                object.cardId = options.longs === String ? String(message.cardId) : message.cardId;
                            else
                                object.cardId = options.longs === String ? $util.Long.prototype.toString.call(message.cardId) : options.longs === Number ? new $util.LongBits(message.cardId.low >>> 0, message.cardId.high >>> 0).toNumber() : message.cardId;
                        if (message.interestAccount != null && message.hasOwnProperty("interestAccount"))
                            object.interestAccount = message.interestAccount;
                        if (message.confirmPreContract != null && message.hasOwnProperty("confirmPreContract"))
                            object.confirmPreContract = message.confirmPreContract;
                        if (message.confirmConsentBIC != null && message.hasOwnProperty("confirmConsentBIC"))
                            object.confirmConsentBIC = message.confirmConsentBIC;
                        if (message.promoCode != null && message.hasOwnProperty("promoCode"))
                            object.promoCode = message.promoCode;
                        return object;
                    };

                    /**
                     * Converts this TakeCreditInitRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TakeCreditInitRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TakeCreditInitRequest;
                })();

                predefinedCredit.TakeCreditInitResponse = (function() {

                    /**
                     * Properties of a TakeCreditInitResponse.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface ITakeCreditInitResponse
                     * @property {Uint8Array|null} [contract] TakeCreditInitResponse contract
                     * @property {md.maib.app.predefinedCredit.TakeCreditInitResponse.Result|null} [result] TakeCreditInitResponse result
                     */

                    /**
                     * Constructs a new TakeCreditInitResponse.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents a TakeCreditInitResponse.
                     * @implements ITakeCreditInitResponse
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.ITakeCreditInitResponse=} [properties] Properties to set
                     */
                    function TakeCreditInitResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TakeCreditInitResponse contract.
                     * @member {Uint8Array} contract
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @instance
                     */
                    TakeCreditInitResponse.prototype.contract = $util.newBuffer([]);

                    /**
                     * TakeCreditInitResponse result.
                     * @member {md.maib.app.predefinedCredit.TakeCreditInitResponse.Result} result
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @instance
                     */
                    TakeCreditInitResponse.prototype.result = 0;

                    /**
                     * Creates a new TakeCreditInitResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditInitResponse=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.TakeCreditInitResponse} TakeCreditInitResponse instance
                     */
                    TakeCreditInitResponse.create = function create(properties) {
                        return new TakeCreditInitResponse(properties);
                    };

                    /**
                     * Encodes the specified TakeCreditInitResponse message. Does not implicitly {@link md.maib.app.predefinedCredit.TakeCreditInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditInitResponse} message TakeCreditInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TakeCreditInitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.contract);
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified TakeCreditInitResponse message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.TakeCreditInitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditInitResponse} message TakeCreditInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TakeCreditInitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TakeCreditInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.TakeCreditInitResponse} TakeCreditInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TakeCreditInitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.TakeCreditInitResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.contract = reader.bytes();
                                break;
                            case 2:
                                message.result = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TakeCreditInitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.TakeCreditInitResponse} TakeCreditInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TakeCreditInitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TakeCreditInitResponse message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TakeCreditInitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.contract != null && message.hasOwnProperty("contract"))
                            if (!(message.contract && typeof message.contract.length === "number" || $util.isString(message.contract)))
                                return "contract: buffer expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a TakeCreditInitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.TakeCreditInitResponse} TakeCreditInitResponse
                     */
                    TakeCreditInitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.TakeCreditInitResponse)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.TakeCreditInitResponse();
                        if (object.contract != null)
                            if (typeof object.contract === "string")
                                $util.base64.decode(object.contract, message.contract = $util.newBuffer($util.base64.length(object.contract)), 0);
                            else if (object.contract.length)
                                message.contract = object.contract;
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "WRONG_INPUT":
                        case 2:
                            message.result = 2;
                            break;
                        case "EXCEEDED_OTP_LIMIT":
                        case 3:
                            message.result = 3;
                            break;
                        case "NOT_FOUND":
                        case 4:
                            message.result = 4;
                            break;
                        case "OFFER_IS_NOT_ACTIVE":
                        case 5:
                            message.result = 5;
                            break;
                        case "GPS_REQUIRED":
                        case 6:
                            message.result = 6;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TakeCreditInitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.TakeCreditInitResponse} message TakeCreditInitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TakeCreditInitResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.contract = "";
                            else {
                                object.contract = [];
                                if (options.bytes !== Array)
                                    object.contract = $util.newBuffer(object.contract);
                            }
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                        }
                        if (message.contract != null && message.hasOwnProperty("contract"))
                            object.contract = options.bytes === String ? $util.base64.encode(message.contract, 0, message.contract.length) : options.bytes === Array ? Array.prototype.slice.call(message.contract) : message.contract;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.predefinedCredit.TakeCreditInitResponse.Result[message.result] : message.result;
                        return object;
                    };

                    /**
                     * Converts this TakeCreditInitResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.TakeCreditInitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TakeCreditInitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.predefinedCredit.TakeCreditInitResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} WRONG_INPUT=2 WRONG_INPUT value
                     * @property {number} EXCEEDED_OTP_LIMIT=3 EXCEEDED_OTP_LIMIT value
                     * @property {number} NOT_FOUND=4 NOT_FOUND value
                     * @property {number} OFFER_IS_NOT_ACTIVE=5 OFFER_IS_NOT_ACTIVE value
                     * @property {number} GPS_REQUIRED=6 GPS_REQUIRED value
                     */
                    TakeCreditInitResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "WRONG_INPUT"] = 2;
                        values[valuesById[3] = "EXCEEDED_OTP_LIMIT"] = 3;
                        values[valuesById[4] = "NOT_FOUND"] = 4;
                        values[valuesById[5] = "OFFER_IS_NOT_ACTIVE"] = 5;
                        values[valuesById[6] = "GPS_REQUIRED"] = 6;
                        return values;
                    })();

                    return TakeCreditInitResponse;
                })();

                predefinedCredit.TakeCreditConfirmRequest = (function() {

                    /**
                     * Properties of a TakeCreditConfirmRequest.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface ITakeCreditConfirmRequest
                     * @property {number|Long|null} [requestId] TakeCreditConfirmRequest requestId
                     * @property {string|null} [otp] TakeCreditConfirmRequest otp
                     * @property {md.maib.app.util.OtpType|null} [otpType] TakeCreditConfirmRequest otpType
                     */

                    /**
                     * Constructs a new TakeCreditConfirmRequest.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents a TakeCreditConfirmRequest.
                     * @implements ITakeCreditConfirmRequest
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.ITakeCreditConfirmRequest=} [properties] Properties to set
                     */
                    function TakeCreditConfirmRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TakeCreditConfirmRequest requestId.
                     * @member {number|Long} requestId
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @instance
                     */
                    TakeCreditConfirmRequest.prototype.requestId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * TakeCreditConfirmRequest otp.
                     * @member {string} otp
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @instance
                     */
                    TakeCreditConfirmRequest.prototype.otp = "";

                    /**
                     * TakeCreditConfirmRequest otpType.
                     * @member {md.maib.app.util.OtpType} otpType
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @instance
                     */
                    TakeCreditConfirmRequest.prototype.otpType = 0;

                    /**
                     * Creates a new TakeCreditConfirmRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditConfirmRequest=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.TakeCreditConfirmRequest} TakeCreditConfirmRequest instance
                     */
                    TakeCreditConfirmRequest.create = function create(properties) {
                        return new TakeCreditConfirmRequest(properties);
                    };

                    /**
                     * Encodes the specified TakeCreditConfirmRequest message. Does not implicitly {@link md.maib.app.predefinedCredit.TakeCreditConfirmRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditConfirmRequest} message TakeCreditConfirmRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TakeCreditConfirmRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.requestId);
                        if (message.otp != null && Object.hasOwnProperty.call(message, "otp"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.otp);
                        if (message.otpType != null && Object.hasOwnProperty.call(message, "otpType"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.otpType);
                        return writer;
                    };

                    /**
                     * Encodes the specified TakeCreditConfirmRequest message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.TakeCreditConfirmRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditConfirmRequest} message TakeCreditConfirmRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TakeCreditConfirmRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TakeCreditConfirmRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.TakeCreditConfirmRequest} TakeCreditConfirmRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TakeCreditConfirmRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.TakeCreditConfirmRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.requestId = reader.int64();
                                break;
                            case 2:
                                message.otp = reader.string();
                                break;
                            case 3:
                                message.otpType = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TakeCreditConfirmRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.TakeCreditConfirmRequest} TakeCreditConfirmRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TakeCreditConfirmRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TakeCreditConfirmRequest message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TakeCreditConfirmRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            if (!$util.isInteger(message.requestId) && !(message.requestId && $util.isInteger(message.requestId.low) && $util.isInteger(message.requestId.high)))
                                return "requestId: integer|Long expected";
                        if (message.otp != null && message.hasOwnProperty("otp"))
                            if (!$util.isString(message.otp))
                                return "otp: string expected";
                        if (message.otpType != null && message.hasOwnProperty("otpType"))
                            switch (message.otpType) {
                            default:
                                return "otpType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a TakeCreditConfirmRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.TakeCreditConfirmRequest} TakeCreditConfirmRequest
                     */
                    TakeCreditConfirmRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.TakeCreditConfirmRequest)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.TakeCreditConfirmRequest();
                        if (object.requestId != null)
                            if ($util.Long)
                                (message.requestId = $util.Long.fromValue(object.requestId)).unsigned = false;
                            else if (typeof object.requestId === "string")
                                message.requestId = parseInt(object.requestId, 10);
                            else if (typeof object.requestId === "number")
                                message.requestId = object.requestId;
                            else if (typeof object.requestId === "object")
                                message.requestId = new $util.LongBits(object.requestId.low >>> 0, object.requestId.high >>> 0).toNumber();
                        if (object.otp != null)
                            message.otp = String(object.otp);
                        switch (object.otpType) {
                        case "UNKNOWN":
                        case 0:
                            message.otpType = 0;
                            break;
                        case "AUTOMATIC":
                        case 1:
                            message.otpType = 1;
                            break;
                        case "MANUAL":
                        case 2:
                            message.otpType = 2;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TakeCreditConfirmRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.TakeCreditConfirmRequest} message TakeCreditConfirmRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TakeCreditConfirmRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.requestId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.requestId = options.longs === String ? "0" : 0;
                            object.otp = "";
                            object.otpType = options.enums === String ? "UNKNOWN" : 0;
                        }
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            if (typeof message.requestId === "number")
                                object.requestId = options.longs === String ? String(message.requestId) : message.requestId;
                            else
                                object.requestId = options.longs === String ? $util.Long.prototype.toString.call(message.requestId) : options.longs === Number ? new $util.LongBits(message.requestId.low >>> 0, message.requestId.high >>> 0).toNumber() : message.requestId;
                        if (message.otp != null && message.hasOwnProperty("otp"))
                            object.otp = message.otp;
                        if (message.otpType != null && message.hasOwnProperty("otpType"))
                            object.otpType = options.enums === String ? $root.md.maib.app.util.OtpType[message.otpType] : message.otpType;
                        return object;
                    };

                    /**
                     * Converts this TakeCreditConfirmRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TakeCreditConfirmRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TakeCreditConfirmRequest;
                })();

                predefinedCredit.TakeCreditConfirmResponse = (function() {

                    /**
                     * Properties of a TakeCreditConfirmResponse.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface ITakeCreditConfirmResponse
                     * @property {string|null} [errorMessage] TakeCreditConfirmResponse errorMessage
                     * @property {md.maib.app.predefinedCredit.TakeCreditConfirmResponse.Result|null} [result] TakeCreditConfirmResponse result
                     * @property {boolean|null} [retryAttempt] TakeCreditConfirmResponse retryAttempt
                     */

                    /**
                     * Constructs a new TakeCreditConfirmResponse.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents a TakeCreditConfirmResponse.
                     * @implements ITakeCreditConfirmResponse
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.ITakeCreditConfirmResponse=} [properties] Properties to set
                     */
                    function TakeCreditConfirmResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TakeCreditConfirmResponse errorMessage.
                     * @member {string} errorMessage
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @instance
                     */
                    TakeCreditConfirmResponse.prototype.errorMessage = "";

                    /**
                     * TakeCreditConfirmResponse result.
                     * @member {md.maib.app.predefinedCredit.TakeCreditConfirmResponse.Result} result
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @instance
                     */
                    TakeCreditConfirmResponse.prototype.result = 0;

                    /**
                     * TakeCreditConfirmResponse retryAttempt.
                     * @member {boolean} retryAttempt
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @instance
                     */
                    TakeCreditConfirmResponse.prototype.retryAttempt = false;

                    /**
                     * Creates a new TakeCreditConfirmResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditConfirmResponse=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.TakeCreditConfirmResponse} TakeCreditConfirmResponse instance
                     */
                    TakeCreditConfirmResponse.create = function create(properties) {
                        return new TakeCreditConfirmResponse(properties);
                    };

                    /**
                     * Encodes the specified TakeCreditConfirmResponse message. Does not implicitly {@link md.maib.app.predefinedCredit.TakeCreditConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditConfirmResponse} message TakeCreditConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TakeCreditConfirmResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.errorMessage != null && Object.hasOwnProperty.call(message, "errorMessage"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.errorMessage);
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
                        if (message.retryAttempt != null && Object.hasOwnProperty.call(message, "retryAttempt"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.retryAttempt);
                        return writer;
                    };

                    /**
                     * Encodes the specified TakeCreditConfirmResponse message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.TakeCreditConfirmResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.ITakeCreditConfirmResponse} message TakeCreditConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TakeCreditConfirmResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TakeCreditConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.TakeCreditConfirmResponse} TakeCreditConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TakeCreditConfirmResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.TakeCreditConfirmResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.errorMessage = reader.string();
                                break;
                            case 2:
                                message.result = reader.int32();
                                break;
                            case 3:
                                message.retryAttempt = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TakeCreditConfirmResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.TakeCreditConfirmResponse} TakeCreditConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TakeCreditConfirmResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TakeCreditConfirmResponse message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TakeCreditConfirmResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.errorMessage != null && message.hasOwnProperty("errorMessage"))
                            if (!$util.isString(message.errorMessage))
                                return "errorMessage: string expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            }
                        if (message.retryAttempt != null && message.hasOwnProperty("retryAttempt"))
                            if (typeof message.retryAttempt !== "boolean")
                                return "retryAttempt: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a TakeCreditConfirmResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.TakeCreditConfirmResponse} TakeCreditConfirmResponse
                     */
                    TakeCreditConfirmResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.TakeCreditConfirmResponse)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.TakeCreditConfirmResponse();
                        if (object.errorMessage != null)
                            message.errorMessage = String(object.errorMessage);
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "SERVER_ERROR":
                        case 2:
                            message.result = 2;
                            break;
                        case "WRONG_OTP":
                        case 3:
                            message.result = 3;
                            break;
                        case "OTP_SUBMIT_LIMIT_EXCEEDED":
                        case 4:
                            message.result = 4;
                            break;
                        case "OFFER_IS_NOT_ACTIVE":
                        case 5:
                            message.result = 5;
                            break;
                        case "CERBER_REJECT":
                        case 6:
                            message.result = 6;
                            break;
                        case "SENT_TO_CC":
                        case 7:
                            message.result = 7;
                            break;
                        }
                        if (object.retryAttempt != null)
                            message.retryAttempt = Boolean(object.retryAttempt);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TakeCreditConfirmResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @static
                     * @param {md.maib.app.predefinedCredit.TakeCreditConfirmResponse} message TakeCreditConfirmResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TakeCreditConfirmResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.errorMessage = "";
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                            object.retryAttempt = false;
                        }
                        if (message.errorMessage != null && message.hasOwnProperty("errorMessage"))
                            object.errorMessage = message.errorMessage;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.predefinedCredit.TakeCreditConfirmResponse.Result[message.result] : message.result;
                        if (message.retryAttempt != null && message.hasOwnProperty("retryAttempt"))
                            object.retryAttempt = message.retryAttempt;
                        return object;
                    };

                    /**
                     * Converts this TakeCreditConfirmResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.TakeCreditConfirmResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TakeCreditConfirmResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.predefinedCredit.TakeCreditConfirmResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} SERVER_ERROR=2 SERVER_ERROR value
                     * @property {number} WRONG_OTP=3 WRONG_OTP value
                     * @property {number} OTP_SUBMIT_LIMIT_EXCEEDED=4 OTP_SUBMIT_LIMIT_EXCEEDED value
                     * @property {number} OFFER_IS_NOT_ACTIVE=5 OFFER_IS_NOT_ACTIVE value
                     * @property {number} CERBER_REJECT=6 CERBER_REJECT value
                     * @property {number} SENT_TO_CC=7 SENT_TO_CC value
                     */
                    TakeCreditConfirmResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "SERVER_ERROR"] = 2;
                        values[valuesById[3] = "WRONG_OTP"] = 3;
                        values[valuesById[4] = "OTP_SUBMIT_LIMIT_EXCEEDED"] = 4;
                        values[valuesById[5] = "OFFER_IS_NOT_ACTIVE"] = 5;
                        values[valuesById[6] = "CERBER_REJECT"] = 6;
                        values[valuesById[7] = "SENT_TO_CC"] = 7;
                        return values;
                    })();

                    return TakeCreditConfirmResponse;
                })();

                predefinedCredit.PaymentScheduleAdminRequest = (function() {

                    /**
                     * Properties of a PaymentScheduleAdminRequest.
                     * @memberof md.maib.app.predefinedCredit
                     * @interface IPaymentScheduleAdminRequest
                     * @property {number|Long|null} [customerId] PaymentScheduleAdminRequest customerId
                     * @property {string|null} [creditAccount] PaymentScheduleAdminRequest creditAccount
                     */

                    /**
                     * Constructs a new PaymentScheduleAdminRequest.
                     * @memberof md.maib.app.predefinedCredit
                     * @classdesc Represents a PaymentScheduleAdminRequest.
                     * @implements IPaymentScheduleAdminRequest
                     * @constructor
                     * @param {md.maib.app.predefinedCredit.IPaymentScheduleAdminRequest=} [properties] Properties to set
                     */
                    function PaymentScheduleAdminRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PaymentScheduleAdminRequest customerId.
                     * @member {number|Long} customerId
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @instance
                     */
                    PaymentScheduleAdminRequest.prototype.customerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * PaymentScheduleAdminRequest creditAccount.
                     * @member {string} creditAccount
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @instance
                     */
                    PaymentScheduleAdminRequest.prototype.creditAccount = "";

                    /**
                     * Creates a new PaymentScheduleAdminRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.IPaymentScheduleAdminRequest=} [properties] Properties to set
                     * @returns {md.maib.app.predefinedCredit.PaymentScheduleAdminRequest} PaymentScheduleAdminRequest instance
                     */
                    PaymentScheduleAdminRequest.create = function create(properties) {
                        return new PaymentScheduleAdminRequest(properties);
                    };

                    /**
                     * Encodes the specified PaymentScheduleAdminRequest message. Does not implicitly {@link md.maib.app.predefinedCredit.PaymentScheduleAdminRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.IPaymentScheduleAdminRequest} message PaymentScheduleAdminRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PaymentScheduleAdminRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.customerId != null && Object.hasOwnProperty.call(message, "customerId"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.customerId);
                        if (message.creditAccount != null && Object.hasOwnProperty.call(message, "creditAccount"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.creditAccount);
                        return writer;
                    };

                    /**
                     * Encodes the specified PaymentScheduleAdminRequest message, length delimited. Does not implicitly {@link md.maib.app.predefinedCredit.PaymentScheduleAdminRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.IPaymentScheduleAdminRequest} message PaymentScheduleAdminRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PaymentScheduleAdminRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PaymentScheduleAdminRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.predefinedCredit.PaymentScheduleAdminRequest} PaymentScheduleAdminRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PaymentScheduleAdminRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.predefinedCredit.PaymentScheduleAdminRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.customerId = reader.int64();
                                break;
                            case 2:
                                message.creditAccount = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PaymentScheduleAdminRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.predefinedCredit.PaymentScheduleAdminRequest} PaymentScheduleAdminRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PaymentScheduleAdminRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PaymentScheduleAdminRequest message.
                     * @function verify
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PaymentScheduleAdminRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.customerId != null && message.hasOwnProperty("customerId"))
                            if (!$util.isInteger(message.customerId) && !(message.customerId && $util.isInteger(message.customerId.low) && $util.isInteger(message.customerId.high)))
                                return "customerId: integer|Long expected";
                        if (message.creditAccount != null && message.hasOwnProperty("creditAccount"))
                            if (!$util.isString(message.creditAccount))
                                return "creditAccount: string expected";
                        return null;
                    };

                    /**
                     * Creates a PaymentScheduleAdminRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.predefinedCredit.PaymentScheduleAdminRequest} PaymentScheduleAdminRequest
                     */
                    PaymentScheduleAdminRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.predefinedCredit.PaymentScheduleAdminRequest)
                            return object;
                        let message = new $root.md.maib.app.predefinedCredit.PaymentScheduleAdminRequest();
                        if (object.customerId != null)
                            if ($util.Long)
                                (message.customerId = $util.Long.fromValue(object.customerId)).unsigned = false;
                            else if (typeof object.customerId === "string")
                                message.customerId = parseInt(object.customerId, 10);
                            else if (typeof object.customerId === "number")
                                message.customerId = object.customerId;
                            else if (typeof object.customerId === "object")
                                message.customerId = new $util.LongBits(object.customerId.low >>> 0, object.customerId.high >>> 0).toNumber();
                        if (object.creditAccount != null)
                            message.creditAccount = String(object.creditAccount);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PaymentScheduleAdminRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @static
                     * @param {md.maib.app.predefinedCredit.PaymentScheduleAdminRequest} message PaymentScheduleAdminRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PaymentScheduleAdminRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.customerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.customerId = options.longs === String ? "0" : 0;
                            object.creditAccount = "";
                        }
                        if (message.customerId != null && message.hasOwnProperty("customerId"))
                            if (typeof message.customerId === "number")
                                object.customerId = options.longs === String ? String(message.customerId) : message.customerId;
                            else
                                object.customerId = options.longs === String ? $util.Long.prototype.toString.call(message.customerId) : options.longs === Number ? new $util.LongBits(message.customerId.low >>> 0, message.customerId.high >>> 0).toNumber() : message.customerId;
                        if (message.creditAccount != null && message.hasOwnProperty("creditAccount"))
                            object.creditAccount = message.creditAccount;
                        return object;
                    };

                    /**
                     * Converts this PaymentScheduleAdminRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.predefinedCredit.PaymentScheduleAdminRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PaymentScheduleAdminRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PaymentScheduleAdminRequest;
                })();

                /**
                 * PreContractType enum.
                 * @name md.maib.app.predefinedCredit.PreContractType
                 * @enum {number}
                 * @property {number} UNKNOWN_CONTRACT_TYPE=0 UNKNOWN_CONTRACT_TYPE value
                 * @property {number} CALC=1 CALC value
                 * @property {number} BIC=2 BIC value
                 * @property {number} PRECONTRACT_INFO=3 PRECONTRACT_INFO value
                 */
                predefinedCredit.PreContractType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN_CONTRACT_TYPE"] = 0;
                    values[valuesById[1] = "CALC"] = 1;
                    values[valuesById[2] = "BIC"] = 2;
                    values[valuesById[3] = "PRECONTRACT_INFO"] = 3;
                    return values;
                })();

                return predefinedCredit;
            })();

            app.token = (function() {

                /**
                 * Namespace token.
                 * @memberof md.maib.app
                 * @namespace
                 */
                const token = {};

                token.TokenResponse = (function() {

                    /**
                     * Properties of a TokenResponse.
                     * @memberof md.maib.app.token
                     * @interface ITokenResponse
                     * @property {string|null} [token] TokenResponse token
                     */

                    /**
                     * Constructs a new TokenResponse.
                     * @memberof md.maib.app.token
                     * @classdesc Represents a TokenResponse.
                     * @implements ITokenResponse
                     * @constructor
                     * @param {md.maib.app.token.ITokenResponse=} [properties] Properties to set
                     */
                    function TokenResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TokenResponse token.
                     * @member {string} token
                     * @memberof md.maib.app.token.TokenResponse
                     * @instance
                     */
                    TokenResponse.prototype.token = "";

                    /**
                     * Creates a new TokenResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.token.TokenResponse
                     * @static
                     * @param {md.maib.app.token.ITokenResponse=} [properties] Properties to set
                     * @returns {md.maib.app.token.TokenResponse} TokenResponse instance
                     */
                    TokenResponse.create = function create(properties) {
                        return new TokenResponse(properties);
                    };

                    /**
                     * Encodes the specified TokenResponse message. Does not implicitly {@link md.maib.app.token.TokenResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.token.TokenResponse
                     * @static
                     * @param {md.maib.app.token.ITokenResponse} message TokenResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TokenResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                        return writer;
                    };

                    /**
                     * Encodes the specified TokenResponse message, length delimited. Does not implicitly {@link md.maib.app.token.TokenResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.token.TokenResponse
                     * @static
                     * @param {md.maib.app.token.ITokenResponse} message TokenResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TokenResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TokenResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.token.TokenResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.token.TokenResponse} TokenResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TokenResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.token.TokenResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.token = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TokenResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.token.TokenResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.token.TokenResponse} TokenResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TokenResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TokenResponse message.
                     * @function verify
                     * @memberof md.maib.app.token.TokenResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TokenResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.token != null && message.hasOwnProperty("token"))
                            if (!$util.isString(message.token))
                                return "token: string expected";
                        return null;
                    };

                    /**
                     * Creates a TokenResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.token.TokenResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.token.TokenResponse} TokenResponse
                     */
                    TokenResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.token.TokenResponse)
                            return object;
                        let message = new $root.md.maib.app.token.TokenResponse();
                        if (object.token != null)
                            message.token = String(object.token);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TokenResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.token.TokenResponse
                     * @static
                     * @param {md.maib.app.token.TokenResponse} message TokenResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TokenResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.token = "";
                        if (message.token != null && message.hasOwnProperty("token"))
                            object.token = message.token;
                        return object;
                    };

                    /**
                     * Converts this TokenResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.token.TokenResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TokenResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TokenResponse;
                })();

                return token;
            })();

            app.tx = (function() {

                /**
                 * Namespace tx.
                 * @memberof md.maib.app
                 * @namespace
                 */
                const tx = {};

                tx.TxResponse = (function() {

                    /**
                     * Properties of a TxResponse.
                     * @memberof md.maib.app.tx
                     * @interface ITxResponse
                     * @property {Array.<md.maib.app.tx.ITx>|null} [transactions] TxResponse transactions
                     */

                    /**
                     * Constructs a new TxResponse.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxResponse.
                     * @implements ITxResponse
                     * @constructor
                     * @param {md.maib.app.tx.ITxResponse=} [properties] Properties to set
                     */
                    function TxResponse(properties) {
                        this.transactions = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxResponse transactions.
                     * @member {Array.<md.maib.app.tx.ITx>} transactions
                     * @memberof md.maib.app.tx.TxResponse
                     * @instance
                     */
                    TxResponse.prototype.transactions = $util.emptyArray;

                    /**
                     * Creates a new TxResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxResponse
                     * @static
                     * @param {md.maib.app.tx.ITxResponse=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxResponse} TxResponse instance
                     */
                    TxResponse.create = function create(properties) {
                        return new TxResponse(properties);
                    };

                    /**
                     * Encodes the specified TxResponse message. Does not implicitly {@link md.maib.app.tx.TxResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxResponse
                     * @static
                     * @param {md.maib.app.tx.ITxResponse} message TxResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.transactions != null && message.transactions.length)
                            for (let i = 0; i < message.transactions.length; ++i)
                                $root.md.maib.app.tx.Tx.encode(message.transactions[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified TxResponse message, length delimited. Does not implicitly {@link md.maib.app.tx.TxResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxResponse
                     * @static
                     * @param {md.maib.app.tx.ITxResponse} message TxResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxResponse} TxResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.transactions && message.transactions.length))
                                    message.transactions = [];
                                message.transactions.push($root.md.maib.app.tx.Tx.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxResponse} TxResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxResponse message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.transactions != null && message.hasOwnProperty("transactions")) {
                            if (!Array.isArray(message.transactions))
                                return "transactions: array expected";
                            for (let i = 0; i < message.transactions.length; ++i) {
                                let error = $root.md.maib.app.tx.Tx.verify(message.transactions[i]);
                                if (error)
                                    return "transactions." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a TxResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxResponse} TxResponse
                     */
                    TxResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxResponse)
                            return object;
                        let message = new $root.md.maib.app.tx.TxResponse();
                        if (object.transactions) {
                            if (!Array.isArray(object.transactions))
                                throw TypeError(".md.maib.app.tx.TxResponse.transactions: array expected");
                            message.transactions = [];
                            for (let i = 0; i < object.transactions.length; ++i) {
                                if (typeof object.transactions[i] !== "object")
                                    throw TypeError(".md.maib.app.tx.TxResponse.transactions: object expected");
                                message.transactions[i] = $root.md.maib.app.tx.Tx.fromObject(object.transactions[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxResponse
                     * @static
                     * @param {md.maib.app.tx.TxResponse} message TxResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.transactions = [];
                        if (message.transactions && message.transactions.length) {
                            object.transactions = [];
                            for (let j = 0; j < message.transactions.length; ++j)
                                object.transactions[j] = $root.md.maib.app.tx.Tx.toObject(message.transactions[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this TxResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TxResponse;
                })();

                tx.Tx = (function() {

                    /**
                     * Properties of a Tx.
                     * @memberof md.maib.app.tx
                     * @interface ITx
                     * @property {string|null} [id] Tx id
                     * @property {number|null} [amount] Tx amount
                     * @property {number|Long|null} [date] Tx date
                     * @property {string|null} [cardLast4digits] Tx cardLast4digits
                     * @property {string|null} [ccy] Tx ccy
                     * @property {string|null} [description] Tx description
                     * @property {string|null} [iconUrl] Tx iconUrl
                     * @property {md.maib.app.tx.TxType|null} [type] Tx type
                     * @property {string|null} [details] Tx details
                     * @property {string|null} [bankAcc] Tx bankAcc
                     * @property {number|null} [balanceAfter] Tx balanceAfter
                     * @property {number|null} [amountInCardCurrency] Tx amountInCardCurrency
                     * @property {number|null} [exchangeRate] Tx exchangeRate
                     * @property {md.maib.app.tx.IOrigin|null} [origin] Tx origin
                     * @property {string|null} [categoryId] Tx categoryId
                     * @property {string|null} [name] Tx name
                     * @property {string|null} [rrn] Tx rrn
                     * @property {string|null} [approvalCode] Tx approvalCode
                     * @property {md.maib.app.util.IOptionalLong|null} [mdlAmountCents] Tx mdlAmountCents
                     * @property {string|null} [notes] Tx notes
                     * @property {md.maib.app.tx.Tx.ChargebackState|null} [chargebackState] Tx chargebackState
                     * @property {string|null} [chargebackMessage] Tx chargebackMessage
                     * @property {number|null} [feeAmount] Tx feeAmount
                     * @property {string|null} [feeCcy] Tx feeCcy
                     * @property {md.maib.app.tx.Tx.Status|null} [status] Tx status
                     * @property {md.maib.app.tx.ICashbackTxInfo|null} [cashback] Tx cashback
                     * @property {md.maib.app.tx.Tx.CommissionType|null} [commissionType] Tx commissionType
                     */

                    /**
                     * Constructs a new Tx.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a Tx.
                     * @implements ITx
                     * @constructor
                     * @param {md.maib.app.tx.ITx=} [properties] Properties to set
                     */
                    function Tx(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Tx id.
                     * @member {string} id
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.id = "";

                    /**
                     * Tx amount.
                     * @member {number} amount
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.amount = 0;

                    /**
                     * Tx date.
                     * @member {number|Long} date
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.date = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * Tx cardLast4digits.
                     * @member {string} cardLast4digits
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.cardLast4digits = "";

                    /**
                     * Tx ccy.
                     * @member {string} ccy
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.ccy = "";

                    /**
                     * Tx description.
                     * @member {string} description
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.description = "";

                    /**
                     * Tx iconUrl.
                     * @member {string} iconUrl
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.iconUrl = "";

                    /**
                     * Tx type.
                     * @member {md.maib.app.tx.TxType} type
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.type = 0;

                    /**
                     * Tx details.
                     * @member {string} details
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.details = "";

                    /**
                     * Tx bankAcc.
                     * @member {string} bankAcc
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.bankAcc = "";

                    /**
                     * Tx balanceAfter.
                     * @member {number} balanceAfter
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.balanceAfter = 0;

                    /**
                     * Tx amountInCardCurrency.
                     * @member {number} amountInCardCurrency
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.amountInCardCurrency = 0;

                    /**
                     * Tx exchangeRate.
                     * @member {number} exchangeRate
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.exchangeRate = 0;

                    /**
                     * Tx origin.
                     * @member {md.maib.app.tx.IOrigin|null|undefined} origin
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.origin = null;

                    /**
                     * Tx categoryId.
                     * @member {string} categoryId
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.categoryId = "";

                    /**
                     * Tx name.
                     * @member {string} name
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.name = "";

                    /**
                     * Tx rrn.
                     * @member {string} rrn
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.rrn = "";

                    /**
                     * Tx approvalCode.
                     * @member {string} approvalCode
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.approvalCode = "";

                    /**
                     * Tx mdlAmountCents.
                     * @member {md.maib.app.util.IOptionalLong|null|undefined} mdlAmountCents
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.mdlAmountCents = null;

                    /**
                     * Tx notes.
                     * @member {string} notes
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.notes = "";

                    /**
                     * Tx chargebackState.
                     * @member {md.maib.app.tx.Tx.ChargebackState} chargebackState
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.chargebackState = 0;

                    /**
                     * Tx chargebackMessage.
                     * @member {string} chargebackMessage
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.chargebackMessage = "";

                    /**
                     * Tx feeAmount.
                     * @member {number} feeAmount
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.feeAmount = 0;

                    /**
                     * Tx feeCcy.
                     * @member {string} feeCcy
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.feeCcy = "";

                    /**
                     * Tx status.
                     * @member {md.maib.app.tx.Tx.Status} status
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.status = 0;

                    /**
                     * Tx cashback.
                     * @member {md.maib.app.tx.ICashbackTxInfo|null|undefined} cashback
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.cashback = null;

                    /**
                     * Tx commissionType.
                     * @member {md.maib.app.tx.Tx.CommissionType} commissionType
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     */
                    Tx.prototype.commissionType = 0;

                    /**
                     * Creates a new Tx instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.Tx
                     * @static
                     * @param {md.maib.app.tx.ITx=} [properties] Properties to set
                     * @returns {md.maib.app.tx.Tx} Tx instance
                     */
                    Tx.create = function create(properties) {
                        return new Tx(properties);
                    };

                    /**
                     * Encodes the specified Tx message. Does not implicitly {@link md.maib.app.tx.Tx.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.Tx
                     * @static
                     * @param {md.maib.app.tx.ITx} message Tx message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Tx.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.amount);
                        if (message.date != null && Object.hasOwnProperty.call(message, "date"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.date);
                        if (message.cardLast4digits != null && Object.hasOwnProperty.call(message, "cardLast4digits"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.cardLast4digits);
                        if (message.ccy != null && Object.hasOwnProperty.call(message, "ccy"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.ccy);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.description);
                        if (message.iconUrl != null && Object.hasOwnProperty.call(message, "iconUrl"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.iconUrl);
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.type);
                        if (message.details != null && Object.hasOwnProperty.call(message, "details"))
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.details);
                        if (message.bankAcc != null && Object.hasOwnProperty.call(message, "bankAcc"))
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.bankAcc);
                        if (message.balanceAfter != null && Object.hasOwnProperty.call(message, "balanceAfter"))
                            writer.uint32(/* id 11, wireType 1 =*/89).double(message.balanceAfter);
                        if (message.amountInCardCurrency != null && Object.hasOwnProperty.call(message, "amountInCardCurrency"))
                            writer.uint32(/* id 12, wireType 1 =*/97).double(message.amountInCardCurrency);
                        if (message.exchangeRate != null && Object.hasOwnProperty.call(message, "exchangeRate"))
                            writer.uint32(/* id 13, wireType 1 =*/105).double(message.exchangeRate);
                        if (message.origin != null && Object.hasOwnProperty.call(message, "origin"))
                            $root.md.maib.app.tx.Origin.encode(message.origin, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                        if (message.categoryId != null && Object.hasOwnProperty.call(message, "categoryId"))
                            writer.uint32(/* id 15, wireType 2 =*/122).string(message.categoryId);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 16, wireType 2 =*/130).string(message.name);
                        if (message.rrn != null && Object.hasOwnProperty.call(message, "rrn"))
                            writer.uint32(/* id 17, wireType 2 =*/138).string(message.rrn);
                        if (message.approvalCode != null && Object.hasOwnProperty.call(message, "approvalCode"))
                            writer.uint32(/* id 18, wireType 2 =*/146).string(message.approvalCode);
                        if (message.mdlAmountCents != null && Object.hasOwnProperty.call(message, "mdlAmountCents"))
                            $root.md.maib.app.util.OptionalLong.encode(message.mdlAmountCents, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                        if (message.notes != null && Object.hasOwnProperty.call(message, "notes"))
                            writer.uint32(/* id 20, wireType 2 =*/162).string(message.notes);
                        if (message.chargebackState != null && Object.hasOwnProperty.call(message, "chargebackState"))
                            writer.uint32(/* id 21, wireType 0 =*/168).int32(message.chargebackState);
                        if (message.chargebackMessage != null && Object.hasOwnProperty.call(message, "chargebackMessage"))
                            writer.uint32(/* id 22, wireType 2 =*/178).string(message.chargebackMessage);
                        if (message.feeAmount != null && Object.hasOwnProperty.call(message, "feeAmount"))
                            writer.uint32(/* id 23, wireType 1 =*/185).double(message.feeAmount);
                        if (message.feeCcy != null && Object.hasOwnProperty.call(message, "feeCcy"))
                            writer.uint32(/* id 24, wireType 2 =*/194).string(message.feeCcy);
                        if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                            writer.uint32(/* id 25, wireType 0 =*/200).int32(message.status);
                        if (message.cashback != null && Object.hasOwnProperty.call(message, "cashback"))
                            $root.md.maib.app.tx.CashbackTxInfo.encode(message.cashback, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                        if (message.commissionType != null && Object.hasOwnProperty.call(message, "commissionType"))
                            writer.uint32(/* id 27, wireType 0 =*/216).int32(message.commissionType);
                        return writer;
                    };

                    /**
                     * Encodes the specified Tx message, length delimited. Does not implicitly {@link md.maib.app.tx.Tx.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.Tx
                     * @static
                     * @param {md.maib.app.tx.ITx} message Tx message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Tx.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Tx message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.Tx
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.Tx} Tx
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Tx.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.Tx();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.amount = reader.double();
                                break;
                            case 3:
                                message.date = reader.int64();
                                break;
                            case 4:
                                message.cardLast4digits = reader.string();
                                break;
                            case 5:
                                message.ccy = reader.string();
                                break;
                            case 6:
                                message.description = reader.string();
                                break;
                            case 7:
                                message.iconUrl = reader.string();
                                break;
                            case 8:
                                message.type = reader.int32();
                                break;
                            case 9:
                                message.details = reader.string();
                                break;
                            case 10:
                                message.bankAcc = reader.string();
                                break;
                            case 11:
                                message.balanceAfter = reader.double();
                                break;
                            case 12:
                                message.amountInCardCurrency = reader.double();
                                break;
                            case 13:
                                message.exchangeRate = reader.double();
                                break;
                            case 14:
                                message.origin = $root.md.maib.app.tx.Origin.decode(reader, reader.uint32());
                                break;
                            case 15:
                                message.categoryId = reader.string();
                                break;
                            case 16:
                                message.name = reader.string();
                                break;
                            case 17:
                                message.rrn = reader.string();
                                break;
                            case 18:
                                message.approvalCode = reader.string();
                                break;
                            case 19:
                                message.mdlAmountCents = $root.md.maib.app.util.OptionalLong.decode(reader, reader.uint32());
                                break;
                            case 20:
                                message.notes = reader.string();
                                break;
                            case 21:
                                message.chargebackState = reader.int32();
                                break;
                            case 22:
                                message.chargebackMessage = reader.string();
                                break;
                            case 23:
                                message.feeAmount = reader.double();
                                break;
                            case 24:
                                message.feeCcy = reader.string();
                                break;
                            case 25:
                                message.status = reader.int32();
                                break;
                            case 26:
                                message.cashback = $root.md.maib.app.tx.CashbackTxInfo.decode(reader, reader.uint32());
                                break;
                            case 27:
                                message.commissionType = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Tx message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.Tx
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.Tx} Tx
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Tx.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Tx message.
                     * @function verify
                     * @memberof md.maib.app.tx.Tx
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Tx.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (typeof message.amount !== "number")
                                return "amount: number expected";
                        if (message.date != null && message.hasOwnProperty("date"))
                            if (!$util.isInteger(message.date) && !(message.date && $util.isInteger(message.date.low) && $util.isInteger(message.date.high)))
                                return "date: integer|Long expected";
                        if (message.cardLast4digits != null && message.hasOwnProperty("cardLast4digits"))
                            if (!$util.isString(message.cardLast4digits))
                                return "cardLast4digits: string expected";
                        if (message.ccy != null && message.hasOwnProperty("ccy"))
                            if (!$util.isString(message.ccy))
                                return "ccy: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.iconUrl != null && message.hasOwnProperty("iconUrl"))
                            if (!$util.isString(message.iconUrl))
                                return "iconUrl: string expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                                break;
                            }
                        if (message.details != null && message.hasOwnProperty("details"))
                            if (!$util.isString(message.details))
                                return "details: string expected";
                        if (message.bankAcc != null && message.hasOwnProperty("bankAcc"))
                            if (!$util.isString(message.bankAcc))
                                return "bankAcc: string expected";
                        if (message.balanceAfter != null && message.hasOwnProperty("balanceAfter"))
                            if (typeof message.balanceAfter !== "number")
                                return "balanceAfter: number expected";
                        if (message.amountInCardCurrency != null && message.hasOwnProperty("amountInCardCurrency"))
                            if (typeof message.amountInCardCurrency !== "number")
                                return "amountInCardCurrency: number expected";
                        if (message.exchangeRate != null && message.hasOwnProperty("exchangeRate"))
                            if (typeof message.exchangeRate !== "number")
                                return "exchangeRate: number expected";
                        if (message.origin != null && message.hasOwnProperty("origin")) {
                            let error = $root.md.maib.app.tx.Origin.verify(message.origin);
                            if (error)
                                return "origin." + error;
                        }
                        if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                            if (!$util.isString(message.categoryId))
                                return "categoryId: string expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.rrn != null && message.hasOwnProperty("rrn"))
                            if (!$util.isString(message.rrn))
                                return "rrn: string expected";
                        if (message.approvalCode != null && message.hasOwnProperty("approvalCode"))
                            if (!$util.isString(message.approvalCode))
                                return "approvalCode: string expected";
                        if (message.mdlAmountCents != null && message.hasOwnProperty("mdlAmountCents")) {
                            let error = $root.md.maib.app.util.OptionalLong.verify(message.mdlAmountCents);
                            if (error)
                                return "mdlAmountCents." + error;
                        }
                        if (message.notes != null && message.hasOwnProperty("notes"))
                            if (!$util.isString(message.notes))
                                return "notes: string expected";
                        if (message.chargebackState != null && message.hasOwnProperty("chargebackState"))
                            switch (message.chargebackState) {
                            default:
                                return "chargebackState: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.chargebackMessage != null && message.hasOwnProperty("chargebackMessage"))
                            if (!$util.isString(message.chargebackMessage))
                                return "chargebackMessage: string expected";
                        if (message.feeAmount != null && message.hasOwnProperty("feeAmount"))
                            if (typeof message.feeAmount !== "number")
                                return "feeAmount: number expected";
                        if (message.feeCcy != null && message.hasOwnProperty("feeCcy"))
                            if (!$util.isString(message.feeCcy))
                                return "feeCcy: string expected";
                        if (message.status != null && message.hasOwnProperty("status"))
                            switch (message.status) {
                            default:
                                return "status: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.cashback != null && message.hasOwnProperty("cashback")) {
                            let error = $root.md.maib.app.tx.CashbackTxInfo.verify(message.cashback);
                            if (error)
                                return "cashback." + error;
                        }
                        if (message.commissionType != null && message.hasOwnProperty("commissionType"))
                            switch (message.commissionType) {
                            default:
                                return "commissionType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a Tx message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.Tx
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.Tx} Tx
                     */
                    Tx.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.Tx)
                            return object;
                        let message = new $root.md.maib.app.tx.Tx();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.amount != null)
                            message.amount = Number(object.amount);
                        if (object.date != null)
                            if ($util.Long)
                                (message.date = $util.Long.fromValue(object.date)).unsigned = false;
                            else if (typeof object.date === "string")
                                message.date = parseInt(object.date, 10);
                            else if (typeof object.date === "number")
                                message.date = object.date;
                            else if (typeof object.date === "object")
                                message.date = new $util.LongBits(object.date.low >>> 0, object.date.high >>> 0).toNumber();
                        if (object.cardLast4digits != null)
                            message.cardLast4digits = String(object.cardLast4digits);
                        if (object.ccy != null)
                            message.ccy = String(object.ccy);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.iconUrl != null)
                            message.iconUrl = String(object.iconUrl);
                        switch (object.type) {
                        case "SUPPLY":
                        case 0:
                            message.type = 0;
                            break;
                        case "SPEND":
                        case 1:
                            message.type = 1;
                            break;
                        case "TRANSFER":
                        case 2:
                            message.type = 2;
                            break;
                        case "WITHDRAW":
                        case 3:
                            message.type = 3;
                            break;
                        case "MERCHANT":
                        case 4:
                            message.type = 4;
                            break;
                        case "SPEND_REVERT":
                        case 5:
                            message.type = 5;
                            break;
                        case "SUPPLY_REVERT":
                        case 6:
                            message.type = 6;
                            break;
                        case "CARD_TO_ACCOUNT":
                        case 7:
                            message.type = 7;
                            break;
                        case "ACCOUNT_TO_CARD":
                        case 8:
                            message.type = 8;
                            break;
                        case "INSTALLMENT_PURCHASE":
                        case 9:
                            message.type = 9;
                            break;
                        case "PAGED_PAYMENT":
                        case 10:
                            message.type = 10;
                            break;
                        case "IBAN_PAYMENT":
                        case 11:
                            message.type = 11;
                            break;
                        }
                        if (object.details != null)
                            message.details = String(object.details);
                        if (object.bankAcc != null)
                            message.bankAcc = String(object.bankAcc);
                        if (object.balanceAfter != null)
                            message.balanceAfter = Number(object.balanceAfter);
                        if (object.amountInCardCurrency != null)
                            message.amountInCardCurrency = Number(object.amountInCardCurrency);
                        if (object.exchangeRate != null)
                            message.exchangeRate = Number(object.exchangeRate);
                        if (object.origin != null) {
                            if (typeof object.origin !== "object")
                                throw TypeError(".md.maib.app.tx.Tx.origin: object expected");
                            message.origin = $root.md.maib.app.tx.Origin.fromObject(object.origin);
                        }
                        if (object.categoryId != null)
                            message.categoryId = String(object.categoryId);
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.rrn != null)
                            message.rrn = String(object.rrn);
                        if (object.approvalCode != null)
                            message.approvalCode = String(object.approvalCode);
                        if (object.mdlAmountCents != null) {
                            if (typeof object.mdlAmountCents !== "object")
                                throw TypeError(".md.maib.app.tx.Tx.mdlAmountCents: object expected");
                            message.mdlAmountCents = $root.md.maib.app.util.OptionalLong.fromObject(object.mdlAmountCents);
                        }
                        if (object.notes != null)
                            message.notes = String(object.notes);
                        switch (object.chargebackState) {
                        case "UNKNOWN_STATE":
                        case 0:
                            message.chargebackState = 0;
                            break;
                        case "CAN_BE_CHARGED_BACK":
                        case 1:
                            message.chargebackState = 1;
                            break;
                        case "CAN_NOT_BE_CHARGED_BACK":
                        case 2:
                            message.chargebackState = 2;
                            break;
                        case "ALREADY_CHARGED_BACK":
                        case 3:
                            message.chargebackState = 3;
                            break;
                        }
                        if (object.chargebackMessage != null)
                            message.chargebackMessage = String(object.chargebackMessage);
                        if (object.feeAmount != null)
                            message.feeAmount = Number(object.feeAmount);
                        if (object.feeCcy != null)
                            message.feeCcy = String(object.feeCcy);
                        switch (object.status) {
                        case "UNKNOWN_STATUS":
                        case 0:
                            message.status = 0;
                            break;
                        case "IN_PROCESSING":
                        case 1:
                            message.status = 1;
                            break;
                        case "FINAL":
                        case 2:
                            message.status = 2;
                            break;
                        case "DELETED":
                        case 3:
                            message.status = 3;
                            break;
                        }
                        if (object.cashback != null) {
                            if (typeof object.cashback !== "object")
                                throw TypeError(".md.maib.app.tx.Tx.cashback: object expected");
                            message.cashback = $root.md.maib.app.tx.CashbackTxInfo.fromObject(object.cashback);
                        }
                        switch (object.commissionType) {
                        case "UNKNOWN_TYPE":
                        case 0:
                            message.commissionType = 0;
                            break;
                        case "C_TYPE":
                        case 1:
                            message.commissionType = 1;
                            break;
                        case "D_TYPE":
                        case 2:
                            message.commissionType = 2;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Tx message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.Tx
                     * @static
                     * @param {md.maib.app.tx.Tx} message Tx
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Tx.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.amount = 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.date = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.date = options.longs === String ? "0" : 0;
                            object.cardLast4digits = "";
                            object.ccy = "";
                            object.description = "";
                            object.iconUrl = "";
                            object.type = options.enums === String ? "SUPPLY" : 0;
                            object.details = "";
                            object.bankAcc = "";
                            object.balanceAfter = 0;
                            object.amountInCardCurrency = 0;
                            object.exchangeRate = 0;
                            object.origin = null;
                            object.categoryId = "";
                            object.name = "";
                            object.rrn = "";
                            object.approvalCode = "";
                            object.mdlAmountCents = null;
                            object.notes = "";
                            object.chargebackState = options.enums === String ? "UNKNOWN_STATE" : 0;
                            object.chargebackMessage = "";
                            object.feeAmount = 0;
                            object.feeCcy = "";
                            object.status = options.enums === String ? "UNKNOWN_STATUS" : 0;
                            object.cashback = null;
                            object.commissionType = options.enums === String ? "UNKNOWN_TYPE" : 0;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                        if (message.date != null && message.hasOwnProperty("date"))
                            if (typeof message.date === "number")
                                object.date = options.longs === String ? String(message.date) : message.date;
                            else
                                object.date = options.longs === String ? $util.Long.prototype.toString.call(message.date) : options.longs === Number ? new $util.LongBits(message.date.low >>> 0, message.date.high >>> 0).toNumber() : message.date;
                        if (message.cardLast4digits != null && message.hasOwnProperty("cardLast4digits"))
                            object.cardLast4digits = message.cardLast4digits;
                        if (message.ccy != null && message.hasOwnProperty("ccy"))
                            object.ccy = message.ccy;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.iconUrl != null && message.hasOwnProperty("iconUrl"))
                            object.iconUrl = message.iconUrl;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.md.maib.app.tx.TxType[message.type] : message.type;
                        if (message.details != null && message.hasOwnProperty("details"))
                            object.details = message.details;
                        if (message.bankAcc != null && message.hasOwnProperty("bankAcc"))
                            object.bankAcc = message.bankAcc;
                        if (message.balanceAfter != null && message.hasOwnProperty("balanceAfter"))
                            object.balanceAfter = options.json && !isFinite(message.balanceAfter) ? String(message.balanceAfter) : message.balanceAfter;
                        if (message.amountInCardCurrency != null && message.hasOwnProperty("amountInCardCurrency"))
                            object.amountInCardCurrency = options.json && !isFinite(message.amountInCardCurrency) ? String(message.amountInCardCurrency) : message.amountInCardCurrency;
                        if (message.exchangeRate != null && message.hasOwnProperty("exchangeRate"))
                            object.exchangeRate = options.json && !isFinite(message.exchangeRate) ? String(message.exchangeRate) : message.exchangeRate;
                        if (message.origin != null && message.hasOwnProperty("origin"))
                            object.origin = $root.md.maib.app.tx.Origin.toObject(message.origin, options);
                        if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                            object.categoryId = message.categoryId;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.rrn != null && message.hasOwnProperty("rrn"))
                            object.rrn = message.rrn;
                        if (message.approvalCode != null && message.hasOwnProperty("approvalCode"))
                            object.approvalCode = message.approvalCode;
                        if (message.mdlAmountCents != null && message.hasOwnProperty("mdlAmountCents"))
                            object.mdlAmountCents = $root.md.maib.app.util.OptionalLong.toObject(message.mdlAmountCents, options);
                        if (message.notes != null && message.hasOwnProperty("notes"))
                            object.notes = message.notes;
                        if (message.chargebackState != null && message.hasOwnProperty("chargebackState"))
                            object.chargebackState = options.enums === String ? $root.md.maib.app.tx.Tx.ChargebackState[message.chargebackState] : message.chargebackState;
                        if (message.chargebackMessage != null && message.hasOwnProperty("chargebackMessage"))
                            object.chargebackMessage = message.chargebackMessage;
                        if (message.feeAmount != null && message.hasOwnProperty("feeAmount"))
                            object.feeAmount = options.json && !isFinite(message.feeAmount) ? String(message.feeAmount) : message.feeAmount;
                        if (message.feeCcy != null && message.hasOwnProperty("feeCcy"))
                            object.feeCcy = message.feeCcy;
                        if (message.status != null && message.hasOwnProperty("status"))
                            object.status = options.enums === String ? $root.md.maib.app.tx.Tx.Status[message.status] : message.status;
                        if (message.cashback != null && message.hasOwnProperty("cashback"))
                            object.cashback = $root.md.maib.app.tx.CashbackTxInfo.toObject(message.cashback, options);
                        if (message.commissionType != null && message.hasOwnProperty("commissionType"))
                            object.commissionType = options.enums === String ? $root.md.maib.app.tx.Tx.CommissionType[message.commissionType] : message.commissionType;
                        return object;
                    };

                    /**
                     * Converts this Tx to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.Tx
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Tx.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * ChargebackState enum.
                     * @name md.maib.app.tx.Tx.ChargebackState
                     * @enum {number}
                     * @property {number} UNKNOWN_STATE=0 UNKNOWN_STATE value
                     * @property {number} CAN_BE_CHARGED_BACK=1 CAN_BE_CHARGED_BACK value
                     * @property {number} CAN_NOT_BE_CHARGED_BACK=2 CAN_NOT_BE_CHARGED_BACK value
                     * @property {number} ALREADY_CHARGED_BACK=3 ALREADY_CHARGED_BACK value
                     */
                    Tx.ChargebackState = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN_STATE"] = 0;
                        values[valuesById[1] = "CAN_BE_CHARGED_BACK"] = 1;
                        values[valuesById[2] = "CAN_NOT_BE_CHARGED_BACK"] = 2;
                        values[valuesById[3] = "ALREADY_CHARGED_BACK"] = 3;
                        return values;
                    })();

                    /**
                     * Status enum.
                     * @name md.maib.app.tx.Tx.Status
                     * @enum {number}
                     * @property {number} UNKNOWN_STATUS=0 UNKNOWN_STATUS value
                     * @property {number} IN_PROCESSING=1 IN_PROCESSING value
                     * @property {number} FINAL=2 FINAL value
                     * @property {number} DELETED=3 DELETED value
                     */
                    Tx.Status = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN_STATUS"] = 0;
                        values[valuesById[1] = "IN_PROCESSING"] = 1;
                        values[valuesById[2] = "FINAL"] = 2;
                        values[valuesById[3] = "DELETED"] = 3;
                        return values;
                    })();

                    /**
                     * CommissionType enum.
                     * @name md.maib.app.tx.Tx.CommissionType
                     * @enum {number}
                     * @property {number} UNKNOWN_TYPE=0 UNKNOWN_TYPE value
                     * @property {number} C_TYPE=1 C_TYPE value
                     * @property {number} D_TYPE=2 D_TYPE value
                     */
                    Tx.CommissionType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN_TYPE"] = 0;
                        values[valuesById[1] = "C_TYPE"] = 1;
                        values[valuesById[2] = "D_TYPE"] = 2;
                        return values;
                    })();

                    return Tx;
                })();

                tx.TxProcessingRequest = (function() {

                    /**
                     * Properties of a TxProcessingRequest.
                     * @memberof md.maib.app.tx
                     * @interface ITxProcessingRequest
                     * @property {Array.<string>|null} [ids] TxProcessingRequest ids
                     */

                    /**
                     * Constructs a new TxProcessingRequest.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxProcessingRequest.
                     * @implements ITxProcessingRequest
                     * @constructor
                     * @param {md.maib.app.tx.ITxProcessingRequest=} [properties] Properties to set
                     */
                    function TxProcessingRequest(properties) {
                        this.ids = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxProcessingRequest ids.
                     * @member {Array.<string>} ids
                     * @memberof md.maib.app.tx.TxProcessingRequest
                     * @instance
                     */
                    TxProcessingRequest.prototype.ids = $util.emptyArray;

                    /**
                     * Creates a new TxProcessingRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxProcessingRequest
                     * @static
                     * @param {md.maib.app.tx.ITxProcessingRequest=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxProcessingRequest} TxProcessingRequest instance
                     */
                    TxProcessingRequest.create = function create(properties) {
                        return new TxProcessingRequest(properties);
                    };

                    /**
                     * Encodes the specified TxProcessingRequest message. Does not implicitly {@link md.maib.app.tx.TxProcessingRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxProcessingRequest
                     * @static
                     * @param {md.maib.app.tx.ITxProcessingRequest} message TxProcessingRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxProcessingRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.ids != null && message.ids.length)
                            for (let i = 0; i < message.ids.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ids[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified TxProcessingRequest message, length delimited. Does not implicitly {@link md.maib.app.tx.TxProcessingRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxProcessingRequest
                     * @static
                     * @param {md.maib.app.tx.ITxProcessingRequest} message TxProcessingRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxProcessingRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxProcessingRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxProcessingRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxProcessingRequest} TxProcessingRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxProcessingRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxProcessingRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.ids && message.ids.length))
                                    message.ids = [];
                                message.ids.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxProcessingRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxProcessingRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxProcessingRequest} TxProcessingRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxProcessingRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxProcessingRequest message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxProcessingRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxProcessingRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.ids != null && message.hasOwnProperty("ids")) {
                            if (!Array.isArray(message.ids))
                                return "ids: array expected";
                            for (let i = 0; i < message.ids.length; ++i)
                                if (!$util.isString(message.ids[i]))
                                    return "ids: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a TxProcessingRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxProcessingRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxProcessingRequest} TxProcessingRequest
                     */
                    TxProcessingRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxProcessingRequest)
                            return object;
                        let message = new $root.md.maib.app.tx.TxProcessingRequest();
                        if (object.ids) {
                            if (!Array.isArray(object.ids))
                                throw TypeError(".md.maib.app.tx.TxProcessingRequest.ids: array expected");
                            message.ids = [];
                            for (let i = 0; i < object.ids.length; ++i)
                                message.ids[i] = String(object.ids[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxProcessingRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxProcessingRequest
                     * @static
                     * @param {md.maib.app.tx.TxProcessingRequest} message TxProcessingRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxProcessingRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.ids = [];
                        if (message.ids && message.ids.length) {
                            object.ids = [];
                            for (let j = 0; j < message.ids.length; ++j)
                                object.ids[j] = message.ids[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this TxProcessingRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxProcessingRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxProcessingRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TxProcessingRequest;
                })();

                tx.CashbackTxInfo = (function() {

                    /**
                     * Properties of a CashbackTxInfo.
                     * @memberof md.maib.app.tx
                     * @interface ICashbackTxInfo
                     * @property {string|null} [id] CashbackTxInfo id
                     * @property {number|null} [amount] CashbackTxInfo amount
                     * @property {number|null} [rate] CashbackTxInfo rate
                     * @property {md.maib.app.cashback.CashbackType|null} [type] CashbackTxInfo type
                     * @property {md.maib.app.cashback.CashbackPayoutStatus|null} [status] CashbackTxInfo status
                     */

                    /**
                     * Constructs a new CashbackTxInfo.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a CashbackTxInfo.
                     * @implements ICashbackTxInfo
                     * @constructor
                     * @param {md.maib.app.tx.ICashbackTxInfo=} [properties] Properties to set
                     */
                    function CashbackTxInfo(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CashbackTxInfo id.
                     * @member {string} id
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @instance
                     */
                    CashbackTxInfo.prototype.id = "";

                    /**
                     * CashbackTxInfo amount.
                     * @member {number} amount
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @instance
                     */
                    CashbackTxInfo.prototype.amount = 0;

                    /**
                     * CashbackTxInfo rate.
                     * @member {number} rate
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @instance
                     */
                    CashbackTxInfo.prototype.rate = 0;

                    /**
                     * CashbackTxInfo type.
                     * @member {md.maib.app.cashback.CashbackType} type
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @instance
                     */
                    CashbackTxInfo.prototype.type = 0;

                    /**
                     * CashbackTxInfo status.
                     * @member {md.maib.app.cashback.CashbackPayoutStatus} status
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @instance
                     */
                    CashbackTxInfo.prototype.status = 0;

                    /**
                     * Creates a new CashbackTxInfo instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @static
                     * @param {md.maib.app.tx.ICashbackTxInfo=} [properties] Properties to set
                     * @returns {md.maib.app.tx.CashbackTxInfo} CashbackTxInfo instance
                     */
                    CashbackTxInfo.create = function create(properties) {
                        return new CashbackTxInfo(properties);
                    };

                    /**
                     * Encodes the specified CashbackTxInfo message. Does not implicitly {@link md.maib.app.tx.CashbackTxInfo.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @static
                     * @param {md.maib.app.tx.ICashbackTxInfo} message CashbackTxInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackTxInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.amount);
                        if (message.rate != null && Object.hasOwnProperty.call(message, "rate"))
                            writer.uint32(/* id 3, wireType 5 =*/29).float(message.rate);
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
                        if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.status);
                        return writer;
                    };

                    /**
                     * Encodes the specified CashbackTxInfo message, length delimited. Does not implicitly {@link md.maib.app.tx.CashbackTxInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @static
                     * @param {md.maib.app.tx.ICashbackTxInfo} message CashbackTxInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackTxInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CashbackTxInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.CashbackTxInfo} CashbackTxInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackTxInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.CashbackTxInfo();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.amount = reader.double();
                                break;
                            case 3:
                                message.rate = reader.float();
                                break;
                            case 4:
                                message.type = reader.int32();
                                break;
                            case 5:
                                message.status = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CashbackTxInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.CashbackTxInfo} CashbackTxInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackTxInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CashbackTxInfo message.
                     * @function verify
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CashbackTxInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (typeof message.amount !== "number")
                                return "amount: number expected";
                        if (message.rate != null && message.hasOwnProperty("rate"))
                            if (typeof message.rate !== "number")
                                return "rate: number expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.status != null && message.hasOwnProperty("status"))
                            switch (message.status) {
                            default:
                                return "status: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a CashbackTxInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.CashbackTxInfo} CashbackTxInfo
                     */
                    CashbackTxInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.CashbackTxInfo)
                            return object;
                        let message = new $root.md.maib.app.tx.CashbackTxInfo();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.amount != null)
                            message.amount = Number(object.amount);
                        if (object.rate != null)
                            message.rate = Number(object.rate);
                        switch (object.type) {
                        case "UNKNOWN_TYPE":
                        case 0:
                            message.type = 0;
                            break;
                        case "GUARANTEED":
                        case 1:
                            message.type = 1;
                            break;
                        case "PARTNER":
                        case 2:
                            message.type = 2;
                            break;
                        }
                        switch (object.status) {
                        case "UNKNOWN_STATUS":
                        case 0:
                            message.status = 0;
                            break;
                        case "CALCULATED":
                        case 1:
                            message.status = 1;
                            break;
                        case "TRANSFERRED":
                        case 2:
                            message.status = 2;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a CashbackTxInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @static
                     * @param {md.maib.app.tx.CashbackTxInfo} message CashbackTxInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CashbackTxInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.amount = 0;
                            object.rate = 0;
                            object.type = options.enums === String ? "UNKNOWN_TYPE" : 0;
                            object.status = options.enums === String ? "UNKNOWN_STATUS" : 0;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = options.json && !isFinite(message.amount) ? String(message.amount) : message.amount;
                        if (message.rate != null && message.hasOwnProperty("rate"))
                            object.rate = options.json && !isFinite(message.rate) ? String(message.rate) : message.rate;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.md.maib.app.cashback.CashbackType[message.type] : message.type;
                        if (message.status != null && message.hasOwnProperty("status"))
                            object.status = options.enums === String ? $root.md.maib.app.cashback.CashbackPayoutStatus[message.status] : message.status;
                        return object;
                    };

                    /**
                     * Converts this CashbackTxInfo to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.CashbackTxInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CashbackTxInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CashbackTxInfo;
                })();

                tx.TxNameUpdateRequest = (function() {

                    /**
                     * Properties of a TxNameUpdateRequest.
                     * @memberof md.maib.app.tx
                     * @interface ITxNameUpdateRequest
                     * @property {string|null} [id] TxNameUpdateRequest id
                     * @property {string|null} [name] TxNameUpdateRequest name
                     */

                    /**
                     * Constructs a new TxNameUpdateRequest.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxNameUpdateRequest.
                     * @implements ITxNameUpdateRequest
                     * @constructor
                     * @param {md.maib.app.tx.ITxNameUpdateRequest=} [properties] Properties to set
                     */
                    function TxNameUpdateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxNameUpdateRequest id.
                     * @member {string} id
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @instance
                     */
                    TxNameUpdateRequest.prototype.id = "";

                    /**
                     * TxNameUpdateRequest name.
                     * @member {string} name
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @instance
                     */
                    TxNameUpdateRequest.prototype.name = "";

                    /**
                     * Creates a new TxNameUpdateRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @static
                     * @param {md.maib.app.tx.ITxNameUpdateRequest=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxNameUpdateRequest} TxNameUpdateRequest instance
                     */
                    TxNameUpdateRequest.create = function create(properties) {
                        return new TxNameUpdateRequest(properties);
                    };

                    /**
                     * Encodes the specified TxNameUpdateRequest message. Does not implicitly {@link md.maib.app.tx.TxNameUpdateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @static
                     * @param {md.maib.app.tx.ITxNameUpdateRequest} message TxNameUpdateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxNameUpdateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                        return writer;
                    };

                    /**
                     * Encodes the specified TxNameUpdateRequest message, length delimited. Does not implicitly {@link md.maib.app.tx.TxNameUpdateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @static
                     * @param {md.maib.app.tx.ITxNameUpdateRequest} message TxNameUpdateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxNameUpdateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxNameUpdateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxNameUpdateRequest} TxNameUpdateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxNameUpdateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxNameUpdateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxNameUpdateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxNameUpdateRequest} TxNameUpdateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxNameUpdateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxNameUpdateRequest message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxNameUpdateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };

                    /**
                     * Creates a TxNameUpdateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxNameUpdateRequest} TxNameUpdateRequest
                     */
                    TxNameUpdateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxNameUpdateRequest)
                            return object;
                        let message = new $root.md.maib.app.tx.TxNameUpdateRequest();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxNameUpdateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @static
                     * @param {md.maib.app.tx.TxNameUpdateRequest} message TxNameUpdateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxNameUpdateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.name = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };

                    /**
                     * Converts this TxNameUpdateRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxNameUpdateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxNameUpdateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TxNameUpdateRequest;
                })();

                tx.TxNameUpdateResponse = (function() {

                    /**
                     * Properties of a TxNameUpdateResponse.
                     * @memberof md.maib.app.tx
                     * @interface ITxNameUpdateResponse
                     * @property {md.maib.app.tx.TxNameUpdateResponse.Result|null} [result] TxNameUpdateResponse result
                     */

                    /**
                     * Constructs a new TxNameUpdateResponse.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxNameUpdateResponse.
                     * @implements ITxNameUpdateResponse
                     * @constructor
                     * @param {md.maib.app.tx.ITxNameUpdateResponse=} [properties] Properties to set
                     */
                    function TxNameUpdateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxNameUpdateResponse result.
                     * @member {md.maib.app.tx.TxNameUpdateResponse.Result} result
                     * @memberof md.maib.app.tx.TxNameUpdateResponse
                     * @instance
                     */
                    TxNameUpdateResponse.prototype.result = 0;

                    /**
                     * Creates a new TxNameUpdateResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxNameUpdateResponse
                     * @static
                     * @param {md.maib.app.tx.ITxNameUpdateResponse=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxNameUpdateResponse} TxNameUpdateResponse instance
                     */
                    TxNameUpdateResponse.create = function create(properties) {
                        return new TxNameUpdateResponse(properties);
                    };

                    /**
                     * Encodes the specified TxNameUpdateResponse message. Does not implicitly {@link md.maib.app.tx.TxNameUpdateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxNameUpdateResponse
                     * @static
                     * @param {md.maib.app.tx.ITxNameUpdateResponse} message TxNameUpdateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxNameUpdateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified TxNameUpdateResponse message, length delimited. Does not implicitly {@link md.maib.app.tx.TxNameUpdateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxNameUpdateResponse
                     * @static
                     * @param {md.maib.app.tx.ITxNameUpdateResponse} message TxNameUpdateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxNameUpdateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxNameUpdateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxNameUpdateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxNameUpdateResponse} TxNameUpdateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxNameUpdateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxNameUpdateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.result = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxNameUpdateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxNameUpdateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxNameUpdateResponse} TxNameUpdateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxNameUpdateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxNameUpdateResponse message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxNameUpdateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxNameUpdateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a TxNameUpdateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxNameUpdateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxNameUpdateResponse} TxNameUpdateResponse
                     */
                    TxNameUpdateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxNameUpdateResponse)
                            return object;
                        let message = new $root.md.maib.app.tx.TxNameUpdateResponse();
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxNameUpdateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxNameUpdateResponse
                     * @static
                     * @param {md.maib.app.tx.TxNameUpdateResponse} message TxNameUpdateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxNameUpdateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.tx.TxNameUpdateResponse.Result[message.result] : message.result;
                        return object;
                    };

                    /**
                     * Converts this TxNameUpdateResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxNameUpdateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxNameUpdateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.tx.TxNameUpdateResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     */
                    TxNameUpdateResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        return values;
                    })();

                    return TxNameUpdateResponse;
                })();

                tx.TxCategory = (function() {

                    /**
                     * Properties of a TxCategory.
                     * @memberof md.maib.app.tx
                     * @interface ITxCategory
                     * @property {string|null} [id] TxCategory id
                     * @property {string|null} [categoryCode] TxCategory categoryCode
                     * @property {number|Long|null} [whenCreated] TxCategory whenCreated
                     */

                    /**
                     * Constructs a new TxCategory.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxCategory.
                     * @implements ITxCategory
                     * @constructor
                     * @param {md.maib.app.tx.ITxCategory=} [properties] Properties to set
                     */
                    function TxCategory(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxCategory id.
                     * @member {string} id
                     * @memberof md.maib.app.tx.TxCategory
                     * @instance
                     */
                    TxCategory.prototype.id = "";

                    /**
                     * TxCategory categoryCode.
                     * @member {string} categoryCode
                     * @memberof md.maib.app.tx.TxCategory
                     * @instance
                     */
                    TxCategory.prototype.categoryCode = "";

                    /**
                     * TxCategory whenCreated.
                     * @member {number|Long} whenCreated
                     * @memberof md.maib.app.tx.TxCategory
                     * @instance
                     */
                    TxCategory.prototype.whenCreated = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * Creates a new TxCategory instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxCategory
                     * @static
                     * @param {md.maib.app.tx.ITxCategory=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxCategory} TxCategory instance
                     */
                    TxCategory.create = function create(properties) {
                        return new TxCategory(properties);
                    };

                    /**
                     * Encodes the specified TxCategory message. Does not implicitly {@link md.maib.app.tx.TxCategory.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxCategory
                     * @static
                     * @param {md.maib.app.tx.ITxCategory} message TxCategory message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxCategory.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.categoryCode != null && Object.hasOwnProperty.call(message, "categoryCode"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.categoryCode);
                        if (message.whenCreated != null && Object.hasOwnProperty.call(message, "whenCreated"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.whenCreated);
                        return writer;
                    };

                    /**
                     * Encodes the specified TxCategory message, length delimited. Does not implicitly {@link md.maib.app.tx.TxCategory.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxCategory
                     * @static
                     * @param {md.maib.app.tx.ITxCategory} message TxCategory message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxCategory.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxCategory message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxCategory
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxCategory} TxCategory
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxCategory.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxCategory();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.categoryCode = reader.string();
                                break;
                            case 3:
                                message.whenCreated = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxCategory message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxCategory
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxCategory} TxCategory
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxCategory.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxCategory message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxCategory
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxCategory.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.categoryCode != null && message.hasOwnProperty("categoryCode"))
                            if (!$util.isString(message.categoryCode))
                                return "categoryCode: string expected";
                        if (message.whenCreated != null && message.hasOwnProperty("whenCreated"))
                            if (!$util.isInteger(message.whenCreated) && !(message.whenCreated && $util.isInteger(message.whenCreated.low) && $util.isInteger(message.whenCreated.high)))
                                return "whenCreated: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a TxCategory message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxCategory
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxCategory} TxCategory
                     */
                    TxCategory.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxCategory)
                            return object;
                        let message = new $root.md.maib.app.tx.TxCategory();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.categoryCode != null)
                            message.categoryCode = String(object.categoryCode);
                        if (object.whenCreated != null)
                            if ($util.Long)
                                (message.whenCreated = $util.Long.fromValue(object.whenCreated)).unsigned = false;
                            else if (typeof object.whenCreated === "string")
                                message.whenCreated = parseInt(object.whenCreated, 10);
                            else if (typeof object.whenCreated === "number")
                                message.whenCreated = object.whenCreated;
                            else if (typeof object.whenCreated === "object")
                                message.whenCreated = new $util.LongBits(object.whenCreated.low >>> 0, object.whenCreated.high >>> 0).toNumber();
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxCategory message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxCategory
                     * @static
                     * @param {md.maib.app.tx.TxCategory} message TxCategory
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxCategory.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.categoryCode = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.whenCreated = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.whenCreated = options.longs === String ? "0" : 0;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.categoryCode != null && message.hasOwnProperty("categoryCode"))
                            object.categoryCode = message.categoryCode;
                        if (message.whenCreated != null && message.hasOwnProperty("whenCreated"))
                            if (typeof message.whenCreated === "number")
                                object.whenCreated = options.longs === String ? String(message.whenCreated) : message.whenCreated;
                            else
                                object.whenCreated = options.longs === String ? $util.Long.prototype.toString.call(message.whenCreated) : options.longs === Number ? new $util.LongBits(message.whenCreated.low >>> 0, message.whenCreated.high >>> 0).toNumber() : message.whenCreated;
                        return object;
                    };

                    /**
                     * Converts this TxCategory to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxCategory
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxCategory.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TxCategory;
                })();

                tx.TxCategoryResponse = (function() {

                    /**
                     * Properties of a TxCategoryResponse.
                     * @memberof md.maib.app.tx
                     * @interface ITxCategoryResponse
                     * @property {Array.<md.maib.app.tx.ITxCategory>|null} [categories] TxCategoryResponse categories
                     */

                    /**
                     * Constructs a new TxCategoryResponse.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxCategoryResponse.
                     * @implements ITxCategoryResponse
                     * @constructor
                     * @param {md.maib.app.tx.ITxCategoryResponse=} [properties] Properties to set
                     */
                    function TxCategoryResponse(properties) {
                        this.categories = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxCategoryResponse categories.
                     * @member {Array.<md.maib.app.tx.ITxCategory>} categories
                     * @memberof md.maib.app.tx.TxCategoryResponse
                     * @instance
                     */
                    TxCategoryResponse.prototype.categories = $util.emptyArray;

                    /**
                     * Creates a new TxCategoryResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxCategoryResponse
                     * @static
                     * @param {md.maib.app.tx.ITxCategoryResponse=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxCategoryResponse} TxCategoryResponse instance
                     */
                    TxCategoryResponse.create = function create(properties) {
                        return new TxCategoryResponse(properties);
                    };

                    /**
                     * Encodes the specified TxCategoryResponse message. Does not implicitly {@link md.maib.app.tx.TxCategoryResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxCategoryResponse
                     * @static
                     * @param {md.maib.app.tx.ITxCategoryResponse} message TxCategoryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxCategoryResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.categories != null && message.categories.length)
                            for (let i = 0; i < message.categories.length; ++i)
                                $root.md.maib.app.tx.TxCategory.encode(message.categories[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified TxCategoryResponse message, length delimited. Does not implicitly {@link md.maib.app.tx.TxCategoryResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxCategoryResponse
                     * @static
                     * @param {md.maib.app.tx.ITxCategoryResponse} message TxCategoryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxCategoryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxCategoryResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxCategoryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxCategoryResponse} TxCategoryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxCategoryResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxCategoryResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2:
                                if (!(message.categories && message.categories.length))
                                    message.categories = [];
                                message.categories.push($root.md.maib.app.tx.TxCategory.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxCategoryResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxCategoryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxCategoryResponse} TxCategoryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxCategoryResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxCategoryResponse message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxCategoryResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxCategoryResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.categories != null && message.hasOwnProperty("categories")) {
                            if (!Array.isArray(message.categories))
                                return "categories: array expected";
                            for (let i = 0; i < message.categories.length; ++i) {
                                let error = $root.md.maib.app.tx.TxCategory.verify(message.categories[i]);
                                if (error)
                                    return "categories." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a TxCategoryResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxCategoryResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxCategoryResponse} TxCategoryResponse
                     */
                    TxCategoryResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxCategoryResponse)
                            return object;
                        let message = new $root.md.maib.app.tx.TxCategoryResponse();
                        if (object.categories) {
                            if (!Array.isArray(object.categories))
                                throw TypeError(".md.maib.app.tx.TxCategoryResponse.categories: array expected");
                            message.categories = [];
                            for (let i = 0; i < object.categories.length; ++i) {
                                if (typeof object.categories[i] !== "object")
                                    throw TypeError(".md.maib.app.tx.TxCategoryResponse.categories: object expected");
                                message.categories[i] = $root.md.maib.app.tx.TxCategory.fromObject(object.categories[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxCategoryResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxCategoryResponse
                     * @static
                     * @param {md.maib.app.tx.TxCategoryResponse} message TxCategoryResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxCategoryResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.categories = [];
                        if (message.categories && message.categories.length) {
                            object.categories = [];
                            for (let j = 0; j < message.categories.length; ++j)
                                object.categories[j] = $root.md.maib.app.tx.TxCategory.toObject(message.categories[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this TxCategoryResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxCategoryResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxCategoryResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TxCategoryResponse;
                })();

                tx.TxUpdateCategoryRequest = (function() {

                    /**
                     * Properties of a TxUpdateCategoryRequest.
                     * @memberof md.maib.app.tx
                     * @interface ITxUpdateCategoryRequest
                     * @property {string|null} [id] TxUpdateCategoryRequest id
                     * @property {string|null} [categoryId] TxUpdateCategoryRequest categoryId
                     */

                    /**
                     * Constructs a new TxUpdateCategoryRequest.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxUpdateCategoryRequest.
                     * @implements ITxUpdateCategoryRequest
                     * @constructor
                     * @param {md.maib.app.tx.ITxUpdateCategoryRequest=} [properties] Properties to set
                     */
                    function TxUpdateCategoryRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxUpdateCategoryRequest id.
                     * @member {string} id
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @instance
                     */
                    TxUpdateCategoryRequest.prototype.id = "";

                    /**
                     * TxUpdateCategoryRequest categoryId.
                     * @member {string} categoryId
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @instance
                     */
                    TxUpdateCategoryRequest.prototype.categoryId = "";

                    /**
                     * Creates a new TxUpdateCategoryRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @static
                     * @param {md.maib.app.tx.ITxUpdateCategoryRequest=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxUpdateCategoryRequest} TxUpdateCategoryRequest instance
                     */
                    TxUpdateCategoryRequest.create = function create(properties) {
                        return new TxUpdateCategoryRequest(properties);
                    };

                    /**
                     * Encodes the specified TxUpdateCategoryRequest message. Does not implicitly {@link md.maib.app.tx.TxUpdateCategoryRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @static
                     * @param {md.maib.app.tx.ITxUpdateCategoryRequest} message TxUpdateCategoryRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxUpdateCategoryRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.categoryId != null && Object.hasOwnProperty.call(message, "categoryId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.categoryId);
                        return writer;
                    };

                    /**
                     * Encodes the specified TxUpdateCategoryRequest message, length delimited. Does not implicitly {@link md.maib.app.tx.TxUpdateCategoryRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @static
                     * @param {md.maib.app.tx.ITxUpdateCategoryRequest} message TxUpdateCategoryRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxUpdateCategoryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxUpdateCategoryRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxUpdateCategoryRequest} TxUpdateCategoryRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxUpdateCategoryRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxUpdateCategoryRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.categoryId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxUpdateCategoryRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxUpdateCategoryRequest} TxUpdateCategoryRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxUpdateCategoryRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxUpdateCategoryRequest message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxUpdateCategoryRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                            if (!$util.isString(message.categoryId))
                                return "categoryId: string expected";
                        return null;
                    };

                    /**
                     * Creates a TxUpdateCategoryRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxUpdateCategoryRequest} TxUpdateCategoryRequest
                     */
                    TxUpdateCategoryRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxUpdateCategoryRequest)
                            return object;
                        let message = new $root.md.maib.app.tx.TxUpdateCategoryRequest();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.categoryId != null)
                            message.categoryId = String(object.categoryId);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxUpdateCategoryRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @static
                     * @param {md.maib.app.tx.TxUpdateCategoryRequest} message TxUpdateCategoryRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxUpdateCategoryRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.categoryId = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                            object.categoryId = message.categoryId;
                        return object;
                    };

                    /**
                     * Converts this TxUpdateCategoryRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxUpdateCategoryRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxUpdateCategoryRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TxUpdateCategoryRequest;
                })();

                tx.TxUpdateCategoryResponse = (function() {

                    /**
                     * Properties of a TxUpdateCategoryResponse.
                     * @memberof md.maib.app.tx
                     * @interface ITxUpdateCategoryResponse
                     * @property {md.maib.app.tx.TxUpdateCategoryResponse.Result|null} [result] TxUpdateCategoryResponse result
                     */

                    /**
                     * Constructs a new TxUpdateCategoryResponse.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxUpdateCategoryResponse.
                     * @implements ITxUpdateCategoryResponse
                     * @constructor
                     * @param {md.maib.app.tx.ITxUpdateCategoryResponse=} [properties] Properties to set
                     */
                    function TxUpdateCategoryResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxUpdateCategoryResponse result.
                     * @member {md.maib.app.tx.TxUpdateCategoryResponse.Result} result
                     * @memberof md.maib.app.tx.TxUpdateCategoryResponse
                     * @instance
                     */
                    TxUpdateCategoryResponse.prototype.result = 0;

                    /**
                     * Creates a new TxUpdateCategoryResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxUpdateCategoryResponse
                     * @static
                     * @param {md.maib.app.tx.ITxUpdateCategoryResponse=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxUpdateCategoryResponse} TxUpdateCategoryResponse instance
                     */
                    TxUpdateCategoryResponse.create = function create(properties) {
                        return new TxUpdateCategoryResponse(properties);
                    };

                    /**
                     * Encodes the specified TxUpdateCategoryResponse message. Does not implicitly {@link md.maib.app.tx.TxUpdateCategoryResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxUpdateCategoryResponse
                     * @static
                     * @param {md.maib.app.tx.ITxUpdateCategoryResponse} message TxUpdateCategoryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxUpdateCategoryResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified TxUpdateCategoryResponse message, length delimited. Does not implicitly {@link md.maib.app.tx.TxUpdateCategoryResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxUpdateCategoryResponse
                     * @static
                     * @param {md.maib.app.tx.ITxUpdateCategoryResponse} message TxUpdateCategoryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxUpdateCategoryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxUpdateCategoryResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxUpdateCategoryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxUpdateCategoryResponse} TxUpdateCategoryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxUpdateCategoryResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxUpdateCategoryResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.result = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxUpdateCategoryResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxUpdateCategoryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxUpdateCategoryResponse} TxUpdateCategoryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxUpdateCategoryResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxUpdateCategoryResponse message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxUpdateCategoryResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxUpdateCategoryResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a TxUpdateCategoryResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxUpdateCategoryResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxUpdateCategoryResponse} TxUpdateCategoryResponse
                     */
                    TxUpdateCategoryResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxUpdateCategoryResponse)
                            return object;
                        let message = new $root.md.maib.app.tx.TxUpdateCategoryResponse();
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "WRONG_CATEGORY":
                        case 2:
                            message.result = 2;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxUpdateCategoryResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxUpdateCategoryResponse
                     * @static
                     * @param {md.maib.app.tx.TxUpdateCategoryResponse} message TxUpdateCategoryResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxUpdateCategoryResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.tx.TxUpdateCategoryResponse.Result[message.result] : message.result;
                        return object;
                    };

                    /**
                     * Converts this TxUpdateCategoryResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxUpdateCategoryResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxUpdateCategoryResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.tx.TxUpdateCategoryResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} WRONG_CATEGORY=2 WRONG_CATEGORY value
                     */
                    TxUpdateCategoryResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "WRONG_CATEGORY"] = 2;
                        return values;
                    })();

                    return TxUpdateCategoryResponse;
                })();

                tx.TxNotesUpdateRequest = (function() {

                    /**
                     * Properties of a TxNotesUpdateRequest.
                     * @memberof md.maib.app.tx
                     * @interface ITxNotesUpdateRequest
                     * @property {string|null} [id] TxNotesUpdateRequest id
                     * @property {string|null} [notes] TxNotesUpdateRequest notes
                     */

                    /**
                     * Constructs a new TxNotesUpdateRequest.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxNotesUpdateRequest.
                     * @implements ITxNotesUpdateRequest
                     * @constructor
                     * @param {md.maib.app.tx.ITxNotesUpdateRequest=} [properties] Properties to set
                     */
                    function TxNotesUpdateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxNotesUpdateRequest id.
                     * @member {string} id
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @instance
                     */
                    TxNotesUpdateRequest.prototype.id = "";

                    /**
                     * TxNotesUpdateRequest notes.
                     * @member {string} notes
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @instance
                     */
                    TxNotesUpdateRequest.prototype.notes = "";

                    /**
                     * Creates a new TxNotesUpdateRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @static
                     * @param {md.maib.app.tx.ITxNotesUpdateRequest=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxNotesUpdateRequest} TxNotesUpdateRequest instance
                     */
                    TxNotesUpdateRequest.create = function create(properties) {
                        return new TxNotesUpdateRequest(properties);
                    };

                    /**
                     * Encodes the specified TxNotesUpdateRequest message. Does not implicitly {@link md.maib.app.tx.TxNotesUpdateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @static
                     * @param {md.maib.app.tx.ITxNotesUpdateRequest} message TxNotesUpdateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxNotesUpdateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.notes != null && Object.hasOwnProperty.call(message, "notes"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.notes);
                        return writer;
                    };

                    /**
                     * Encodes the specified TxNotesUpdateRequest message, length delimited. Does not implicitly {@link md.maib.app.tx.TxNotesUpdateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @static
                     * @param {md.maib.app.tx.ITxNotesUpdateRequest} message TxNotesUpdateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxNotesUpdateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxNotesUpdateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxNotesUpdateRequest} TxNotesUpdateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxNotesUpdateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxNotesUpdateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.notes = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxNotesUpdateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxNotesUpdateRequest} TxNotesUpdateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxNotesUpdateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxNotesUpdateRequest message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxNotesUpdateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.notes != null && message.hasOwnProperty("notes"))
                            if (!$util.isString(message.notes))
                                return "notes: string expected";
                        return null;
                    };

                    /**
                     * Creates a TxNotesUpdateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxNotesUpdateRequest} TxNotesUpdateRequest
                     */
                    TxNotesUpdateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxNotesUpdateRequest)
                            return object;
                        let message = new $root.md.maib.app.tx.TxNotesUpdateRequest();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.notes != null)
                            message.notes = String(object.notes);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxNotesUpdateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @static
                     * @param {md.maib.app.tx.TxNotesUpdateRequest} message TxNotesUpdateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxNotesUpdateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.notes = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.notes != null && message.hasOwnProperty("notes"))
                            object.notes = message.notes;
                        return object;
                    };

                    /**
                     * Converts this TxNotesUpdateRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxNotesUpdateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxNotesUpdateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TxNotesUpdateRequest;
                })();

                tx.TxNotesUpdateResponse = (function() {

                    /**
                     * Properties of a TxNotesUpdateResponse.
                     * @memberof md.maib.app.tx
                     * @interface ITxNotesUpdateResponse
                     * @property {md.maib.app.tx.TxNotesUpdateResponse.Result|null} [result] TxNotesUpdateResponse result
                     */

                    /**
                     * Constructs a new TxNotesUpdateResponse.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxNotesUpdateResponse.
                     * @implements ITxNotesUpdateResponse
                     * @constructor
                     * @param {md.maib.app.tx.ITxNotesUpdateResponse=} [properties] Properties to set
                     */
                    function TxNotesUpdateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxNotesUpdateResponse result.
                     * @member {md.maib.app.tx.TxNotesUpdateResponse.Result} result
                     * @memberof md.maib.app.tx.TxNotesUpdateResponse
                     * @instance
                     */
                    TxNotesUpdateResponse.prototype.result = 0;

                    /**
                     * Creates a new TxNotesUpdateResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxNotesUpdateResponse
                     * @static
                     * @param {md.maib.app.tx.ITxNotesUpdateResponse=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxNotesUpdateResponse} TxNotesUpdateResponse instance
                     */
                    TxNotesUpdateResponse.create = function create(properties) {
                        return new TxNotesUpdateResponse(properties);
                    };

                    /**
                     * Encodes the specified TxNotesUpdateResponse message. Does not implicitly {@link md.maib.app.tx.TxNotesUpdateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxNotesUpdateResponse
                     * @static
                     * @param {md.maib.app.tx.ITxNotesUpdateResponse} message TxNotesUpdateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxNotesUpdateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified TxNotesUpdateResponse message, length delimited. Does not implicitly {@link md.maib.app.tx.TxNotesUpdateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxNotesUpdateResponse
                     * @static
                     * @param {md.maib.app.tx.ITxNotesUpdateResponse} message TxNotesUpdateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxNotesUpdateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxNotesUpdateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxNotesUpdateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxNotesUpdateResponse} TxNotesUpdateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxNotesUpdateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxNotesUpdateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.result = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxNotesUpdateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxNotesUpdateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxNotesUpdateResponse} TxNotesUpdateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxNotesUpdateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxNotesUpdateResponse message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxNotesUpdateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxNotesUpdateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a TxNotesUpdateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxNotesUpdateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxNotesUpdateResponse} TxNotesUpdateResponse
                     */
                    TxNotesUpdateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxNotesUpdateResponse)
                            return object;
                        let message = new $root.md.maib.app.tx.TxNotesUpdateResponse();
                        switch (object.result) {
                        case "UNKNOWN":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "TOO_LONG_NOTE":
                        case 2:
                            message.result = 2;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxNotesUpdateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxNotesUpdateResponse
                     * @static
                     * @param {md.maib.app.tx.TxNotesUpdateResponse} message TxNotesUpdateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxNotesUpdateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.result = options.enums === String ? "UNKNOWN" : 0;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.tx.TxNotesUpdateResponse.Result[message.result] : message.result;
                        return object;
                    };

                    /**
                     * Converts this TxNotesUpdateResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxNotesUpdateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxNotesUpdateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.tx.TxNotesUpdateResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN=0 UNKNOWN value
                     * @property {number} OK=1 OK value
                     * @property {number} TOO_LONG_NOTE=2 TOO_LONG_NOTE value
                     */
                    TxNotesUpdateResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "TOO_LONG_NOTE"] = 2;
                        return values;
                    })();

                    return TxNotesUpdateResponse;
                })();

                tx.Origin = (function() {

                    /**
                     * Properties of an Origin.
                     * @memberof md.maib.app.tx
                     * @interface IOrigin
                     * @property {string|null} [deviceName] Origin deviceName
                     */

                    /**
                     * Constructs a new Origin.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents an Origin.
                     * @implements IOrigin
                     * @constructor
                     * @param {md.maib.app.tx.IOrigin=} [properties] Properties to set
                     */
                    function Origin(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Origin deviceName.
                     * @member {string} deviceName
                     * @memberof md.maib.app.tx.Origin
                     * @instance
                     */
                    Origin.prototype.deviceName = "";

                    /**
                     * Creates a new Origin instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.Origin
                     * @static
                     * @param {md.maib.app.tx.IOrigin=} [properties] Properties to set
                     * @returns {md.maib.app.tx.Origin} Origin instance
                     */
                    Origin.create = function create(properties) {
                        return new Origin(properties);
                    };

                    /**
                     * Encodes the specified Origin message. Does not implicitly {@link md.maib.app.tx.Origin.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.Origin
                     * @static
                     * @param {md.maib.app.tx.IOrigin} message Origin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Origin.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.deviceName != null && Object.hasOwnProperty.call(message, "deviceName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceName);
                        return writer;
                    };

                    /**
                     * Encodes the specified Origin message, length delimited. Does not implicitly {@link md.maib.app.tx.Origin.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.Origin
                     * @static
                     * @param {md.maib.app.tx.IOrigin} message Origin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Origin.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Origin message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.Origin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.Origin} Origin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Origin.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.Origin();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.deviceName = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Origin message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.Origin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.Origin} Origin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Origin.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Origin message.
                     * @function verify
                     * @memberof md.maib.app.tx.Origin
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Origin.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.deviceName != null && message.hasOwnProperty("deviceName"))
                            if (!$util.isString(message.deviceName))
                                return "deviceName: string expected";
                        return null;
                    };

                    /**
                     * Creates an Origin message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.Origin
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.Origin} Origin
                     */
                    Origin.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.Origin)
                            return object;
                        let message = new $root.md.maib.app.tx.Origin();
                        if (object.deviceName != null)
                            message.deviceName = String(object.deviceName);
                        return message;
                    };

                    /**
                     * Creates a plain object from an Origin message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.Origin
                     * @static
                     * @param {md.maib.app.tx.Origin} message Origin
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Origin.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.deviceName = "";
                        if (message.deviceName != null && message.hasOwnProperty("deviceName"))
                            object.deviceName = message.deviceName;
                        return object;
                    };

                    /**
                     * Converts this Origin to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.Origin
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Origin.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Origin;
                })();

                tx.TxChargebackRequest = (function() {

                    /**
                     * Properties of a TxChargebackRequest.
                     * @memberof md.maib.app.tx
                     * @interface ITxChargebackRequest
                     * @property {string|null} [id] TxChargebackRequest id
                     * @property {string|null} [message] TxChargebackRequest message
                     */

                    /**
                     * Constructs a new TxChargebackRequest.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxChargebackRequest.
                     * @implements ITxChargebackRequest
                     * @constructor
                     * @param {md.maib.app.tx.ITxChargebackRequest=} [properties] Properties to set
                     */
                    function TxChargebackRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxChargebackRequest id.
                     * @member {string} id
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @instance
                     */
                    TxChargebackRequest.prototype.id = "";

                    /**
                     * TxChargebackRequest message.
                     * @member {string} message
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @instance
                     */
                    TxChargebackRequest.prototype.message = "";

                    /**
                     * Creates a new TxChargebackRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @static
                     * @param {md.maib.app.tx.ITxChargebackRequest=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxChargebackRequest} TxChargebackRequest instance
                     */
                    TxChargebackRequest.create = function create(properties) {
                        return new TxChargebackRequest(properties);
                    };

                    /**
                     * Encodes the specified TxChargebackRequest message. Does not implicitly {@link md.maib.app.tx.TxChargebackRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @static
                     * @param {md.maib.app.tx.ITxChargebackRequest} message TxChargebackRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxChargebackRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                        return writer;
                    };

                    /**
                     * Encodes the specified TxChargebackRequest message, length delimited. Does not implicitly {@link md.maib.app.tx.TxChargebackRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @static
                     * @param {md.maib.app.tx.ITxChargebackRequest} message TxChargebackRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxChargebackRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxChargebackRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxChargebackRequest} TxChargebackRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxChargebackRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxChargebackRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.message = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxChargebackRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxChargebackRequest} TxChargebackRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxChargebackRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxChargebackRequest message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxChargebackRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.message != null && message.hasOwnProperty("message"))
                            if (!$util.isString(message.message))
                                return "message: string expected";
                        return null;
                    };

                    /**
                     * Creates a TxChargebackRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxChargebackRequest} TxChargebackRequest
                     */
                    TxChargebackRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxChargebackRequest)
                            return object;
                        let message = new $root.md.maib.app.tx.TxChargebackRequest();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.message != null)
                            message.message = String(object.message);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxChargebackRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @static
                     * @param {md.maib.app.tx.TxChargebackRequest} message TxChargebackRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxChargebackRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.message = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.message != null && message.hasOwnProperty("message"))
                            object.message = message.message;
                        return object;
                    };

                    /**
                     * Converts this TxChargebackRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxChargebackRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxChargebackRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TxChargebackRequest;
                })();

                tx.TxChargebackResponse = (function() {

                    /**
                     * Properties of a TxChargebackResponse.
                     * @memberof md.maib.app.tx
                     * @interface ITxChargebackResponse
                     * @property {md.maib.app.tx.TxChargebackResponse.Result|null} [result] TxChargebackResponse result
                     */

                    /**
                     * Constructs a new TxChargebackResponse.
                     * @memberof md.maib.app.tx
                     * @classdesc Represents a TxChargebackResponse.
                     * @implements ITxChargebackResponse
                     * @constructor
                     * @param {md.maib.app.tx.ITxChargebackResponse=} [properties] Properties to set
                     */
                    function TxChargebackResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TxChargebackResponse result.
                     * @member {md.maib.app.tx.TxChargebackResponse.Result} result
                     * @memberof md.maib.app.tx.TxChargebackResponse
                     * @instance
                     */
                    TxChargebackResponse.prototype.result = 0;

                    /**
                     * Creates a new TxChargebackResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.tx.TxChargebackResponse
                     * @static
                     * @param {md.maib.app.tx.ITxChargebackResponse=} [properties] Properties to set
                     * @returns {md.maib.app.tx.TxChargebackResponse} TxChargebackResponse instance
                     */
                    TxChargebackResponse.create = function create(properties) {
                        return new TxChargebackResponse(properties);
                    };

                    /**
                     * Encodes the specified TxChargebackResponse message. Does not implicitly {@link md.maib.app.tx.TxChargebackResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.tx.TxChargebackResponse
                     * @static
                     * @param {md.maib.app.tx.ITxChargebackResponse} message TxChargebackResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxChargebackResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified TxChargebackResponse message, length delimited. Does not implicitly {@link md.maib.app.tx.TxChargebackResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.tx.TxChargebackResponse
                     * @static
                     * @param {md.maib.app.tx.ITxChargebackResponse} message TxChargebackResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TxChargebackResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TxChargebackResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.tx.TxChargebackResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.tx.TxChargebackResponse} TxChargebackResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxChargebackResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.tx.TxChargebackResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.result = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TxChargebackResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.tx.TxChargebackResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.tx.TxChargebackResponse} TxChargebackResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TxChargebackResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TxChargebackResponse message.
                     * @function verify
                     * @memberof md.maib.app.tx.TxChargebackResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TxChargebackResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a TxChargebackResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.tx.TxChargebackResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.tx.TxChargebackResponse} TxChargebackResponse
                     */
                    TxChargebackResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.tx.TxChargebackResponse)
                            return object;
                        let message = new $root.md.maib.app.tx.TxChargebackResponse();
                        switch (object.result) {
                        case "UNKNOWN_RESULT":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "VALIDATION_ERROR":
                        case 2:
                            message.result = 2;
                            break;
                        case "ALREADY_CHARGED_BACK":
                        case 3:
                            message.result = 3;
                            break;
                        case "NOT_FOUND":
                        case 4:
                            message.result = 4;
                            break;
                        case "TYPE_NOT_SUPPORTED":
                        case 5:
                            message.result = 5;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TxChargebackResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.tx.TxChargebackResponse
                     * @static
                     * @param {md.maib.app.tx.TxChargebackResponse} message TxChargebackResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TxChargebackResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.result = options.enums === String ? "UNKNOWN_RESULT" : 0;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.tx.TxChargebackResponse.Result[message.result] : message.result;
                        return object;
                    };

                    /**
                     * Converts this TxChargebackResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.tx.TxChargebackResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TxChargebackResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.tx.TxChargebackResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN_RESULT=0 UNKNOWN_RESULT value
                     * @property {number} OK=1 OK value
                     * @property {number} VALIDATION_ERROR=2 VALIDATION_ERROR value
                     * @property {number} ALREADY_CHARGED_BACK=3 ALREADY_CHARGED_BACK value
                     * @property {number} NOT_FOUND=4 NOT_FOUND value
                     * @property {number} TYPE_NOT_SUPPORTED=5 TYPE_NOT_SUPPORTED value
                     */
                    TxChargebackResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN_RESULT"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "VALIDATION_ERROR"] = 2;
                        values[valuesById[3] = "ALREADY_CHARGED_BACK"] = 3;
                        values[valuesById[4] = "NOT_FOUND"] = 4;
                        values[valuesById[5] = "TYPE_NOT_SUPPORTED"] = 5;
                        return values;
                    })();

                    return TxChargebackResponse;
                })();

                /**
                 * TxType enum.
                 * @name md.maib.app.tx.TxType
                 * @enum {number}
                 * @property {number} SUPPLY=0 SUPPLY value
                 * @property {number} SPEND=1 SPEND value
                 * @property {number} TRANSFER=2 TRANSFER value
                 * @property {number} WITHDRAW=3 WITHDRAW value
                 * @property {number} MERCHANT=4 MERCHANT value
                 * @property {number} SPEND_REVERT=5 SPEND_REVERT value
                 * @property {number} SUPPLY_REVERT=6 SUPPLY_REVERT value
                 * @property {number} CARD_TO_ACCOUNT=7 CARD_TO_ACCOUNT value
                 * @property {number} ACCOUNT_TO_CARD=8 ACCOUNT_TO_CARD value
                 * @property {number} INSTALLMENT_PURCHASE=9 INSTALLMENT_PURCHASE value
                 * @property {number} PAGED_PAYMENT=10 PAGED_PAYMENT value
                 * @property {number} IBAN_PAYMENT=11 IBAN_PAYMENT value
                 */
                tx.TxType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "SUPPLY"] = 0;
                    values[valuesById[1] = "SPEND"] = 1;
                    values[valuesById[2] = "TRANSFER"] = 2;
                    values[valuesById[3] = "WITHDRAW"] = 3;
                    values[valuesById[4] = "MERCHANT"] = 4;
                    values[valuesById[5] = "SPEND_REVERT"] = 5;
                    values[valuesById[6] = "SUPPLY_REVERT"] = 6;
                    values[valuesById[7] = "CARD_TO_ACCOUNT"] = 7;
                    values[valuesById[8] = "ACCOUNT_TO_CARD"] = 8;
                    values[valuesById[9] = "INSTALLMENT_PURCHASE"] = 9;
                    values[valuesById[10] = "PAGED_PAYMENT"] = 10;
                    values[valuesById[11] = "IBAN_PAYMENT"] = 11;
                    return values;
                })();

                return tx;
            })();

            app.cashback = (function() {

                /**
                 * Namespace cashback.
                 * @memberof md.maib.app
                 * @namespace
                 */
                const cashback = {};

                cashback.CashbackPayoutResponse = (function() {

                    /**
                     * Properties of a CashbackPayoutResponse.
                     * @memberof md.maib.app.cashback
                     * @interface ICashbackPayoutResponse
                     * @property {number|null} [previousAmount] CashbackPayoutResponse previousAmount
                     * @property {md.maib.app.cashback.CashbackPayoutStatus|null} [status] CashbackPayoutResponse status
                     * @property {number|null} [currentAmount] CashbackPayoutResponse currentAmount
                     */

                    /**
                     * Constructs a new CashbackPayoutResponse.
                     * @memberof md.maib.app.cashback
                     * @classdesc Represents a CashbackPayoutResponse.
                     * @implements ICashbackPayoutResponse
                     * @constructor
                     * @param {md.maib.app.cashback.ICashbackPayoutResponse=} [properties] Properties to set
                     */
                    function CashbackPayoutResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CashbackPayoutResponse previousAmount.
                     * @member {number} previousAmount
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @instance
                     */
                    CashbackPayoutResponse.prototype.previousAmount = 0;

                    /**
                     * CashbackPayoutResponse status.
                     * @member {md.maib.app.cashback.CashbackPayoutStatus} status
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @instance
                     */
                    CashbackPayoutResponse.prototype.status = 0;

                    /**
                     * CashbackPayoutResponse currentAmount.
                     * @member {number} currentAmount
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @instance
                     */
                    CashbackPayoutResponse.prototype.currentAmount = 0;

                    /**
                     * Creates a new CashbackPayoutResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @static
                     * @param {md.maib.app.cashback.ICashbackPayoutResponse=} [properties] Properties to set
                     * @returns {md.maib.app.cashback.CashbackPayoutResponse} CashbackPayoutResponse instance
                     */
                    CashbackPayoutResponse.create = function create(properties) {
                        return new CashbackPayoutResponse(properties);
                    };

                    /**
                     * Encodes the specified CashbackPayoutResponse message. Does not implicitly {@link md.maib.app.cashback.CashbackPayoutResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @static
                     * @param {md.maib.app.cashback.ICashbackPayoutResponse} message CashbackPayoutResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackPayoutResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.previousAmount != null && Object.hasOwnProperty.call(message, "previousAmount"))
                            writer.uint32(/* id 1, wireType 1 =*/9).double(message.previousAmount);
                        if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);
                        if (message.currentAmount != null && Object.hasOwnProperty.call(message, "currentAmount"))
                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.currentAmount);
                        return writer;
                    };

                    /**
                     * Encodes the specified CashbackPayoutResponse message, length delimited. Does not implicitly {@link md.maib.app.cashback.CashbackPayoutResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @static
                     * @param {md.maib.app.cashback.ICashbackPayoutResponse} message CashbackPayoutResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackPayoutResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CashbackPayoutResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.cashback.CashbackPayoutResponse} CashbackPayoutResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackPayoutResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.cashback.CashbackPayoutResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.previousAmount = reader.double();
                                break;
                            case 2:
                                message.status = reader.int32();
                                break;
                            case 3:
                                message.currentAmount = reader.double();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CashbackPayoutResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.cashback.CashbackPayoutResponse} CashbackPayoutResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackPayoutResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CashbackPayoutResponse message.
                     * @function verify
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CashbackPayoutResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.previousAmount != null && message.hasOwnProperty("previousAmount"))
                            if (typeof message.previousAmount !== "number")
                                return "previousAmount: number expected";
                        if (message.status != null && message.hasOwnProperty("status"))
                            switch (message.status) {
                            default:
                                return "status: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.currentAmount != null && message.hasOwnProperty("currentAmount"))
                            if (typeof message.currentAmount !== "number")
                                return "currentAmount: number expected";
                        return null;
                    };

                    /**
                     * Creates a CashbackPayoutResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.cashback.CashbackPayoutResponse} CashbackPayoutResponse
                     */
                    CashbackPayoutResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.cashback.CashbackPayoutResponse)
                            return object;
                        let message = new $root.md.maib.app.cashback.CashbackPayoutResponse();
                        if (object.previousAmount != null)
                            message.previousAmount = Number(object.previousAmount);
                        switch (object.status) {
                        case "UNKNOWN_STATUS":
                        case 0:
                            message.status = 0;
                            break;
                        case "CALCULATED":
                        case 1:
                            message.status = 1;
                            break;
                        case "TRANSFERRED":
                        case 2:
                            message.status = 2;
                            break;
                        }
                        if (object.currentAmount != null)
                            message.currentAmount = Number(object.currentAmount);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CashbackPayoutResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @static
                     * @param {md.maib.app.cashback.CashbackPayoutResponse} message CashbackPayoutResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CashbackPayoutResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.previousAmount = 0;
                            object.status = options.enums === String ? "UNKNOWN_STATUS" : 0;
                            object.currentAmount = 0;
                        }
                        if (message.previousAmount != null && message.hasOwnProperty("previousAmount"))
                            object.previousAmount = options.json && !isFinite(message.previousAmount) ? String(message.previousAmount) : message.previousAmount;
                        if (message.status != null && message.hasOwnProperty("status"))
                            object.status = options.enums === String ? $root.md.maib.app.cashback.CashbackPayoutStatus[message.status] : message.status;
                        if (message.currentAmount != null && message.hasOwnProperty("currentAmount"))
                            object.currentAmount = options.json && !isFinite(message.currentAmount) ? String(message.currentAmount) : message.currentAmount;
                        return object;
                    };

                    /**
                     * Converts this CashbackPayoutResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.cashback.CashbackPayoutResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CashbackPayoutResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CashbackPayoutResponse;
                })();

                cashback.CashbackPayoutOptions = (function() {

                    /**
                     * Properties of a CashbackPayoutOptions.
                     * @memberof md.maib.app.cashback
                     * @interface ICashbackPayoutOptions
                     * @property {Array.<number|Long>|null} [cards] CashbackPayoutOptions cards
                     * @property {Array.<string>|null} [accounts] CashbackPayoutOptions accounts
                     * @property {number|Long|null} [cardId] CashbackPayoutOptions cardId
                     * @property {string|null} [accountNumber] CashbackPayoutOptions accountNumber
                     */

                    /**
                     * Constructs a new CashbackPayoutOptions.
                     * @memberof md.maib.app.cashback
                     * @classdesc Represents a CashbackPayoutOptions.
                     * @implements ICashbackPayoutOptions
                     * @constructor
                     * @param {md.maib.app.cashback.ICashbackPayoutOptions=} [properties] Properties to set
                     */
                    function CashbackPayoutOptions(properties) {
                        this.cards = [];
                        this.accounts = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CashbackPayoutOptions cards.
                     * @member {Array.<number|Long>} cards
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @instance
                     */
                    CashbackPayoutOptions.prototype.cards = $util.emptyArray;

                    /**
                     * CashbackPayoutOptions accounts.
                     * @member {Array.<string>} accounts
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @instance
                     */
                    CashbackPayoutOptions.prototype.accounts = $util.emptyArray;

                    /**
                     * CashbackPayoutOptions cardId.
                     * @member {number|Long|null|undefined} cardId
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @instance
                     */
                    CashbackPayoutOptions.prototype.cardId = null;

                    /**
                     * CashbackPayoutOptions accountNumber.
                     * @member {string|null|undefined} accountNumber
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @instance
                     */
                    CashbackPayoutOptions.prototype.accountNumber = null;

                    // OneOf field names bound to virtual getters and setters
                    let $oneOfFields;

                    /**
                     * CashbackPayoutOptions selectedAccount.
                     * @member {"cardId"|"accountNumber"|undefined} selectedAccount
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @instance
                     */
                    Object.defineProperty(CashbackPayoutOptions.prototype, "selectedAccount", {
                        get: $util.oneOfGetter($oneOfFields = ["cardId", "accountNumber"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new CashbackPayoutOptions instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @static
                     * @param {md.maib.app.cashback.ICashbackPayoutOptions=} [properties] Properties to set
                     * @returns {md.maib.app.cashback.CashbackPayoutOptions} CashbackPayoutOptions instance
                     */
                    CashbackPayoutOptions.create = function create(properties) {
                        return new CashbackPayoutOptions(properties);
                    };

                    /**
                     * Encodes the specified CashbackPayoutOptions message. Does not implicitly {@link md.maib.app.cashback.CashbackPayoutOptions.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @static
                     * @param {md.maib.app.cashback.ICashbackPayoutOptions} message CashbackPayoutOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackPayoutOptions.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cards != null && message.cards.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (let i = 0; i < message.cards.length; ++i)
                                writer.int64(message.cards[i]);
                            writer.ldelim();
                        }
                        if (message.accounts != null && message.accounts.length)
                            for (let i = 0; i < message.accounts.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.accounts[i]);
                        if (message.cardId != null && Object.hasOwnProperty.call(message, "cardId"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.cardId);
                        if (message.accountNumber != null && Object.hasOwnProperty.call(message, "accountNumber"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.accountNumber);
                        return writer;
                    };

                    /**
                     * Encodes the specified CashbackPayoutOptions message, length delimited. Does not implicitly {@link md.maib.app.cashback.CashbackPayoutOptions.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @static
                     * @param {md.maib.app.cashback.ICashbackPayoutOptions} message CashbackPayoutOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackPayoutOptions.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CashbackPayoutOptions message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.cashback.CashbackPayoutOptions} CashbackPayoutOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackPayoutOptions.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.cashback.CashbackPayoutOptions();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.cards && message.cards.length))
                                    message.cards = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.cards.push(reader.int64());
                                } else
                                    message.cards.push(reader.int64());
                                break;
                            case 2:
                                if (!(message.accounts && message.accounts.length))
                                    message.accounts = [];
                                message.accounts.push(reader.string());
                                break;
                            case 3:
                                message.cardId = reader.int64();
                                break;
                            case 4:
                                message.accountNumber = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CashbackPayoutOptions message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.cashback.CashbackPayoutOptions} CashbackPayoutOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackPayoutOptions.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CashbackPayoutOptions message.
                     * @function verify
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CashbackPayoutOptions.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        let properties = {};
                        if (message.cards != null && message.hasOwnProperty("cards")) {
                            if (!Array.isArray(message.cards))
                                return "cards: array expected";
                            for (let i = 0; i < message.cards.length; ++i)
                                if (!$util.isInteger(message.cards[i]) && !(message.cards[i] && $util.isInteger(message.cards[i].low) && $util.isInteger(message.cards[i].high)))
                                    return "cards: integer|Long[] expected";
                        }
                        if (message.accounts != null && message.hasOwnProperty("accounts")) {
                            if (!Array.isArray(message.accounts))
                                return "accounts: array expected";
                            for (let i = 0; i < message.accounts.length; ++i)
                                if (!$util.isString(message.accounts[i]))
                                    return "accounts: string[] expected";
                        }
                        if (message.cardId != null && message.hasOwnProperty("cardId")) {
                            properties.selectedAccount = 1;
                            if (!$util.isInteger(message.cardId) && !(message.cardId && $util.isInteger(message.cardId.low) && $util.isInteger(message.cardId.high)))
                                return "cardId: integer|Long expected";
                        }
                        if (message.accountNumber != null && message.hasOwnProperty("accountNumber")) {
                            if (properties.selectedAccount === 1)
                                return "selectedAccount: multiple values";
                            properties.selectedAccount = 1;
                            if (!$util.isString(message.accountNumber))
                                return "accountNumber: string expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a CashbackPayoutOptions message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.cashback.CashbackPayoutOptions} CashbackPayoutOptions
                     */
                    CashbackPayoutOptions.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.cashback.CashbackPayoutOptions)
                            return object;
                        let message = new $root.md.maib.app.cashback.CashbackPayoutOptions();
                        if (object.cards) {
                            if (!Array.isArray(object.cards))
                                throw TypeError(".md.maib.app.cashback.CashbackPayoutOptions.cards: array expected");
                            message.cards = [];
                            for (let i = 0; i < object.cards.length; ++i)
                                if ($util.Long)
                                    (message.cards[i] = $util.Long.fromValue(object.cards[i])).unsigned = false;
                                else if (typeof object.cards[i] === "string")
                                    message.cards[i] = parseInt(object.cards[i], 10);
                                else if (typeof object.cards[i] === "number")
                                    message.cards[i] = object.cards[i];
                                else if (typeof object.cards[i] === "object")
                                    message.cards[i] = new $util.LongBits(object.cards[i].low >>> 0, object.cards[i].high >>> 0).toNumber();
                        }
                        if (object.accounts) {
                            if (!Array.isArray(object.accounts))
                                throw TypeError(".md.maib.app.cashback.CashbackPayoutOptions.accounts: array expected");
                            message.accounts = [];
                            for (let i = 0; i < object.accounts.length; ++i)
                                message.accounts[i] = String(object.accounts[i]);
                        }
                        if (object.cardId != null)
                            if ($util.Long)
                                (message.cardId = $util.Long.fromValue(object.cardId)).unsigned = false;
                            else if (typeof object.cardId === "string")
                                message.cardId = parseInt(object.cardId, 10);
                            else if (typeof object.cardId === "number")
                                message.cardId = object.cardId;
                            else if (typeof object.cardId === "object")
                                message.cardId = new $util.LongBits(object.cardId.low >>> 0, object.cardId.high >>> 0).toNumber();
                        if (object.accountNumber != null)
                            message.accountNumber = String(object.accountNumber);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CashbackPayoutOptions message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @static
                     * @param {md.maib.app.cashback.CashbackPayoutOptions} message CashbackPayoutOptions
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CashbackPayoutOptions.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.cards = [];
                            object.accounts = [];
                        }
                        if (message.cards && message.cards.length) {
                            object.cards = [];
                            for (let j = 0; j < message.cards.length; ++j)
                                if (typeof message.cards[j] === "number")
                                    object.cards[j] = options.longs === String ? String(message.cards[j]) : message.cards[j];
                                else
                                    object.cards[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cards[j]) : options.longs === Number ? new $util.LongBits(message.cards[j].low >>> 0, message.cards[j].high >>> 0).toNumber() : message.cards[j];
                        }
                        if (message.accounts && message.accounts.length) {
                            object.accounts = [];
                            for (let j = 0; j < message.accounts.length; ++j)
                                object.accounts[j] = message.accounts[j];
                        }
                        if (message.cardId != null && message.hasOwnProperty("cardId")) {
                            if (typeof message.cardId === "number")
                                object.cardId = options.longs === String ? String(message.cardId) : message.cardId;
                            else
                                object.cardId = options.longs === String ? $util.Long.prototype.toString.call(message.cardId) : options.longs === Number ? new $util.LongBits(message.cardId.low >>> 0, message.cardId.high >>> 0).toNumber() : message.cardId;
                            if (options.oneofs)
                                object.selectedAccount = "cardId";
                        }
                        if (message.accountNumber != null && message.hasOwnProperty("accountNumber")) {
                            object.accountNumber = message.accountNumber;
                            if (options.oneofs)
                                object.selectedAccount = "accountNumber";
                        }
                        return object;
                    };

                    /**
                     * Converts this CashbackPayoutOptions to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.cashback.CashbackPayoutOptions
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CashbackPayoutOptions.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CashbackPayoutOptions;
                })();

                cashback.CashbackOptionsChangeRequest = (function() {

                    /**
                     * Properties of a CashbackOptionsChangeRequest.
                     * @memberof md.maib.app.cashback
                     * @interface ICashbackOptionsChangeRequest
                     * @property {number|Long|null} [cardId] CashbackOptionsChangeRequest cardId
                     * @property {string|null} [accountNumber] CashbackOptionsChangeRequest accountNumber
                     */

                    /**
                     * Constructs a new CashbackOptionsChangeRequest.
                     * @memberof md.maib.app.cashback
                     * @classdesc Represents a CashbackOptionsChangeRequest.
                     * @implements ICashbackOptionsChangeRequest
                     * @constructor
                     * @param {md.maib.app.cashback.ICashbackOptionsChangeRequest=} [properties] Properties to set
                     */
                    function CashbackOptionsChangeRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CashbackOptionsChangeRequest cardId.
                     * @member {number|Long|null|undefined} cardId
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @instance
                     */
                    CashbackOptionsChangeRequest.prototype.cardId = null;

                    /**
                     * CashbackOptionsChangeRequest accountNumber.
                     * @member {string|null|undefined} accountNumber
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @instance
                     */
                    CashbackOptionsChangeRequest.prototype.accountNumber = null;

                    // OneOf field names bound to virtual getters and setters
                    let $oneOfFields;

                    /**
                     * CashbackOptionsChangeRequest account.
                     * @member {"cardId"|"accountNumber"|undefined} account
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @instance
                     */
                    Object.defineProperty(CashbackOptionsChangeRequest.prototype, "account", {
                        get: $util.oneOfGetter($oneOfFields = ["cardId", "accountNumber"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new CashbackOptionsChangeRequest instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @static
                     * @param {md.maib.app.cashback.ICashbackOptionsChangeRequest=} [properties] Properties to set
                     * @returns {md.maib.app.cashback.CashbackOptionsChangeRequest} CashbackOptionsChangeRequest instance
                     */
                    CashbackOptionsChangeRequest.create = function create(properties) {
                        return new CashbackOptionsChangeRequest(properties);
                    };

                    /**
                     * Encodes the specified CashbackOptionsChangeRequest message. Does not implicitly {@link md.maib.app.cashback.CashbackOptionsChangeRequest.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @static
                     * @param {md.maib.app.cashback.ICashbackOptionsChangeRequest} message CashbackOptionsChangeRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackOptionsChangeRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cardId != null && Object.hasOwnProperty.call(message, "cardId"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.cardId);
                        if (message.accountNumber != null && Object.hasOwnProperty.call(message, "accountNumber"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountNumber);
                        return writer;
                    };

                    /**
                     * Encodes the specified CashbackOptionsChangeRequest message, length delimited. Does not implicitly {@link md.maib.app.cashback.CashbackOptionsChangeRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @static
                     * @param {md.maib.app.cashback.ICashbackOptionsChangeRequest} message CashbackOptionsChangeRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackOptionsChangeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CashbackOptionsChangeRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.cashback.CashbackOptionsChangeRequest} CashbackOptionsChangeRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackOptionsChangeRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.cashback.CashbackOptionsChangeRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.cardId = reader.int64();
                                break;
                            case 2:
                                message.accountNumber = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CashbackOptionsChangeRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.cashback.CashbackOptionsChangeRequest} CashbackOptionsChangeRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackOptionsChangeRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CashbackOptionsChangeRequest message.
                     * @function verify
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CashbackOptionsChangeRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        let properties = {};
                        if (message.cardId != null && message.hasOwnProperty("cardId")) {
                            properties.account = 1;
                            if (!$util.isInteger(message.cardId) && !(message.cardId && $util.isInteger(message.cardId.low) && $util.isInteger(message.cardId.high)))
                                return "cardId: integer|Long expected";
                        }
                        if (message.accountNumber != null && message.hasOwnProperty("accountNumber")) {
                            if (properties.account === 1)
                                return "account: multiple values";
                            properties.account = 1;
                            if (!$util.isString(message.accountNumber))
                                return "accountNumber: string expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a CashbackOptionsChangeRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.cashback.CashbackOptionsChangeRequest} CashbackOptionsChangeRequest
                     */
                    CashbackOptionsChangeRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.cashback.CashbackOptionsChangeRequest)
                            return object;
                        let message = new $root.md.maib.app.cashback.CashbackOptionsChangeRequest();
                        if (object.cardId != null)
                            if ($util.Long)
                                (message.cardId = $util.Long.fromValue(object.cardId)).unsigned = false;
                            else if (typeof object.cardId === "string")
                                message.cardId = parseInt(object.cardId, 10);
                            else if (typeof object.cardId === "number")
                                message.cardId = object.cardId;
                            else if (typeof object.cardId === "object")
                                message.cardId = new $util.LongBits(object.cardId.low >>> 0, object.cardId.high >>> 0).toNumber();
                        if (object.accountNumber != null)
                            message.accountNumber = String(object.accountNumber);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CashbackOptionsChangeRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @static
                     * @param {md.maib.app.cashback.CashbackOptionsChangeRequest} message CashbackOptionsChangeRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CashbackOptionsChangeRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (message.cardId != null && message.hasOwnProperty("cardId")) {
                            if (typeof message.cardId === "number")
                                object.cardId = options.longs === String ? String(message.cardId) : message.cardId;
                            else
                                object.cardId = options.longs === String ? $util.Long.prototype.toString.call(message.cardId) : options.longs === Number ? new $util.LongBits(message.cardId.low >>> 0, message.cardId.high >>> 0).toNumber() : message.cardId;
                            if (options.oneofs)
                                object.account = "cardId";
                        }
                        if (message.accountNumber != null && message.hasOwnProperty("accountNumber")) {
                            object.accountNumber = message.accountNumber;
                            if (options.oneofs)
                                object.account = "accountNumber";
                        }
                        return object;
                    };

                    /**
                     * Converts this CashbackOptionsChangeRequest to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CashbackOptionsChangeRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CashbackOptionsChangeRequest;
                })();

                cashback.CashbackOptionsChangeResponse = (function() {

                    /**
                     * Properties of a CashbackOptionsChangeResponse.
                     * @memberof md.maib.app.cashback
                     * @interface ICashbackOptionsChangeResponse
                     * @property {md.maib.app.cashback.CashbackOptionsChangeResponse.Result|null} [result] CashbackOptionsChangeResponse result
                     */

                    /**
                     * Constructs a new CashbackOptionsChangeResponse.
                     * @memberof md.maib.app.cashback
                     * @classdesc Represents a CashbackOptionsChangeResponse.
                     * @implements ICashbackOptionsChangeResponse
                     * @constructor
                     * @param {md.maib.app.cashback.ICashbackOptionsChangeResponse=} [properties] Properties to set
                     */
                    function CashbackOptionsChangeResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CashbackOptionsChangeResponse result.
                     * @member {md.maib.app.cashback.CashbackOptionsChangeResponse.Result} result
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeResponse
                     * @instance
                     */
                    CashbackOptionsChangeResponse.prototype.result = 0;

                    /**
                     * Creates a new CashbackOptionsChangeResponse instance using the specified properties.
                     * @function create
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeResponse
                     * @static
                     * @param {md.maib.app.cashback.ICashbackOptionsChangeResponse=} [properties] Properties to set
                     * @returns {md.maib.app.cashback.CashbackOptionsChangeResponse} CashbackOptionsChangeResponse instance
                     */
                    CashbackOptionsChangeResponse.create = function create(properties) {
                        return new CashbackOptionsChangeResponse(properties);
                    };

                    /**
                     * Encodes the specified CashbackOptionsChangeResponse message. Does not implicitly {@link md.maib.app.cashback.CashbackOptionsChangeResponse.verify|verify} messages.
                     * @function encode
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeResponse
                     * @static
                     * @param {md.maib.app.cashback.ICashbackOptionsChangeResponse} message CashbackOptionsChangeResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackOptionsChangeResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified CashbackOptionsChangeResponse message, length delimited. Does not implicitly {@link md.maib.app.cashback.CashbackOptionsChangeResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeResponse
                     * @static
                     * @param {md.maib.app.cashback.ICashbackOptionsChangeResponse} message CashbackOptionsChangeResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CashbackOptionsChangeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CashbackOptionsChangeResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {md.maib.app.cashback.CashbackOptionsChangeResponse} CashbackOptionsChangeResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackOptionsChangeResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.md.maib.app.cashback.CashbackOptionsChangeResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.result = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CashbackOptionsChangeResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {md.maib.app.cashback.CashbackOptionsChangeResponse} CashbackOptionsChangeResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CashbackOptionsChangeResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CashbackOptionsChangeResponse message.
                     * @function verify
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CashbackOptionsChangeResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a CashbackOptionsChangeResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {md.maib.app.cashback.CashbackOptionsChangeResponse} CashbackOptionsChangeResponse
                     */
                    CashbackOptionsChangeResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.md.maib.app.cashback.CashbackOptionsChangeResponse)
                            return object;
                        let message = new $root.md.maib.app.cashback.CashbackOptionsChangeResponse();
                        switch (object.result) {
                        case "UNKNOWN_RESULT":
                        case 0:
                            message.result = 0;
                            break;
                        case "OK":
                        case 1:
                            message.result = 1;
                            break;
                        case "UNSUPPORTED_ACCOUNT":
                        case 2:
                            message.result = 2;
                            break;
                        case "NOT_FOUND":
                        case 3:
                            message.result = 3;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a CashbackOptionsChangeResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeResponse
                     * @static
                     * @param {md.maib.app.cashback.CashbackOptionsChangeResponse} message CashbackOptionsChangeResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CashbackOptionsChangeResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.result = options.enums === String ? "UNKNOWN_RESULT" : 0;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.md.maib.app.cashback.CashbackOptionsChangeResponse.Result[message.result] : message.result;
                        return object;
                    };

                    /**
                     * Converts this CashbackOptionsChangeResponse to JSON.
                     * @function toJSON
                     * @memberof md.maib.app.cashback.CashbackOptionsChangeResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CashbackOptionsChangeResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Result enum.
                     * @name md.maib.app.cashback.CashbackOptionsChangeResponse.Result
                     * @enum {number}
                     * @property {number} UNKNOWN_RESULT=0 UNKNOWN_RESULT value
                     * @property {number} OK=1 OK value
                     * @property {number} UNSUPPORTED_ACCOUNT=2 UNSUPPORTED_ACCOUNT value
                     * @property {number} NOT_FOUND=3 NOT_FOUND value
                     */
                    CashbackOptionsChangeResponse.Result = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN_RESULT"] = 0;
                        values[valuesById[1] = "OK"] = 1;
                        values[valuesById[2] = "UNSUPPORTED_ACCOUNT"] = 2;
                        values[valuesById[3] = "NOT_FOUND"] = 3;
                        return values;
                    })();

                    return CashbackOptionsChangeResponse;
                })();

                /**
                 * CashbackType enum.
                 * @name md.maib.app.cashback.CashbackType
                 * @enum {number}
                 * @property {number} UNKNOWN_TYPE=0 UNKNOWN_TYPE value
                 * @property {number} GUARANTEED=1 GUARANTEED value
                 * @property {number} PARTNER=2 PARTNER value
                 */
                cashback.CashbackType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN_TYPE"] = 0;
                    values[valuesById[1] = "GUARANTEED"] = 1;
                    values[valuesById[2] = "PARTNER"] = 2;
                    return values;
                })();

                /**
                 * CashbackPayoutStatus enum.
                 * @name md.maib.app.cashback.CashbackPayoutStatus
                 * @enum {number}
                 * @property {number} UNKNOWN_STATUS=0 UNKNOWN_STATUS value
                 * @property {number} CALCULATED=1 CALCULATED value
                 * @property {number} TRANSFERRED=2 TRANSFERRED value
                 */
                cashback.CashbackPayoutStatus = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN_STATUS"] = 0;
                    values[valuesById[1] = "CALCULATED"] = 1;
                    values[valuesById[2] = "TRANSFERRED"] = 2;
                    return values;
                })();

                return cashback;
            })();

            return app;
        })();

        return maib;
    })();

    return md;
})();

export { $root as default };
